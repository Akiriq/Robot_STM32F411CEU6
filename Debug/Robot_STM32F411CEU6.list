
Robot_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009450  08009450  0000b0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009450  08009450  0000a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009458  08009458  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800945c  0800945c  0000a45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08009460  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e34  200000fc  0800955c  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  0800955c  0000bf30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e17  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2d  00000000  00000000  00021f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00025a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001068  00000000  00000000  00026fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af6f  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b98  00000000  00000000  00042fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e45d  00000000  00000000  0005cb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fafb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  000faff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010099c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080093a0 	.word	0x080093a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080093a0 	.word	0x080093a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 fb04 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f816 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fad6 	bl	8000ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000514:	f000 f87a 	bl	800060c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000518:	f000 f8ca 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800051c:	f008 fa2a 	bl	8008974 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000520:	f000 f8fc 	bl	800071c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f97e 	bl	8000824 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000528:	f000 f9d4 	bl	80008d4 <MX_TIM4_Init>
  MX_TIM10_Init();
 800052c:	f000 fa2c 	bl	8000988 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000530:	f000 fa78 	bl	8000a24 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  movement();
 8000534:	f000 fbea 	bl	8000d0c <movement>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x34>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 fefc 	bl	8009348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a26      	ldr	r2, [pc, #152]	@ (8000604 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b24      	ldr	r3, [pc, #144]	@ (8000604 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <SystemClock_Config+0xcc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b0:	23c0      	movs	r3, #192	@ 0xc0
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fab1 	bl	8003b28 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 fb0a 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fd13 	bl	8004018 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f8:	f000 faf4 	bl	8000be4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	@ 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x9c>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800064e:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800066e:	f001 fae7 	bl	8001c40 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fab4 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800068e:	f001 fb1b 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 faa4 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000118 	.word	0x20000118
 80006a8:	40012000 	.word	0x40012000
 80006ac:	0f000001 	.word	0x0f000001

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	@ (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f003 fe41 	bl	8004388 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 fa6a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000160 	.word	0x20000160
 8000718:	40013000 	.word	0x40013000

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b092      	sub	sp, #72	@ 0x48
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f008 fdfe 	bl	8009348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_TIM1_Init+0x100>)
 800074e:	4a34      	ldr	r2, [pc, #208]	@ (8000820 <MX_TIM1_Init+0x104>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96;
 8000752:	4b32      	ldr	r3, [pc, #200]	@ (800081c <MX_TIM1_Init+0x100>)
 8000754:	2260      	movs	r2, #96	@ 0x60
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b30      	ldr	r3, [pc, #192]	@ (800081c <MX_TIM1_Init+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800075e:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_TIM1_Init+0x100>)
 8000760:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <MX_TIM1_Init+0x100>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <MX_TIM1_Init+0x100>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <MX_TIM1_Init+0x100>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000778:	4828      	ldr	r0, [pc, #160]	@ (800081c <MX_TIM1_Init+0x100>)
 800077a:	f004 f962 	bl	8004a42 <HAL_TIM_PWM_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000784:	f000 fa2e 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000790:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000794:	4619      	mov	r1, r3
 8000796:	4821      	ldr	r0, [pc, #132]	@ (800081c <MX_TIM1_Init+0x100>)
 8000798:	f004 fd52 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 fa1f 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a6:	2360      	movs	r3, #96	@ 0x60
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_TIM1_Init+0x100>)
 80007cc:	f004 fa38 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007d6:	f000 fa05 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <MX_TIM1_Init+0x100>)
 80007fe:	f004 fd8d 	bl	800531c <HAL_TIMEx_ConfigBreakDeadTime>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000808:	f000 f9ec 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_TIM1_Init+0x100>)
 800080e:	f001 f835 	bl	800187c <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3748      	adds	r7, #72	@ 0x48
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001b8 	.word	0x200001b8
 8000820:	40010000 	.word	0x40010000

08000824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000850:	2260      	movs	r2, #96	@ 0x60
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800085c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000870:	f004 f8e7 	bl	8004a42 <HAL_TIM_PWM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800087a:	f000 f9b3 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	4619      	mov	r1, r3
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800088e:	f004 fcd7 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000898:	f000 f9a4 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	@ 0x60
 800089e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_TIM2_Init+0xac>)
 80008b4:	f004 f9c4 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008be:	f000 f991 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <MX_TIM2_Init+0xac>)
 80008c4:	f000 ffda 	bl	800187c <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000200 	.word	0x20000200

080008d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f6:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_TIM4_Init+0xac>)
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <MX_TIM4_Init+0xb0>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_TIM4_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_TIM4_Init+0xac>)
 800090a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800090e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800091c:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_TIM4_Init+0xac>)
 800091e:	f004 f890 	bl	8004a42 <HAL_TIM_PWM_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f95c 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_TIM4_Init+0xac>)
 800093c:	f004 fc80 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000946:	f000 f94d 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	@ 0x60
 800094c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000962:	f004 f96d 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800096c:	f000 f93a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000972:	f000 ff83 	bl	800187c <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000248 	.word	0x20000248
 8000984:	40000800 	.word	0x40000800

08000988 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <MX_TIM10_Init+0x98>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009c6:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009c8:	f003 ffec 	bl	80049a4 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80009d2:	f000 f907 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009d8:	f004 f833 	bl	8004a42 <HAL_TIM_PWM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80009e2:	f000 f8ff 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009fe:	f004 f91f 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000a08:	f000 f8ec 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <MX_TIM10_Init+0x94>)
 8000a0e:	f000 ff35 	bl	800187c <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000290 	.word	0x20000290
 8000a20:	40014400 	.word	0x40014400

08000a24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_TIM11_Init+0x98>)
 8000a40:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a44:	2260      	movs	r2, #96	@ 0x60
 8000a46:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a50:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000a54:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a64:	f003 ff9e 	bl	80049a4 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000a6e:	f000 f8b9 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a74:	f003 ffe5 	bl	8004a42 <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 f8b1 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	@ 0x60
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a9a:	f004 f8d1 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000aa4:	f000 f89e 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000aaa:	f000 fee7 	bl	800187c <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002d8 	.word	0x200002d8
 8000abc:	40014800 	.word	0x40014800

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b38      	ldr	r3, [pc, #224]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a37      	ldr	r2, [pc, #220]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4c:	4823      	ldr	r0, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0x11c>)
 8000b4e:	f001 fd7f 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b58:	4821      	ldr	r0, [pc, #132]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000b5a:	f001 fd79 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4819      	ldr	r0, [pc, #100]	@ (8000bdc <MX_GPIO_Init+0x11c>)
 8000b78:	f001 fbe6 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : DSW_0_Pin DSW_1_Pin DSW_2_Pin DSW_3_Pin */
  GPIO_InitStruct.Pin = DSW_0_Pin|DSW_1_Pin|DSW_2_Pin|DSW_3_Pin;
 8000b7c:	f243 4304 	movw	r3, #13316	@ 0x3404
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4813      	ldr	r0, [pc, #76]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000b92:	f001 fbd9 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000b96:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000bb0:	f001 fbca 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000bca:	f001 fbbd 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020400 	.word	0x40020400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <Error_Handler+0x8>

08000bf0 <nRF24_CE_L>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;


static inline void nRF24_CE_L() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfa:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <nRF24_CE_L+0x14>)
 8000bfc:	f001 fd28 	bl	8002650 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020400 	.word	0x40020400

08000c08 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c12:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <nRF24_CE_H+0x14>)
 8000c14:	f001 fd1c 	bl	8002650 <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020400 	.word	0x40020400

08000c20 <nRF24_TransmitPacket>:
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <nRF24_TransmitPacket+0x80>)
 8000c2e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000c30:	f7ff ffde 	bl	8000bf0 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	4619      	mov	r1, r3
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fc4e 	bl	80014da <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000c3e:	f7ff ffe3 	bl	8000c08 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8000c42:	f000 fc12 	bl	800146a <nRF24_GetStatus>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d105      	bne.n	8000c60 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f1      	bne.n	8000c42 <nRF24_TransmitPacket+0x22>
 8000c5e:	e000      	b.n	8000c62 <nRF24_TransmitPacket+0x42>
			break;
 8000c60:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000c62:	f7ff ffc5 	bl	8000bf0 <nRF24_CE_L>

	if (!wait) {
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e012      	b.n	8000c96 <nRF24_TransmitPacket+0x76>
	}


	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8000c70:	f000 fc1e 	bl	80014b0 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <nRF24_TransmitPacket+0x62>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e009      	b.n	8000c96 <nRF24_TransmitPacket+0x76>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f003 0320 	and.w	r3, r3, #32
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <nRF24_TransmitPacket+0x70>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e002      	b.n	8000c96 <nRF24_TransmitPacket+0x76>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8000c90:	f000 fbfe 	bl	8001490 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	000fffff 	.word	0x000fffff

08000ca4 <send_payload>:

void send_payload(uint8_t* payload, uint8_t length)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fa7e 	bl	80011b2 <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000cb6:	f000 fbfb 	bl	80014b0 <nRF24_ClearIRQFlags>


	// Transmit a packet
	tx_res = nRF24_TransmitPacket(payload, length);
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffae 	bl	8000c20 <nRF24_TransmitPacket>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <send_payload+0x64>)
 8000cca:	701a      	strb	r2, [r3, #0]
	switch (tx_res) {
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <send_payload+0x64>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d006      	beq.n	8000ce2 <send_payload+0x3e>
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	dc06      	bgt.n	8000ce6 <send_payload+0x42>
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d006      	beq.n	8000cea <send_payload+0x46>
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d006      	beq.n	8000cee <send_payload+0x4a>
		case nRF24_TX_MAXRT:

			break;
		default:

			break;
 8000ce0:	e001      	b.n	8000ce6 <send_payload+0x42>
			break;
 8000ce2:	bf00      	nop
 8000ce4:	e004      	b.n	8000cf0 <send_payload+0x4c>
			break;
 8000ce6:	bf00      	nop
 8000ce8:	e002      	b.n	8000cf0 <send_payload+0x4c>
			break;
 8000cea:	bf00      	nop
 8000cec:	e000      	b.n	8000cf0 <send_payload+0x4c>
			break;
 8000cee:	bf00      	nop
	}

	HAL_Delay(5);
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f000 ff81 	bl	8001bf8 <HAL_Delay>
    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fa5b 	bl	80011b2 <nRF24_SetOperationalMode>


    // Put the transceiver to the RX mode
    nRF24_CE_H();
 8000cfc:	f7ff ff84 	bl	8000c08 <nRF24_CE_H>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000346 	.word	0x20000346

08000d0c <movement>:
    	}
    }
}

void movement(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim1,TIM_CHANNEL_1 );
 8000d12:	2100      	movs	r1, #0
 8000d14:	4869      	ldr	r0, [pc, #420]	@ (8000ebc <movement+0x1b0>)
 8000d16:	f003 fee3 	bl	8004ae0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,150);
 8000d1a:	4b68      	ldr	r3, [pc, #416]	@ (8000ebc <movement+0x1b0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2296      	movs	r2, #150	@ 0x96
 8000d20:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start( &htim2,TIM_CHANNEL_1 );
 8000d22:	2100      	movs	r1, #0
 8000d24:	4866      	ldr	r0, [pc, #408]	@ (8000ec0 <movement+0x1b4>)
 8000d26:	f003 fedb 	bl	8004ae0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,150);
 8000d2a:	4b65      	ldr	r3, [pc, #404]	@ (8000ec0 <movement+0x1b4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2296      	movs	r2, #150	@ 0x96
 8000d30:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start( &htim11,TIM_CHANNEL_1 );
 8000d32:	2100      	movs	r1, #0
 8000d34:	4863      	ldr	r0, [pc, #396]	@ (8000ec4 <movement+0x1b8>)
 8000d36:	f003 fed3 	bl	8004ae0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim11, TIM_CHANNEL_1,150);
 8000d3a:	4b62      	ldr	r3, [pc, #392]	@ (8000ec4 <movement+0x1b8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2296      	movs	r2, #150	@ 0x96
 8000d40:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_Delay(1000);
 8000d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d46:	f000 ff57 	bl	8001bf8 <HAL_Delay>
		// RX/TX disabled
		nRF24_CE_L();
 8000d4a:	f7ff ff51 	bl	8000bf0 <nRF24_CE_L>

		// Configure the nRF24L01+

		HAL_Delay(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d52:	f000 ff51 	bl	8001bf8 <HAL_Delay>
		if (!nRF24_Check())
 8000d56:	f000 f9df 	bl	8001118 <nRF24_Check>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <movement+0x68>
		{

			while (1)
			{
				HAL_Delay(100);
 8000d60:	2064      	movs	r0, #100	@ 0x64
 8000d62:	f000 ff49 	bl	8001bf8 <HAL_Delay>
				if (nRF24_Check()) break;
 8000d66:	f000 f9d7 	bl	8001118 <nRF24_Check>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d100      	bne.n	8000d72 <movement+0x66>
				HAL_Delay(100);
 8000d70:	e7f6      	b.n	8000d60 <movement+0x54>
				if (nRF24_Check()) break;
 8000d72:	bf00      	nop




		// Initialize the nRF24L01 to its default state
		nRF24_Init();
 8000d74:	f000 f983 	bl	800107e <nRF24_Init>
		//   - CRC scheme		: 2 byte

	    // The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

	    // Disable ShockBurst for all RX pipes
	    nRF24_DisableAA(0xFF);
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	f000 fb4f 	bl	800141c <nRF24_DisableAA>

	    // Set RF channel
	    nRF24_SetRFChannel(115);
 8000d7e:	2073      	movs	r0, #115	@ 0x73
 8000d80:	f000 fa59 	bl	8001236 <nRF24_SetRFChannel>

	    // Set data rate
	    nRF24_SetDataRate(nRF24_DR_250kbps);
 8000d84:	2020      	movs	r0, #32
 8000d86:	f000 fada 	bl	800133e <nRF24_SetDataRate>

	    // Set CRC scheme
	    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000d8a:	200c      	movs	r0, #12
 8000d8c:	f000 fa32 	bl	80011f4 <nRF24_SetCRCScheme>

	    // Set address width, its common for all pipes (RX and TX)
	    nRF24_SetAddrWidth(3);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 fa5e 	bl	8001252 <nRF24_SetAddrWidth>

	    // Configure RX PIPE#1
	    static const uint8_t nRF24_ADDR_Rx[] = { 0xE7, 0x1C, 0xE4 };
	    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_Rx); // program address for RX pipe #1
 8000d96:	494c      	ldr	r1, [pc, #304]	@ (8000ec8 <movement+0x1bc>)
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f000 fa6b 	bl	8001274 <nRF24_SetAddr>
	    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 8000d9e:	2205      	movs	r2, #5
 8000da0:	2100      	movs	r1, #0
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 fae6 	bl	8001374 <nRF24_SetRXPipe>

	    // Configure TX PIPE
	    static const uint8_t nRF24_ADDR_Tx[] = { 0xE7, 0x1C, 0xE3 };
	    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR_Tx); // program TX address
 8000da8:	4948      	ldr	r1, [pc, #288]	@ (8000ecc <movement+0x1c0>)
 8000daa:	2006      	movs	r0, #6
 8000dac:	f000 fa62 	bl	8001274 <nRF24_SetAddr>

	    // Set TX power (maximum)
	    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000db0:	2006      	movs	r0, #6
 8000db2:	f000 faa9 	bl	8001308 <nRF24_SetTXPower>

	    // Set operational mode (PRX == receiver)
	    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 f9fb 	bl	80011b2 <nRF24_SetOperationalMode>

	    // Wake the transceiver
	    nRF24_SetPowerMode(nRF24_PWR_UP);
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f000 f9d9 	bl	8001174 <nRF24_SetPowerMode>

	    // Put the transceiver to the RX mode
	    nRF24_CE_H();
 8000dc2:	f7ff ff21 	bl	8000c08 <nRF24_CE_H>
	    	// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
	    	//
	    	// This is far from best solution, but it's ok for testing purposes
	    	// More smart way is to use the IRQ pin :)
	    	//
	    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8000dc6:	f000 fb58 	bl	800147a <nRF24_GetStatus_RXFIFO>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d02d      	beq.n	8000e2c <movement+0x120>
	    	{
	    		// Get a payload from the transceiver
	    		pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 8000dd0:	493f      	ldr	r1, [pc, #252]	@ (8000ed0 <movement+0x1c4>)
 8000dd2:	4840      	ldr	r0, [pc, #256]	@ (8000ed4 <movement+0x1c8>)
 8000dd4:	f000 fbee 	bl	80015b4 <nRF24_ReadPayload>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <movement+0x1cc>)
 8000dde:	701a      	strb	r2, [r3, #0]

	    		// Clear all pending IRQ flags
				nRF24_ClearIRQFlags();
 8000de0:	f000 fb66 	bl	80014b0 <nRF24_ClearIRQFlags>

				// Print a payload contents to UART


				HAL_Delay(2);
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 ff07 	bl	8001bf8 <HAL_Delay>
				uint8_t message[32] = {0xaa,0x44,0x11,0x22,0x55};
 8000dea:	4a3c      	ldr	r2, [pc, #240]	@ (8000edc <movement+0x1d0>)
 8000dec:	463b      	mov	r3, r7
 8000dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df2:	6018      	str	r0, [r3, #0]
 8000df4:	3304      	adds	r3, #4
 8000df6:	8019      	strh	r1, [r3, #0]
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	831a      	strh	r2, [r3, #24]
				send_payload(message, 5);
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff48 	bl	8000ca4 <send_payload>
				//send_payload(nRF24_payload, payload_length);

				Val_X = nRF24_payload[2];
 8000e14:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <movement+0x1c8>)
 8000e16:	789a      	ldrb	r2, [r3, #2]
 8000e18:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <movement+0x1d4>)
 8000e1a:	701a      	strb	r2, [r3, #0]
				Val_Y = nRF24_payload[3];
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <movement+0x1c8>)
 8000e1e:	78da      	ldrb	r2, [r3, #3]
 8000e20:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <movement+0x1d8>)
 8000e22:	701a      	strb	r2, [r3, #0]
				Val_S = nRF24_payload[1];
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <movement+0x1c8>)
 8000e26:	785a      	ldrb	r2, [r3, #1]
 8000e28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <movement+0x1dc>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	    	}
	    	// speed of the drum
	    	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,150 + Val_S*50/256);
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee8 <movement+0x1dc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2332      	movs	r3, #50	@ 0x32
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	da00      	bge.n	8000e3e <movement+0x132>
 8000e3c:	33ff      	adds	r3, #255	@ 0xff
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <movement+0x1b0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	635a      	str	r2, [r3, #52]	@ 0x34

	    	//speed of the left wheel
	    	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,100 + Val_Y*100/256 - (256 - Val_X)*50/256);
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <movement+0x1d8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2364      	movs	r3, #100	@ 0x64
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da00      	bge.n	8000e5c <movement+0x150>
 8000e5a:	33ff      	adds	r3, #255	@ 0xff
 8000e5c:	121b      	asrs	r3, r3, #8
 8000e5e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <movement+0x1d4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e6a:	2132      	movs	r1, #50	@ 0x32
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da00      	bge.n	8000e76 <movement+0x16a>
 8000e74:	33ff      	adds	r3, #255	@ 0xff
 8000e76:	121b      	asrs	r3, r3, #8
 8000e78:	425b      	negs	r3, r3
 8000e7a:	441a      	add	r2, r3
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <movement+0x1b0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	635a      	str	r2, [r3, #52]	@ 0x34

	    	//speed of the right wheel
	    	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,100 + Val_Y*100/256 + (256 - Val_X)*50/256);
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <movement+0x1d8>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	2364      	movs	r3, #100	@ 0x64
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da00      	bge.n	8000e94 <movement+0x188>
 8000e92:	33ff      	adds	r3, #255	@ 0xff
 8000e94:	121b      	asrs	r3, r3, #8
 8000e96:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <movement+0x1d4>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000ea2:	2132      	movs	r1, #50	@ 0x32
 8000ea4:	fb01 f303 	mul.w	r3, r1, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da00      	bge.n	8000eae <movement+0x1a2>
 8000eac:	33ff      	adds	r3, #255	@ 0xff
 8000eae:	121b      	asrs	r3, r3, #8
 8000eb0:	441a      	add	r2, r3
 8000eb2:	4b02      	ldr	r3, [pc, #8]	@ (8000ebc <movement+0x1b0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	635a      	str	r2, [r3, #52]	@ 0x34
	    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8000eb8:	e785      	b.n	8000dc6 <movement+0xba>
 8000eba:	bf00      	nop
 8000ebc:	200001b8 	.word	0x200001b8
 8000ec0:	20000200 	.word	0x20000200
 8000ec4:	200002d8 	.word	0x200002d8
 8000ec8:	08009428 	.word	0x08009428
 8000ecc:	0800942c 	.word	0x0800942c
 8000ed0:	20000345 	.word	0x20000345
 8000ed4:	20000324 	.word	0x20000324
 8000ed8:	20000344 	.word	0x20000344
 8000edc:	080093b8 	.word	0x080093b8
 8000ee0:	20000320 	.word	0x20000320
 8000ee4:	20000321 	.word	0x20000321
 8000ee8:	20000322 	.word	0x20000322

08000eec <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ef6:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <nRF24_CSN_L+0x14>)
 8000ef8:	f001 fbaa 	bl	8002650 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40020400 	.word	0x40020400

08000f04 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0e:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <nRF24_CSN_H+0x14>)
 8000f10:	f001 fb9e 	bl	8002650 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020400 	.word	0x40020400

08000f1c <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000f26:	f107 020f 	add.w	r2, r7, #15
 8000f2a:	1df9      	adds	r1, r7, #7
 8000f2c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <nRF24_LL_RW+0x34>)
 8000f36:	f003 fab0 	bl	800449a <HAL_SPI_TransmitReceive>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000f40:	f7ff fe50 	bl	8000be4 <Error_Handler>
    };
    return result;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000160 	.word	0x20000160

08000f54 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000f5e:	f7ff ffc5 	bl	8000eec <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffd6 	bl	8000f1c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000f70:	20ff      	movs	r0, #255	@ 0xff
 8000f72:	f7ff ffd3 	bl	8000f1c <nRF24_LL_RW>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000f7a:	f7ff ffc3 	bl	8000f04 <nRF24_CSN_H>

	return value;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000f98:	f7ff ffa8 	bl	8000eec <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b1f      	cmp	r3, #31
 8000fa0:	d810      	bhi.n	8000fc4 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffb1 	bl	8000f1c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffad 	bl	8000f1c <nRF24_LL_RW>
 8000fc2:	e013      	b.n	8000fec <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffa8 	bl	8000f1c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2be1      	cmp	r3, #225	@ 0xe1
 8000fd0:	d00c      	beq.n	8000fec <nRF24_WriteReg+0x64>
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2be2      	cmp	r3, #226	@ 0xe2
 8000fd6:	d009      	beq.n	8000fec <nRF24_WriteReg+0x64>
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2be3      	cmp	r3, #227	@ 0xe3
 8000fdc:	d006      	beq.n	8000fec <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2bff      	cmp	r3, #255	@ 0xff
 8000fe2:	d003      	beq.n	8000fec <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff98 	bl	8000f1c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000fec:	f7ff ff8a 	bl	8000f04 <nRF24_CSN_H>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001008:	f7ff ff70 	bl	8000eec <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff84 	bl	8000f1c <nRF24_LL_RW>
	while (count--) {
 8001014:	e007      	b.n	8001026 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8001016:	683c      	ldr	r4, [r7, #0]
 8001018:	1c63      	adds	r3, r4, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	20ff      	movs	r0, #255	@ 0xff
 800101e:	f7ff ff7d 	bl	8000f1c <nRF24_LL_RW>
 8001022:	4603      	mov	r3, r0
 8001024:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	71ba      	strb	r2, [r7, #6]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f2      	bne.n	8001016 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8001030:	f7ff ff68 	bl	8000f04 <nRF24_CSN_H>
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}

0800103c <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800104c:	f7ff ff4e 	bl	8000eec <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff62 	bl	8000f1c <nRF24_LL_RW>
	while (count--) {
 8001058:	e006      	b.n	8001068 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff5a 	bl	8000f1c <nRF24_LL_RW>
	while (count--) {
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	71ba      	strb	r2, [r7, #6]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f3      	bne.n	800105a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8001072:	f7ff ff47 	bl	8000f04 <nRF24_CSN_H>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8001082:	2108      	movs	r1, #8
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff ff7f 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800108a:	213f      	movs	r1, #63	@ 0x3f
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff7b 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8001092:	2103      	movs	r1, #3
 8001094:	2002      	movs	r0, #2
 8001096:	f7ff ff77 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800109a:	2103      	movs	r1, #3
 800109c:	2003      	movs	r0, #3
 800109e:	f7ff ff73 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80010a2:	2103      	movs	r1, #3
 80010a4:	2004      	movs	r0, #4
 80010a6:	f7ff ff6f 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80010aa:	2102      	movs	r1, #2
 80010ac:	2005      	movs	r0, #5
 80010ae:	f7ff ff6b 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 80010b2:	210e      	movs	r1, #14
 80010b4:	2006      	movs	r0, #6
 80010b6:	f7ff ff67 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80010ba:	2100      	movs	r1, #0
 80010bc:	2007      	movs	r0, #7
 80010be:	f7ff ff63 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80010c2:	2100      	movs	r1, #0
 80010c4:	2011      	movs	r0, #17
 80010c6:	f7ff ff5f 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2012      	movs	r0, #18
 80010ce:	f7ff ff5b 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80010d2:	2100      	movs	r1, #0
 80010d4:	2013      	movs	r0, #19
 80010d6:	f7ff ff57 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80010da:	2100      	movs	r1, #0
 80010dc:	2014      	movs	r0, #20
 80010de:	f7ff ff53 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2015      	movs	r0, #21
 80010e6:	f7ff ff4f 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80010ea:	2100      	movs	r1, #0
 80010ec:	2016      	movs	r0, #22
 80010ee:	f7ff ff4b 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80010f2:	2100      	movs	r1, #0
 80010f4:	201c      	movs	r0, #28
 80010f6:	f7ff ff47 	bl	8000f88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80010fa:	2100      	movs	r1, #0
 80010fc:	201d      	movs	r0, #29
 80010fe:	f7ff ff43 	bl	8000f88 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8001102:	f000 f9cd 	bl	80014a0 <nRF24_FlushRX>
	nRF24_FlushTX();
 8001106:	f000 f9c3 	bl	8001490 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800110a:	f000 f9d1 	bl	80014b0 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800110e:	f7ff fef9 	bl	8000f04 <nRF24_CSN_H>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <nRF24_Check+0x58>)
 8001120:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8001122:	2205      	movs	r2, #5
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	2030      	movs	r0, #48	@ 0x30
 8001128:	f7ff ff88 	bl	800103c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800112c:	463b      	mov	r3, r7
 800112e:	2205      	movs	r2, #5
 8001130:	4619      	mov	r1, r3
 8001132:	2010      	movs	r0, #16
 8001134:	f7ff ff60 	bl	8000ff8 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e00f      	b.n	800115e <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3310      	adds	r3, #16
 8001142:	443b      	add	r3, r7
 8001144:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <nRF24_Check+0x40>
 8001154:	2300      	movs	r3, #0
 8001156:	e006      	b.n	8001166 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3301      	adds	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d9ec      	bls.n	800113e <nRF24_Check+0x26>
	}

	return 1;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	080093d8 	.word	0x080093d8

08001174 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fee8 	bl	8000f54 <nRF24_ReadReg>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d104      	bne.n	8001198 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e003      	b.n	80011a0 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	4619      	mov	r1, r3
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff feef 	bl	8000f88 <nRF24_WriteReg>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fec9 	bl	8000f54 <nRF24_ReadReg>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fece 	bl	8000f88 <nRF24_WriteReg>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fea8 	bl	8000f54 <nRF24_ReadReg>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	f023 030c 	bic.w	r3, r3, #12
 800120e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	b25a      	sxtb	r2, r3
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4313      	orrs	r3, r2
 8001220:	b25b      	sxtb	r3, r3
 8001222:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	4619      	mov	r1, r3
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fead 	bl	8000f88 <nRF24_WriteReg>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4619      	mov	r1, r3
 8001244:	2005      	movs	r0, #5
 8001246:	f7ff fe9f 	bl	8000f88 <nRF24_WriteReg>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	3b02      	subs	r3, #2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	2003      	movs	r0, #3
 8001266:	f7ff fe8f 	bl	8000f88 <nRF24_WriteReg>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b06      	cmp	r3, #6
 8001284:	d00a      	beq.n	800129c <nRF24_SetAddr+0x28>
 8001286:	2b06      	cmp	r3, #6
 8001288:	dc36      	bgt.n	80012f8 <nRF24_SetAddr+0x84>
 800128a:	2b01      	cmp	r3, #1
 800128c:	dc02      	bgt.n	8001294 <nRF24_SetAddr+0x20>
 800128e:	2b00      	cmp	r3, #0
 8001290:	da04      	bge.n	800129c <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001292:	e031      	b.n	80012f8 <nRF24_SetAddr+0x84>
 8001294:	3b02      	subs	r3, #2
	switch (pipe) {
 8001296:	2b03      	cmp	r3, #3
 8001298:	d82e      	bhi.n	80012f8 <nRF24_SetAddr+0x84>
 800129a:	e023      	b.n	80012e4 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff fe59 	bl	8000f54 <nRF24_ReadReg>
 80012a2:	4603      	mov	r3, r0
 80012a4:	3301      	adds	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80012b0:	f7ff fe1c 	bl	8000eec <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <nRF24_SetAddr+0x90>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe2b 	bl	8000f1c <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe24 	bl	8000f1c <nRF24_LL_RW>
			} while (addr_width--);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	73fa      	strb	r2, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f3      	bne.n	80012c6 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 80012de:	f7ff fe11 	bl	8000f04 <nRF24_CSN_H>
			break;
 80012e2:	e00a      	b.n	80012fa <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <nRF24_SetAddr+0x90>)
 80012e8:	5cd2      	ldrb	r2, [r2, r3]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff fe49 	bl	8000f88 <nRF24_WriteReg>
			break;
 80012f6:	e000      	b.n	80012fa <nRF24_SetAddr+0x86>
			break;
 80012f8:	bf00      	nop
	}
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08009438 	.word	0x08009438

08001308 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001312:	2006      	movs	r0, #6
 8001314:	f7ff fe1e 	bl	8000f54 <nRF24_ReadReg>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f023 0306 	bic.w	r3, r3, #6
 8001322:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4313      	orrs	r3, r2
 800132a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	4619      	mov	r1, r3
 8001330:	2006      	movs	r0, #6
 8001332:	f7ff fe29 	bl	8000f88 <nRF24_WriteReg>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fe03 	bl	8000f54 <nRF24_ReadReg>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001358:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4313      	orrs	r3, r2
 8001360:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4619      	mov	r1, r3
 8001366:	2006      	movs	r0, #6
 8001368:	f7ff fe0e 	bl	8000f88 <nRF24_WriteReg>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	460b      	mov	r3, r1
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	4613      	mov	r3, r2
 8001384:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8001386:	2002      	movs	r0, #2
 8001388:	f7ff fde4 	bl	8000f54 <nRF24_ReadReg>
 800138c:	4603      	mov	r3, r0
 800138e:	b25a      	sxtb	r2, r3
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	b25b      	sxtb	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b25b      	sxtb	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4619      	mov	r1, r3
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fdec 	bl	8000f88 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <nRF24_SetRXPipe+0xa4>)
 80013b4:	5cd2      	ldrb	r2, [r2, r3]
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f7ff fde1 	bl	8000f88 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff fdc4 	bl	8000f54 <nRF24_ReadReg>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10a      	bne.n	80013ec <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2201      	movs	r2, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e00b      	b.n	8001404 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2201      	movs	r2, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4013      	ands	r3, r2
 8001400:	b25b      	sxtb	r3, r3
 8001402:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4619      	mov	r1, r3
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fdbd 	bl	8000f88 <nRF24_WriteReg>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08009430 	.word	0x08009430

0800141c <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d904      	bls.n	8001436 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff fdaa 	bl	8000f88 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8001434:	e015      	b.n	8001462 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fd8c 	bl	8000f54 <nRF24_ReadReg>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2201      	movs	r2, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	b25a      	sxtb	r2, r3
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4013      	ands	r3, r2
 8001454:	b25b      	sxtb	r3, r3
 8001456:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	4619      	mov	r1, r3
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fd93 	bl	8000f88 <nRF24_WriteReg>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800146e:	2007      	movs	r0, #7
 8001470:	f7ff fd70 	bl	8000f54 <nRF24_ReadReg>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}

0800147a <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800147e:	2017      	movs	r0, #23
 8001480:	f7ff fd68 	bl	8000f54 <nRF24_ReadReg>
 8001484:	4603      	mov	r3, r0
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	b2db      	uxtb	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}

08001490 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001494:	21ff      	movs	r1, #255	@ 0xff
 8001496:	20e1      	movs	r0, #225	@ 0xe1
 8001498:	f7ff fd76 	bl	8000f88 <nRF24_WriteReg>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80014a4:	21ff      	movs	r1, #255	@ 0xff
 80014a6:	20e2      	movs	r0, #226	@ 0xe2
 80014a8:	f7ff fd6e 	bl	8000f88 <nRF24_WriteReg>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80014b6:	2007      	movs	r0, #7
 80014b8:	f7ff fd4c 	bl	8000f54 <nRF24_ReadReg>
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80014c6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4619      	mov	r1, r3
 80014cc:	2007      	movs	r0, #7
 80014ce:	f7ff fd5b 	bl	8000f88 <nRF24_WriteReg>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	20a0      	movs	r0, #160	@ 0xa0
 80014ee:	f7ff fda5 	bl	800103c <nRF24_WriteMBReg>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8001500:	f7ff fcf4 	bl	8000eec <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8001504:	2060      	movs	r0, #96	@ 0x60
 8001506:	f7ff fd09 	bl	8000f1c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 800150a:	20ff      	movs	r0, #255	@ 0xff
 800150c:	f7ff fd06 	bl	8000f1c <nRF24_LL_RW>
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8001514:	f7ff fcf6 	bl	8000f04 <nRF24_CSN_H>

	return value;
 8001518:	79fb      	ldrb	r3, [r7, #7]

}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	4613      	mov	r3, r2
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8001532:	2007      	movs	r0, #7
 8001534:	f7ff fd0e 	bl	8000f54 <nRF24_ReadReg>
 8001538:	4603      	mov	r3, r0
 800153a:	105b      	asrs	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d829      	bhi.n	800159e <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00f      	beq.n	8001570 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001550:	f7ff ffd3 	bl	80014fa <nRF24_GetRxDplPayloadWidth>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b20      	cmp	r3, #32
 8001562:	d90f      	bls.n	8001584 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 800156a:	f7ff ff99 	bl	80014a0 <nRF24_FlushRX>
 800156e:	e009      	b.n	8001584 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <nRF24_ReadPayloadGeneric+0x8c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fcec 	bl	8000f54 <nRF24_ReadReg>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	2061      	movs	r0, #97	@ 0x61
 8001596:	f7ff fd2f 	bl	8000ff8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	e003      	b.n	80015a6 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80015a4:	23ff      	movs	r3, #255	@ 0xff
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08009430 	.word	0x08009430

080015b4 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 80015be:	2200      	movs	r2, #0
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffae 	bl	8001524 <nRF24_ReadPayloadGeneric>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <HAL_ADC_MspInit+0xb0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d141      	bne.n	80016ca <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a22      	ldr	r2, [pc, #136]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_ADC_MspInit+0xb4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800169a:	23ff      	movs	r3, #255	@ 0xff
 800169c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <HAL_ADC_MspInit+0xb8>)
 80016ae:	f000 fe4b 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b2:	2303      	movs	r3, #3
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b6:	2303      	movs	r3, #3
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <HAL_ADC_MspInit+0xbc>)
 80016c6:	f000 fe3f 	bl	8002348 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40012000 	.word	0x40012000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400

080016e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a19      	ldr	r2, [pc, #100]	@ (8001768 <HAL_SPI_MspInit+0x84>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d12b      	bne.n	800175e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <HAL_SPI_MspInit+0x88>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a17      	ldr	r2, [pc, #92]	@ (800176c <HAL_SPI_MspInit+0x88>)
 8001710:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_SPI_MspInit+0x88>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_SPI_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a10      	ldr	r2, [pc, #64]	@ (800176c <HAL_SPI_MspInit+0x88>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_SPI_MspInit+0x88>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800173e:	2338      	movs	r3, #56	@ 0x38
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174e:	2305      	movs	r3, #5
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <HAL_SPI_MspInit+0x8c>)
 800175a:	f000 fdf5 	bl	8002348 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	@ 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40013000 	.word	0x40013000
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400

08001774 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <HAL_TIM_PWM_MspInit+0x8c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10e      	bne.n	80017a4 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017a2:	e026      	b.n	80017f2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
}
 80017ca:	e012      	b.n	80017f2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_TIM_PWM_MspInit+0x94>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10d      	bne.n	80017f2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <HAL_TIM_PWM_MspInit+0x90>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40010000 	.word	0x40010000
 8001804:	40023800 	.word	0x40023800
 8001808:	40000800 	.word	0x40000800

0800180c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a15      	ldr	r2, [pc, #84]	@ (8001870 <HAL_TIM_Base_MspInit+0x64>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10e      	bne.n	800183c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <HAL_TIM_Base_MspInit+0x68>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <HAL_TIM_Base_MspInit+0x68>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_TIM_Base_MspInit+0x68>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 800183a:	e012      	b.n	8001862 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_TIM_Base_MspInit+0x6c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10d      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_TIM_Base_MspInit+0x68>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	4a09      	ldr	r2, [pc, #36]	@ (8001874 <HAL_TIM_Base_MspInit+0x68>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001854:	6453      	str	r3, [r2, #68]	@ 0x44
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_TIM_Base_MspInit+0x68>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40014400 	.word	0x40014400
 8001874:	40023800 	.word	0x40023800
 8001878:	40014800 	.word	0x40014800

0800187c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5c      	ldr	r2, [pc, #368]	@ (8001a0c <HAL_TIM_MspPostInit+0x190>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d11f      	bne.n	80018de <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_B_Pin;
 80018ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	484f      	ldr	r0, [pc, #316]	@ (8001a14 <HAL_TIM_MspPostInit+0x198>)
 80018d8:	f000 fd36 	bl	8002348 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80018dc:	e091      	b.n	8001a02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e6:	d11f      	bne.n	8001928 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	4b48      	ldr	r3, [pc, #288]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	4a47      	ldr	r2, [pc, #284]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f8:	4b45      	ldr	r3, [pc, #276]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_M_Pin;
 8001904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001916:	2301      	movs	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_M_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	483c      	ldr	r0, [pc, #240]	@ (8001a14 <HAL_TIM_MspPostInit+0x198>)
 8001922:	f000 fd11 	bl	8002348 <HAL_GPIO_Init>
}
 8001926:	e06c      	b.n	8001a02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a18 <HAL_TIM_MspPostInit+0x19c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11e      	bne.n	8001970 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a35      	ldr	r2, [pc, #212]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b33      	ldr	r3, [pc, #204]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800194e:	2340      	movs	r3, #64	@ 0x40
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800195e:	2302      	movs	r3, #2
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <HAL_TIM_MspPostInit+0x1a0>)
 800196a:	f000 fced 	bl	8002348 <HAL_GPIO_Init>
}
 800196e:	e048      	b.n	8001a02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2a      	ldr	r2, [pc, #168]	@ (8001a20 <HAL_TIM_MspPostInit+0x1a4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d11f      	bne.n	80019ba <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a23      	ldr	r2, [pc, #140]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001996:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80019a8:	2303      	movs	r3, #3
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	481a      	ldr	r0, [pc, #104]	@ (8001a1c <HAL_TIM_MspPostInit+0x1a0>)
 80019b4:	f000 fcc8 	bl	8002348 <HAL_GPIO_Init>
}
 80019b8:	e023      	b.n	8001a02 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <HAL_TIM_MspPostInit+0x1a8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d11e      	bne.n	8001a02 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	4a10      	ldr	r2, [pc, #64]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_TIM_MspPostInit+0x194>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_H_Pin;
 80019e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80019f2:	2303      	movs	r3, #3
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_H_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	@ (8001a1c <HAL_TIM_MspPostInit+0x1a0>)
 80019fe:	f000 fca3 	bl	8002348 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3730      	adds	r7, #48	@ 0x30
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40014400 	.word	0x40014400
 8001a24:	40014800 	.word	0x40014800

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <NMI_Handler+0x4>

08001a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <MemManage_Handler+0x4>

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7e:	f000 f89b 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <OTG_FS_IRQHandler+0x10>)
 8001a8e:	f000 ff3c 	bl	800290a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000182c 	.word	0x2000182c

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac4:	f7ff ffea 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aca:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aee:	f007 fc33 	bl	8009358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7fe fd07 	bl	8000504 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001b04:	08009460 	.word	0x08009460
  ldr r2, =_sbss
 8001b08:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001b0c:	20001f30 	.word	0x20001f30

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 fbc1 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fd44 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fbd9 	bl	800232e <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 fba1 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000348 	.word	0x20000348

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000348 	.word	0x20000348

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e033      	b.n	8001cbe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fce0 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c86:	f023 0302 	bic.w	r3, r3, #2
 8001c8a:	f043 0202 	orr.w	r2, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f94a 	bl	8001f2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cae:	e001      	b.n	8001cb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e113      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x244>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d925      	bls.n	8001d40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68d9      	ldr	r1, [r3, #12]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	3b1e      	subs	r3, #30
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43da      	mvns	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	400a      	ands	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4403      	add	r3, r0
 8001d32:	3b1e      	subs	r3, #30
 8001d34:	409a      	lsls	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	e022      	b.n	8001d86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6919      	ldr	r1, [r3, #16]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	2207      	movs	r2, #7
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4403      	add	r3, r0
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d824      	bhi.n	8001dd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b05      	subs	r3, #5
 8001da0:	221f      	movs	r2, #31
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	400a      	ands	r2, r1
 8001dae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b05      	subs	r3, #5
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd6:	e04c      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d824      	bhi.n	8001e2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b23      	subs	r3, #35	@ 0x23
 8001df2:	221f      	movs	r2, #31
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	400a      	ands	r2, r1
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b23      	subs	r3, #35	@ 0x23
 8001e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e28:	e023      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b41      	subs	r3, #65	@ 0x41
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b41      	subs	r3, #65	@ 0x41
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <HAL_ADC_ConfigChannel+0x250>)
 8001e74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <HAL_ADC_ConfigChannel+0x254>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1d8>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	d10b      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_ADC_ConfigChannel+0x254>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d12b      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x23a>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <HAL_ADC_ConfigChannel+0x258>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x1f4>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b11      	cmp	r3, #17
 8001eba:	d122      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <HAL_ADC_ConfigChannel+0x258>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d111      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ede:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HAL_ADC_ConfigChannel+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_ADC_ConfigChannel+0x260>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9a      	lsrs	r2, r3, #18
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40012300 	.word	0x40012300
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	10000012 	.word	0x10000012
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f34:	4b79      	ldr	r3, [pc, #484]	@ (800211c <ADC_Init+0x1f0>)
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <ADC_Init+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e00f      	b.n	800202a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0202 	bic.w	r2, r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
 8002044:	005a      	lsls	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002066:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	3b01      	subs	r3, #1
 8002084:	035a      	lsls	r2, r3, #13
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e007      	b.n	80020a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800209e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	051a      	lsls	r2, r3, #20
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020e2:	025a      	lsls	r2, r3, #9
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	029a      	lsls	r2, r3, #10
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	0f000001 	.word	0x0f000001

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e159      	b.n	8002618 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8148 	bne.w	8002612 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	2b02      	cmp	r3, #2
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a2 	beq.w	8002612 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a56      	ldr	r2, [pc, #344]	@ (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b54      	ldr	r3, [pc, #336]	@ (8002630 <HAL_GPIO_Init+0x2e8>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a52      	ldr	r2, [pc, #328]	@ (8002634 <HAL_GPIO_Init+0x2ec>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a49      	ldr	r2, [pc, #292]	@ (8002638 <HAL_GPIO_Init+0x2f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x202>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a48      	ldr	r2, [pc, #288]	@ (800263c <HAL_GPIO_Init+0x2f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x1fe>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a47      	ldr	r2, [pc, #284]	@ (8002640 <HAL_GPIO_Init+0x2f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a46      	ldr	r2, [pc, #280]	@ (8002644 <HAL_GPIO_Init+0x2fc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x1f6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a45      	ldr	r2, [pc, #276]	@ (8002648 <HAL_GPIO_Init+0x300>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x1f2>
 8002536:	2304      	movs	r3, #4
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x204>
 800253a:	2307      	movs	r3, #7
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x204>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x204>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x204>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x204>
 800254a:	2300      	movs	r3, #0
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f002 0203 	and.w	r2, r2, #3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255c:	4935      	ldr	r1, [pc, #212]	@ (8002634 <HAL_GPIO_Init+0x2ec>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256a:	4b38      	ldr	r3, [pc, #224]	@ (800264c <HAL_GPIO_Init+0x304>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258e:	4a2f      	ldr	r2, [pc, #188]	@ (800264c <HAL_GPIO_Init+0x304>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002594:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <HAL_GPIO_Init+0x304>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b8:	4a24      	ldr	r2, [pc, #144]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e2:	4a1a      	ldr	r2, [pc, #104]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e8:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800260c:	4a0f      	ldr	r2, [pc, #60]	@ (800264c <HAL_GPIO_Init+0x304>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	f67f aea2 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40013800 	.word	0x40013800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40020800 	.word	0x40020800
 8002644:	40020c00 	.word	0x40020c00
 8002648:	40021000 	.word	0x40021000
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af02      	add	r7, sp, #8
 8002688:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e101      	b.n	8002898 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f006 fb40 	bl	8008d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 ff8d 	bl	80055ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7c1a      	ldrb	r2, [r3, #16]
 80026dc:	f88d 2000 	strb.w	r2, [sp]
 80026e0:	3304      	adds	r3, #4
 80026e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e4:	f002 fe6c 	bl	80053c0 <USB_CoreInit>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0ce      	b.n	8002898 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f002 ff85 	bl	8005610 <USB_SetCurrentMode>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0bf      	b.n	8002898 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e04a      	b.n	80027b4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3315      	adds	r3, #21
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3314      	adds	r3, #20
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	b298      	uxth	r0, r3
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	332e      	adds	r3, #46	@ 0x2e
 800275a:	4602      	mov	r2, r0
 800275c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3318      	adds	r3, #24
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	331c      	adds	r3, #28
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3320      	adds	r3, #32
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3324      	adds	r3, #36	@ 0x24
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3af      	bcc.n	800271e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e044      	b.n	800284e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	3301      	adds	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3b5      	bcc.n	80027c4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7c1a      	ldrb	r2, [r3, #16]
 8002860:	f88d 2000 	strb.w	r2, [sp]
 8002864:	3304      	adds	r3, #4
 8002866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002868:	f002 ff1e 	bl	80056a8 <USB_DevInit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e00c      	b.n	8002898 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 ff68 	bl	8006766 <USB_DevDisconnect>

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_PCD_Start+0x1c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e022      	b.n	8002902 <HAL_PCD_Start+0x62>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f002 fe6f 	bl	80055cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 ff16 	bl	8006724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290a:	b590      	push	{r4, r7, lr}
 800290c:	b08d      	sub	sp, #52	@ 0x34
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 ffd4 	bl	80068ce <USB_GetMode>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 848c 	bne.w	8003246 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f003 ff38 	bl	80067a8 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8482 	beq.w	8003244 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 ff25 	bl	80067a8 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d107      	bne.n	8002978 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f002 0202 	and.w	r2, r2, #2
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 ff13 	bl	80067a8 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b10      	cmp	r3, #16
 800298a:	d161      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0210 	bic.w	r2, r2, #16
 800299a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80029c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029c6:	d124      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	6a38      	ldr	r0, [r7, #32]
 80029e8:	f003 fd4a 	bl	8006480 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	441a      	add	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0a:	441a      	add	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	e016      	b.n	8002a40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002a18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a1c:	d110      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a24:	2208      	movs	r2, #8
 8002a26:	4619      	mov	r1, r3
 8002a28:	6a38      	ldr	r0, [r7, #32]
 8002a2a:	f003 fd29 	bl	8006480 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3a:	441a      	add	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0210 	orr.w	r2, r2, #16
 8002a4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fea7 	bl	80067a8 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a64:	f040 80a7 	bne.w	8002bb6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 feac 	bl	80067ce <USB_ReadDevAllOutEpInterrupt>
 8002a76:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a78:	e099      	b.n	8002bae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 808e 	beq.w	8002ba2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 fed0 	bl	8006836 <USB_ReadDevOutEPInterrupt>
 8002a96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fea4 	bl	8003804 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 ff7a 	bl	80039d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af6:	461a      	mov	r2, r3
 8002af8:	2310      	movs	r3, #16
 8002afa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d030      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b80      	cmp	r3, #128	@ 0x80
 8002b10:	d109      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b24:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f006 f9eb 	bl	8008f2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	2302      	movs	r3, #2
 8002b66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2320      	movs	r3, #32
 8002b82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ba0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f af62 	bne.w	8002a7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fdf4 	bl	80067a8 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bca:	f040 80db 	bne.w	8002d84 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fe15 	bl	8006802 <USB_ReadDevAllInEpInterrupt>
 8002bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bde:	e0cd      	b.n	8002d7c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80c2 	beq.w	8002d70 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fe3b 	bl	8006872 <USB_ReadDevInEPInterrupt>
 8002bfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d057      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	2201      	movs	r2, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69f9      	ldr	r1, [r7, #28]
 8002c24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c28:	4013      	ands	r3, r2
 8002c2a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d132      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3320      	adds	r3, #32
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	331c      	adds	r3, #28
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4419      	add	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	3320      	adds	r3, #32
 8002c7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d113      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3324      	adds	r3, #36	@ 0x24
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	f003 fe42 	bl	8006930 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f006 f8bf 	bl	8008e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cea:	461a      	mov	r2, r3
 8002cec:	2310      	movs	r3, #16
 8002cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d06:	461a      	mov	r2, r3
 8002d08:	2340      	movs	r3, #64	@ 0x40
 8002d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d18:	6a38      	ldr	r0, [r7, #32]
 8002d1a:	f002 fe29 	bl	8005970 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	3310      	adds	r3, #16
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	78db      	ldrb	r3, [r3, #3]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f006 f902 	bl	8008f50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fcbd 	bl	80036ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f47f af2e 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fd0d 	bl	80067a8 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d98:	d122      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fea4 	bl	8003b10 <HAL_PCDEx_LPM_Callback>
 8002dc8:	e002      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f006 f8a0 	bl	8008f10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 fcdf 	bl	80067a8 <USB_ReadInterrupts>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002df4:	d112      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f006 f85c 	bl	8008ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e1a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fcc1 	bl	80067a8 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e30:	f040 80b7 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fd8e 	bl	8005970 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e58:	e046      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e66:	461a      	mov	r2, r3
 8002e68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7e:	0151      	lsls	r1, r2, #5
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	440a      	add	r2, r1
 8002e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ea0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb2:	0151      	lsls	r1, r2, #5
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	440a      	add	r2, r1
 8002eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ebc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ec0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002edc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ee0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d3b2      	bcc.n	8002e5a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f02:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7bdb      	ldrb	r3, [r3, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f20:	f043 030b 	orr.w	r3, r3, #11
 8002f24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f36:	f043 030b 	orr.w	r3, r3, #11
 8002f3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3c:	e015      	b.n	8002f6a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f50:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f64:	f043 030b 	orr.w	r3, r3, #11
 8002f68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f78:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f003 fccf 	bl	8006930 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fbfe 	bl	80067a8 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb6:	d123      	bne.n	8003000 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fc94 	bl	80068ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 fd4b 	bl	8005a62 <USB_GetDevSpeed>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	f001 f9ca 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f002 fa4f 	bl	8005488 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f005 ff4b 	bl	8008e86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fbcf 	bl	80067a8 <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d10a      	bne.n	800302a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f005 ff28 	bl	8008e6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 0208 	and.w	r2, r2, #8
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fbba 	bl	80067a8 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d123      	bne.n	8003086 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800304a:	2301      	movs	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
 800304e:	e014      	b.n	800307a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fb0a 	bl	8003688 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	3301      	adds	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	4293      	cmp	r3, r2
 8003084:	d3e4      	bcc.n	8003050 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fb8c 	bl	80067a8 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800309a:	d13c      	bne.n	8003116 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309c:	2301      	movs	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a0:	e02b      	b.n	80030fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3318      	adds	r3, #24
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d115      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da12      	bge.n	80030f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3317      	adds	r3, #23
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 faca 	bl	8003688 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	791b      	ldrb	r3, [r3, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	4293      	cmp	r3, r2
 8003104:	d3cd      	bcc.n	80030a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fb44 	bl	80067a8 <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312a:	d156      	bne.n	80031da <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312c:	2301      	movs	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003130:	e045      	b.n	80031be <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d12e      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800315a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	da2b      	bge.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800316c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003170:	429a      	cmp	r2, r3
 8003172:	d121      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b4:	6053      	str	r3, [r2, #4]
            break;
 80031b6:	e008      	b.n	80031ca <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	3301      	adds	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d3b3      	bcc.n	8003132 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fae2 	bl	80067a8 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ee:	d10a      	bne.n	8003206 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f005 febf 	bl	8008f74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f003 facc 	bl	80067a8 <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b04      	cmp	r3, #4
 8003218:	d115      	bne.n	8003246 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f005 feaf 	bl	8008f90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	e000      	b.n	8003246 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003244:	bf00      	nop
    }
  }
}
 8003246:	3734      	adds	r7, #52	@ 0x34
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_PCD_SetAddress+0x1a>
 8003262:	2302      	movs	r3, #2
 8003264:	e012      	b.n	800328c <HAL_PCD_SetAddress+0x40>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fa2b 	bl	80066d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	70fb      	strb	r3, [r7, #3]
 80032a6:	460b      	mov	r3, r1
 80032a8:	803b      	strh	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da0f      	bge.n	80032da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3310      	adds	r3, #16
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	705a      	strb	r2, [r3, #1]
 80032d8:	e00f      	b.n	80032fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003306:	883b      	ldrh	r3, [r7, #0]
 8003308:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	78ba      	ldrb	r2, [r7, #2]
 8003314:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003328:	78bb      	ldrb	r3, [r7, #2]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d102      	bne.n	8003334 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_PCD_EP_Open+0xae>
 800333e:	2302      	movs	r3, #2
 8003340:	e00e      	b.n	8003360 <HAL_PCD_EP_Open+0xcc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	4618      	mov	r0, r3
 8003352:	f002 fbab 	bl	8005aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800335e:	7afb      	ldrb	r3, [r7, #11]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003378:	2b00      	cmp	r3, #0
 800337a:	da0f      	bge.n	800339c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	3310      	adds	r3, #16
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]
 800339a:	e00f      	b.n	80033bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_PCD_EP_Close+0x6e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e00e      	b.n	80033f4 <HAL_PCD_EP_Close+0x8c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f002 fbe9 	bl	8005bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	460b      	mov	r3, r1
 800340a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2200      	movs	r2, #0
 800343c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	799b      	ldrb	r3, [r3, #6]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	799b      	ldrb	r3, [r3, #6]
 8003460:	461a      	mov	r2, r3
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	f002 fc86 	bl	8005d74 <USB_EPStartXfer>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 020f 	and.w	r2, r3, #15
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003494:	681b      	ldr	r3, [r3, #0]
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	460b      	mov	r3, r1
 80034b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	3310      	adds	r3, #16
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2201      	movs	r2, #1
 80034e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	799b      	ldrb	r3, [r3, #6]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	799b      	ldrb	r3, [r3, #6]
 8003504:	461a      	mov	r2, r3
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	f002 fc34 	bl	8005d74 <USB_EPStartXfer>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	7912      	ldrb	r2, [r2, #4]
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e04f      	b.n	80035d4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da0f      	bge.n	800355c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3310      	adds	r3, #16
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	705a      	strb	r2, [r3, #1]
 800355a:	e00d      	b.n	8003578 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_EP_SetStall+0x82>
 8003594:	2302      	movs	r3, #2
 8003596:	e01d      	b.n	80035d4 <HAL_PCD_EP_SetStall+0xbe>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f002 ffc2 	bl	8006530 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7999      	ldrb	r1, [r3, #6]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035c4:	461a      	mov	r2, r3
 80035c6:	f003 f9b3 	bl	8006930 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	7912      	ldrb	r2, [r2, #4]
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e042      	b.n	8003680 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da0f      	bge.n	8003622 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	f003 020f 	and.w	r2, r3, #15
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	3310      	adds	r3, #16
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	3304      	adds	r3, #4
 8003618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	705a      	strb	r2, [r3, #1]
 8003620:	e00f      	b.n	8003642 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	f003 020f 	and.w	r2, r3, #15
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	3304      	adds	r3, #4
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_PCD_EP_ClrStall+0x86>
 800365e:	2302      	movs	r3, #2
 8003660:	e00e      	b.n	8003680 <HAL_PCD_EP_ClrStall+0xa4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	4618      	mov	r0, r3
 8003672:	f002 ffcb 	bl	800660c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da0c      	bge.n	80036b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3310      	adds	r3, #16
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e00c      	b.n	80036d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 fdea 	bl	80062b0 <USB_EPStopXfer>
 80036dc:	4603      	mov	r3, r0
 80036de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036e0:	7afb      	ldrb	r3, [r7, #11]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b08a      	sub	sp, #40	@ 0x28
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3310      	adds	r3, #16
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	3304      	adds	r3, #4
 8003710:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	429a      	cmp	r2, r3
 800371c:	d901      	bls.n	8003722 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e06b      	b.n	80037fa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	429a      	cmp	r2, r3
 8003736:	d902      	bls.n	800373e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3303      	adds	r3, #3
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003746:	e02a      	b.n	800379e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	429a      	cmp	r2, r3
 800375c:	d902      	bls.n	8003764 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3303      	adds	r3, #3
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4603      	mov	r3, r0
 8003780:	6978      	ldr	r0, [r7, #20]
 8003782:	f002 fe3f 	bl	8006404 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	441a      	add	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	441a      	add	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d809      	bhi.n	80037c8 <PCD_WriteEmptyTxFifo+0xde>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037bc:	429a      	cmp	r2, r3
 80037be:	d203      	bcs.n	80037c8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1bf      	bne.n	8003748 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d811      	bhi.n	80037f8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	2201      	movs	r2, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	6939      	ldr	r1, [r7, #16]
 80037f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037f4:	4013      	ands	r3, r2
 80037f6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	333c      	adds	r3, #60	@ 0x3c
 800381c:	3304      	adds	r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	799b      	ldrb	r3, [r3, #6]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d17b      	bne.n	8003932 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4a61      	ldr	r2, [pc, #388]	@ (80039cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	f240 80b9 	bls.w	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80b3 	beq.w	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003866:	461a      	mov	r2, r3
 8003868:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800386c:	6093      	str	r3, [r2, #8]
 800386e:	e0a7      	b.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	2320      	movs	r3, #32
 800388a:	6093      	str	r3, [r2, #8]
 800388c:	e098      	b.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 8093 	bne.w	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4a4b      	ldr	r2, [pc, #300]	@ (80039cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d90f      	bls.n	80038c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	e07e      	b.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	0159      	lsls	r1, r3, #5
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d114      	bne.n	8003924 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800390c:	461a      	mov	r2, r3
 800390e:	2101      	movs	r1, #1
 8003910:	f003 f80e 	bl	8006930 <USB_EP0_OutStart>
 8003914:	e006      	b.n	8003924 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	441a      	add	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f005 fa68 	bl	8008e00 <HAL_PCD_DataOutStageCallback>
 8003930:	e046      	b.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d124      	bne.n	8003984 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	6093      	str	r3, [r2, #8]
 8003958:	e032      	b.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003970:	461a      	mov	r2, r3
 8003972:	2320      	movs	r3, #32
 8003974:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f005 fa3f 	bl	8008e00 <HAL_PCD_DataOutStageCallback>
 8003982:	e01d      	b.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d114      	bne.n	80039b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039ac:	461a      	mov	r2, r3
 80039ae:	2100      	movs	r1, #0
 80039b0:	f002 ffbe 	bl	8006930 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f005 fa20 	bl	8008e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	4f54300a 	.word	0x4f54300a
 80039d0:	4f54310a 	.word	0x4f54310a

080039d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	333c      	adds	r3, #60	@ 0x3c
 80039ec:	3304      	adds	r3, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a15      	ldr	r2, [pc, #84]	@ (8003a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d90e      	bls.n	8003a28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f005 f9d7 	bl	8008ddc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d90c      	bls.n	8003a50 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	799b      	ldrb	r3, [r3, #6]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	f002 ff70 	bl	8006930 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	4f54300a 	.word	0x4f54300a

08003a60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a7e:	883b      	ldrh	r3, [r7, #0]
 8003a80:	0419      	lsls	r1, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a8c:	e028      	b.n	8003ae0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	4413      	add	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	e00d      	b.n	8003abe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	3340      	adds	r3, #64	@ 0x40
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	3301      	adds	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d3ec      	bcc.n	8003aa2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ac8:	883b      	ldrh	r3, [r7, #0]
 8003aca:	0418      	lsls	r0, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4302      	orrs	r2, r0
 8003ad8:	3340      	adds	r3, #64	@ 0x40
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e267      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d075      	beq.n	8003c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b46:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d00c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b85      	ldr	r3, [pc, #532]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d112      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4b82      	ldr	r3, [pc, #520]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x108>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d157      	bne.n	8003c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e242      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x74>
 8003b8e:	4b76      	ldr	r3, [pc, #472]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a75      	ldr	r2, [pc, #468]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x98>
 8003ba6:	4b70      	ldr	r3, [pc, #448]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6f      	ldr	r2, [pc, #444]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003bc0:	4b69      	ldr	r3, [pc, #420]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a68      	ldr	r2, [pc, #416]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b66      	ldr	r3, [pc, #408]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a65      	ldr	r2, [pc, #404]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd fffe 	bl	8001be0 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd fffa 	bl	8001be0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e207      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xc0>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fd ffea 	bl	8001be0 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fd ffe6 	bl	8001be0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	@ 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1f3      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	4b51      	ldr	r3, [pc, #324]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0xe8>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b44      	ldr	r3, [pc, #272]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x152>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1c7      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4937      	ldr	r1, [pc, #220]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e03a      	b.n	8003d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b34      	ldr	r3, [pc, #208]	@ (8003d6c <HAL_RCC_OscConfig+0x244>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd ff9f 	bl	8001be0 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca6:	f7fd ff9b 	bl	8001be0 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1a8      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4925      	ldr	r1, [pc, #148]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <HAL_RCC_OscConfig+0x244>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd ff7e 	bl	8001be0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fd ff7a 	bl	8001be0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e187      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d036      	beq.n	8003d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1a:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <HAL_RCC_OscConfig+0x248>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fd ff5e 	bl	8001be0 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fd ff5a 	bl	8001be0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e167      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x200>
 8003d46:	e01b      	b.n	8003d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_OscConfig+0x248>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fd ff47 	bl	8001be0 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	e00e      	b.n	8003d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fd ff43 	bl	8001be0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d907      	bls.n	8003d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e150      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470000 	.word	0x42470000
 8003d70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b88      	ldr	r3, [pc, #544]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ea      	bne.n	8003d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8097 	beq.w	8003ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b81      	ldr	r3, [pc, #516]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b7d      	ldr	r3, [pc, #500]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	4a7c      	ldr	r2, [pc, #496]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dae:	4b7a      	ldr	r3, [pc, #488]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b77      	ldr	r3, [pc, #476]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b74      	ldr	r3, [pc, #464]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd ff03 	bl	8001be0 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd feff 	bl	8001be0 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e10c      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x2ea>
 8003e04:	4b64      	ldr	r3, [pc, #400]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	4a63      	ldr	r2, [pc, #396]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e10:	e01c      	b.n	8003e4c <HAL_RCC_OscConfig+0x324>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x30c>
 8003e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e26:	4b5c      	ldr	r3, [pc, #368]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0x324>
 8003e34:	4b58      	ldr	r3, [pc, #352]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a57      	ldr	r2, [pc, #348]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e40:	4b55      	ldr	r3, [pc, #340]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a54      	ldr	r2, [pc, #336]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd fec4 	bl	8001be0 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fd fec0 	bl	8001be0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0cb      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	4b49      	ldr	r3, [pc, #292]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ee      	beq.n	8003e5c <HAL_RCC_OscConfig+0x334>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fd feae 	bl	8001be0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fd feaa 	bl	8001be0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0b5      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ee      	bne.n	8003e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	4a38      	ldr	r2, [pc, #224]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a1 	beq.w	8004008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec6:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d05c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d141      	bne.n	8003f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b31      	ldr	r3, [pc, #196]	@ (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fe7e 	bl	8001be0 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd fe7a 	bl	8001be0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e087      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	491b      	ldr	r1, [pc, #108]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fd fe53 	bl	8001be0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd fe4f 	bl	8001be0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e05c      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f50:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x416>
 8003f5c:	e054      	b.n	8004008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd fe3c 	bl	8001be0 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd fe38 	bl	8001be0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e045      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x444>
 8003f8a:	e03d      	b.n	8004008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e038      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x4ec>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d028      	beq.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d121      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d11a      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d111      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0cc      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800402c:	4b68      	ldr	r3, [pc, #416]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d90c      	bls.n	8004054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b65      	ldr	r3, [pc, #404]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b63      	ldr	r3, [pc, #396]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0b8      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800406c:	4b59      	ldr	r3, [pc, #356]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004076:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a52      	ldr	r2, [pc, #328]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800408e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b50      	ldr	r3, [pc, #320]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	494d      	ldr	r1, [pc, #308]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d044      	beq.n	8004138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d119      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d6:	4b3f      	ldr	r3, [pc, #252]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e06f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e6:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e067      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f6:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0203 	bic.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4934      	ldr	r1, [pc, #208]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004108:	f7fd fd6a 	bl	8001be0 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	e00a      	b.n	8004126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fd fd66 	bl	8001be0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e04f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 020c 	and.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	429a      	cmp	r2, r3
 8004136:	d1eb      	bne.n	8004110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d20c      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e032      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4916      	ldr	r1, [pc, #88]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418a:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419e:	f000 f821 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	490a      	ldr	r1, [pc, #40]	@ (80041d8 <HAL_RCC_ClockConfig+0x1c0>)
 80041b0:	5ccb      	ldrb	r3, [r1, r3]
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fcca 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023c00 	.word	0x40023c00
 80041d4:	40023800 	.word	0x40023800
 80041d8:	08009440 	.word	0x08009440
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000004 	.word	0x20000004

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b090      	sub	sp, #64	@ 0x40
 80041ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041fc:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x180>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b08      	cmp	r3, #8
 8004206:	d00d      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x40>
 8004208:	2b08      	cmp	r3, #8
 800420a:	f200 80a1 	bhi.w	8004350 <HAL_RCC_GetSysClockFreq+0x16c>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x34>
 8004212:	2b04      	cmp	r3, #4
 8004214:	d003      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x3a>
 8004216:	e09b      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b53      	ldr	r3, [pc, #332]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x184>)
 800421a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800421c:	e09b      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421e:	4b53      	ldr	r3, [pc, #332]	@ (800436c <HAL_RCC_GetSysClockFreq+0x188>)
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004222:	e098      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004224:	4b4f      	ldr	r3, [pc, #316]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x180>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422e:	4b4d      	ldr	r3, [pc, #308]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x180>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d028      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b4a      	ldr	r3, [pc, #296]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x180>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	2200      	movs	r2, #0
 8004242:	623b      	str	r3, [r7, #32]
 8004244:	627a      	str	r2, [r7, #36]	@ 0x24
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800424c:	2100      	movs	r1, #0
 800424e:	4b47      	ldr	r3, [pc, #284]	@ (800436c <HAL_RCC_GetSysClockFreq+0x188>)
 8004250:	fb03 f201 	mul.w	r2, r3, r1
 8004254:	2300      	movs	r3, #0
 8004256:	fb00 f303 	mul.w	r3, r0, r3
 800425a:	4413      	add	r3, r2
 800425c:	4a43      	ldr	r2, [pc, #268]	@ (800436c <HAL_RCC_GetSysClockFreq+0x188>)
 800425e:	fba0 1202 	umull	r1, r2, r0, r2
 8004262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004264:	460a      	mov	r2, r1
 8004266:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426a:	4413      	add	r3, r2
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004270:	2200      	movs	r2, #0
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	61fa      	str	r2, [r7, #28]
 8004276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800427e:	f7fb ffab 	bl	80001d8 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4613      	mov	r3, r2
 8004288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800428a:	e053      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428c:	4b35      	ldr	r3, [pc, #212]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x180>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	2200      	movs	r2, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	617a      	str	r2, [r7, #20]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800429e:	f04f 0b00 	mov.w	fp, #0
 80042a2:	4652      	mov	r2, sl
 80042a4:	465b      	mov	r3, fp
 80042a6:	f04f 0000 	mov.w	r0, #0
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	0159      	lsls	r1, r3, #5
 80042b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b4:	0150      	lsls	r0, r2, #5
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	ebb2 080a 	subs.w	r8, r2, sl
 80042be:	eb63 090b 	sbc.w	r9, r3, fp
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042d6:	ebb2 0408 	subs.w	r4, r2, r8
 80042da:	eb63 0509 	sbc.w	r5, r3, r9
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	00eb      	lsls	r3, r5, #3
 80042e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ec:	00e2      	lsls	r2, r4, #3
 80042ee:	4614      	mov	r4, r2
 80042f0:	461d      	mov	r5, r3
 80042f2:	eb14 030a 	adds.w	r3, r4, sl
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	eb45 030b 	adc.w	r3, r5, fp
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800430a:	4629      	mov	r1, r5
 800430c:	028b      	lsls	r3, r1, #10
 800430e:	4621      	mov	r1, r4
 8004310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004314:	4621      	mov	r1, r4
 8004316:	028a      	lsls	r2, r1, #10
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	2200      	movs	r2, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004328:	f7fb ff56 	bl	80001d8 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x180>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800434e:	e002      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x184>)
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004358:	4618      	mov	r0, r3
 800435a:	3740      	adds	r7, #64	@ 0x40
 800435c:	46bd      	mov	sp, r7
 800435e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	00f42400 	.word	0x00f42400
 800436c:	017d7840 	.word	0x017d7840

08004370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004374:	4b03      	ldr	r3, [pc, #12]	@ (8004384 <HAL_RCC_GetHCLKFreq+0x14>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000000 	.word	0x20000000

08004388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07b      	b.n	8004492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043aa:	d009      	beq.n	80043c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
 80043b2:	e005      	b.n	80043c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fd f982 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004444:	ea42 0103 	orr.w	r1, r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	f003 0104 	and.w	r1, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	f003 0210 	and.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b08a      	sub	sp, #40	@ 0x28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ac:	f7fd fb98 	bl	8001be0 <HAL_GetTick>
 80044b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044c4:	7ffb      	ldrb	r3, [r7, #31]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d00c      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x4a>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d0:	d106      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x46>
 80044da:	7ffb      	ldrb	r3, [r7, #31]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d001      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
 80044e2:	e17f      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x5c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x5c>
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e174      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x6e>
 8004504:	2302      	movs	r3, #2
 8004506:	e16d      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b04      	cmp	r3, #4
 800451a:	d003      	beq.n	8004524 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2205      	movs	r2, #5
 8004520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	887a      	ldrh	r2, [r7, #2]
 8004546:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d007      	beq.n	8004578 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004580:	d17e      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_TransmitReceive+0xf6>
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d16c      	bne.n	800466a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b4:	e059      	b.n	800466a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d11b      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x162>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x162>
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d113      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d119      	bne.n	800463e <HAL_SPI_TransmitReceive+0x1a4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d014      	beq.n	800463e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	b292      	uxth	r2, r2
 8004620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800463a:	2301      	movs	r3, #1
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800463e:	f7fd facf 	bl	8001be0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464a:	429a      	cmp	r2, r3
 800464c:	d80d      	bhi.n	800466a <HAL_SPI_TransmitReceive+0x1d0>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d009      	beq.n	800466a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0bc      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1a0      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x11c>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d19b      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x11c>
 800467e:	e082      	b.n	8004786 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_SPI_TransmitReceive+0x1f4>
 8004688:	8afb      	ldrh	r3, [r7, #22]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d171      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b4:	e05d      	b.n	8004772 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d11c      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x264>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d017      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x264>
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d114      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	7812      	ldrb	r2, [r2, #0]
 80046e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d119      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x2a6>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d014      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800473c:	2301      	movs	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004740:	f7fd fa4e 	bl	8001be0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800474c:	429a      	cmp	r2, r3
 800474e:	d803      	bhi.n	8004758 <HAL_SPI_TransmitReceive+0x2be>
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d102      	bne.n	800475e <HAL_SPI_TransmitReceive+0x2c4>
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e038      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d19c      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x21c>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d197      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8b6 	bl	80048fc <SPI_EndRxTxTransaction>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e01d      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3728      	adds	r7, #40	@ 0x28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047fc:	f7fd f9f0 	bl	8001be0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	4413      	add	r3, r2
 800480a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800480c:	f7fd f9e8 	bl	8001be0 <HAL_GetTick>
 8004810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	015b      	lsls	r3, r3, #5
 8004818:	0d1b      	lsrs	r3, r3, #20
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004822:	e054      	b.n	80048ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d050      	beq.n	80048ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800482c:	f7fd f9d8 	bl	8001be0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	429a      	cmp	r2, r3
 800483a:	d902      	bls.n	8004842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d13d      	bne.n	80048be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800485a:	d111      	bne.n	8004880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004864:	d004      	beq.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486e:	d107      	bne.n	8004880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800487e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004888:	d10f      	bne.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e017      	b.n	80048ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d19b      	bne.n	8004824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000000 	.word	0x20000000

080048fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2201      	movs	r2, #1
 8004910:	2102      	movs	r1, #2
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff6a 	bl	80047ec <SPI_WaitFlagStateUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e032      	b.n	8004994 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800492e:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <SPI_EndRxTxTransaction+0xa0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <SPI_EndRxTxTransaction+0xa4>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	0d5b      	lsrs	r3, r3, #21
 800493a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800494c:	d112      	bne.n	8004974 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	@ 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff ff47 	bl	80047ec <SPI_WaitFlagStateUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d016      	beq.n	8004992 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e00f      	b.n	8004994 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3b01      	subs	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498a:	2b80      	cmp	r3, #128	@ 0x80
 800498c:	d0f2      	beq.n	8004974 <SPI_EndRxTxTransaction+0x78>
 800498e:	e000      	b.n	8004992 <SPI_EndRxTxTransaction+0x96>
        break;
 8004990:	bf00      	nop
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000000 	.word	0x20000000
 80049a0:	165e9f81 	.word	0x165e9f81

080049a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e041      	b.n	8004a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc ff1e 	bl	800180c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f000 f9ee 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e041      	b.n	8004ad8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc fe83 	bl	8001774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f000 f99f 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x24>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e022      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d109      	bne.n	8004b1e <HAL_TIM_PWM_Start+0x3e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e015      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start+0x58>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e008      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e068      	b.n	8004c24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0x82>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b60:	e013      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x92>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b70:	e00b      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b80:	e003      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb2e 	bl	80051f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	@ (8004c2c <HAL_TIM_PWM_Start+0x14c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <HAL_TIM_PWM_Start+0x14c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc4:	d013      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_TIM_PWM_Start+0x150>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a17      	ldr	r2, [pc, #92]	@ (8004c34 <HAL_TIM_PWM_Start+0x154>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a16      	ldr	r2, [pc, #88]	@ (8004c38 <HAL_TIM_PWM_Start+0x158>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a14      	ldr	r2, [pc, #80]	@ (8004c3c <HAL_TIM_PWM_Start+0x15c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d111      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d010      	beq.n	8004c22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	e007      	b.n	8004c22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40014000 	.word	0x40014000

08004c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0ae      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	f200 809f 	bhi.w	8004dac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004ca9 	.word	0x08004ca9
 8004c78:	08004dad 	.word	0x08004dad
 8004c7c:	08004dad 	.word	0x08004dad
 8004c80:	08004dad 	.word	0x08004dad
 8004c84:	08004ce9 	.word	0x08004ce9
 8004c88:	08004dad 	.word	0x08004dad
 8004c8c:	08004dad 	.word	0x08004dad
 8004c90:	08004dad 	.word	0x08004dad
 8004c94:	08004d2b 	.word	0x08004d2b
 8004c98:	08004dad 	.word	0x08004dad
 8004c9c:	08004dad 	.word	0x08004dad
 8004ca0:	08004dad 	.word	0x08004dad
 8004ca4:	08004d6b 	.word	0x08004d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f914 	bl	8004edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
      break;
 8004ce6:	e064      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f95a 	bl	8004fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e043      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f9a5 	bl	8005080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
      break;
 8004d68:	e023      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 f9ef 	bl	8005154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec0 <TIM_Base_SetConfig+0xfc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a37      	ldr	r2, [pc, #220]	@ (8004ec4 <TIM_Base_SetConfig+0x100>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a36      	ldr	r2, [pc, #216]	@ (8004ec8 <TIM_Base_SetConfig+0x104>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a35      	ldr	r2, [pc, #212]	@ (8004ecc <TIM_Base_SetConfig+0x108>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec0 <TIM_Base_SetConfig+0xfc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1c:	d017      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a28      	ldr	r2, [pc, #160]	@ (8004ec4 <TIM_Base_SetConfig+0x100>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a27      	ldr	r2, [pc, #156]	@ (8004ec8 <TIM_Base_SetConfig+0x104>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a26      	ldr	r2, [pc, #152]	@ (8004ecc <TIM_Base_SetConfig+0x108>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a25      	ldr	r2, [pc, #148]	@ (8004ed0 <TIM_Base_SetConfig+0x10c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a24      	ldr	r2, [pc, #144]	@ (8004ed4 <TIM_Base_SetConfig+0x110>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a23      	ldr	r2, [pc, #140]	@ (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec0 <TIM_Base_SetConfig+0xfc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800

08004edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 0201 	bic.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0302 	bic.w	r3, r3, #2
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <TIM_OC1_SetConfig+0xc8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10c      	bne.n	8004f52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0308 	bic.w	r3, r3, #8
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a13      	ldr	r2, [pc, #76]	@ (8004fa4 <TIM_OC1_SetConfig+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d111      	bne.n	8004f7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40010000 	.word	0x40010000

08004fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f023 0210 	bic.w	r2, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0320 	bic.w	r3, r3, #32
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1e      	ldr	r2, [pc, #120]	@ (800507c <TIM_OC2_SetConfig+0xd4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10d      	bne.n	8005024 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800500e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a15      	ldr	r2, [pc, #84]	@ (800507c <TIM_OC2_SetConfig+0xd4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d113      	bne.n	8005054 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000

08005080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <TIM_OC3_SetConfig+0xd0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d10d      	bne.n	80050fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <TIM_OC3_SetConfig+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d113      	bne.n	800512a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	621a      	str	r2, [r3, #32]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	40010000 	.word	0x40010000

08005154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800518a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800519e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a10      	ldr	r2, [pc, #64]	@ (80051f0 <TIM_OC4_SetConfig+0x9c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d109      	bne.n	80051c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	019b      	lsls	r3, r3, #6
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000

080051f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2201      	movs	r2, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005254:	2302      	movs	r3, #2
 8005256:	e050      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a4:	d013      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a18      	ldr	r2, [pc, #96]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a16      	ldr	r2, [pc, #88]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a15      	ldr	r2, [pc, #84]	@ (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a13      	ldr	r2, [pc, #76]	@ (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40014000 	.word	0x40014000

0800531c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e03d      	b.n	80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053c0:	b084      	sub	sp, #16
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	f107 001c 	add.w	r0, r7, #28
 80053ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d123      	bne.n	8005422 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80053ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005402:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005406:	2b01      	cmp	r3, #1
 8005408:	d105      	bne.n	8005416 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fae8 	bl	80069ec <USB_CoreReset>
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]
 8005420:	e01b      	b.n	800545a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 fadc 	bl	80069ec <USB_CoreReset>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005438:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38
 800544c:	e005      	b.n	800545a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800545a:	7fbb      	ldrb	r3, [r7, #30]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10b      	bne.n	8005478 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f043 0206 	orr.w	r2, r3, #6
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005484:	b004      	add	sp, #16
 8005486:	4770      	bx	lr

08005488 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d165      	bne.n	8005568 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a41      	ldr	r2, [pc, #260]	@ (80055a4 <USB_SetTurnaroundTime+0x11c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d906      	bls.n	80054b2 <USB_SetTurnaroundTime+0x2a>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a40      	ldr	r2, [pc, #256]	@ (80055a8 <USB_SetTurnaroundTime+0x120>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d202      	bcs.n	80054b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054ac:	230f      	movs	r3, #15
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e062      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a3c      	ldr	r2, [pc, #240]	@ (80055a8 <USB_SetTurnaroundTime+0x120>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d306      	bcc.n	80054c8 <USB_SetTurnaroundTime+0x40>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a3b      	ldr	r2, [pc, #236]	@ (80055ac <USB_SetTurnaroundTime+0x124>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d202      	bcs.n	80054c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054c2:	230e      	movs	r3, #14
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e057      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a38      	ldr	r2, [pc, #224]	@ (80055ac <USB_SetTurnaroundTime+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d306      	bcc.n	80054de <USB_SetTurnaroundTime+0x56>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a37      	ldr	r2, [pc, #220]	@ (80055b0 <USB_SetTurnaroundTime+0x128>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d202      	bcs.n	80054de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054d8:	230d      	movs	r3, #13
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e04c      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <USB_SetTurnaroundTime+0x128>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d306      	bcc.n	80054f4 <USB_SetTurnaroundTime+0x6c>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4a32      	ldr	r2, [pc, #200]	@ (80055b4 <USB_SetTurnaroundTime+0x12c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d802      	bhi.n	80054f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054ee:	230c      	movs	r3, #12
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e041      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a2f      	ldr	r2, [pc, #188]	@ (80055b4 <USB_SetTurnaroundTime+0x12c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d906      	bls.n	800550a <USB_SetTurnaroundTime+0x82>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a2e      	ldr	r2, [pc, #184]	@ (80055b8 <USB_SetTurnaroundTime+0x130>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d802      	bhi.n	800550a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005504:	230b      	movs	r3, #11
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e036      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <USB_SetTurnaroundTime+0x130>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d906      	bls.n	8005520 <USB_SetTurnaroundTime+0x98>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4a29      	ldr	r2, [pc, #164]	@ (80055bc <USB_SetTurnaroundTime+0x134>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d802      	bhi.n	8005520 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800551a:	230a      	movs	r3, #10
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e02b      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a26      	ldr	r2, [pc, #152]	@ (80055bc <USB_SetTurnaroundTime+0x134>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d906      	bls.n	8005536 <USB_SetTurnaroundTime+0xae>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a25      	ldr	r2, [pc, #148]	@ (80055c0 <USB_SetTurnaroundTime+0x138>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d202      	bcs.n	8005536 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005530:	2309      	movs	r3, #9
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e020      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <USB_SetTurnaroundTime+0x138>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d306      	bcc.n	800554c <USB_SetTurnaroundTime+0xc4>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <USB_SetTurnaroundTime+0x13c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d802      	bhi.n	800554c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005546:	2308      	movs	r3, #8
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e015      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a1d      	ldr	r2, [pc, #116]	@ (80055c4 <USB_SetTurnaroundTime+0x13c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d906      	bls.n	8005562 <USB_SetTurnaroundTime+0xda>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4a1c      	ldr	r2, [pc, #112]	@ (80055c8 <USB_SetTurnaroundTime+0x140>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d202      	bcs.n	8005562 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800555c:	2307      	movs	r3, #7
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e00a      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005562:	2306      	movs	r3, #6
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e007      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d102      	bne.n	8005574 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800556e:	2309      	movs	r3, #9
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e001      	b.n	8005578 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005574:	2309      	movs	r3, #9
 8005576:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	029b      	lsls	r3, r3, #10
 800558c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005590:	431a      	orrs	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	00d8acbf 	.word	0x00d8acbf
 80055a8:	00e4e1c0 	.word	0x00e4e1c0
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	01067380 	.word	0x01067380
 80055b4:	011a499f 	.word	0x011a499f
 80055b8:	01312cff 	.word	0x01312cff
 80055bc:	014ca43f 	.word	0x014ca43f
 80055c0:	016e3600 	.word	0x016e3600
 80055c4:	01a6ab1f 	.word	0x01a6ab1f
 80055c8:	01e84800 	.word	0x01e84800

080055cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d115      	bne.n	800565e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800563e:	200a      	movs	r0, #10
 8005640:	f7fc fada 	bl	8001bf8 <HAL_Delay>
      ms += 10U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	330a      	adds	r3, #10
 8005648:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 f93f 	bl	80068ce <USB_GetMode>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d01e      	beq.n	8005694 <USB_SetCurrentMode+0x84>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2bc7      	cmp	r3, #199	@ 0xc7
 800565a:	d9f0      	bls.n	800563e <USB_SetCurrentMode+0x2e>
 800565c:	e01a      	b.n	8005694 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d115      	bne.n	8005690 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005670:	200a      	movs	r0, #10
 8005672:	f7fc fac1 	bl	8001bf8 <HAL_Delay>
      ms += 10U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	330a      	adds	r3, #10
 800567a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 f926 	bl	80068ce <USB_GetMode>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <USB_SetCurrentMode+0x84>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2bc7      	cmp	r3, #199	@ 0xc7
 800568c:	d9f0      	bls.n	8005670 <USB_SetCurrentMode+0x60>
 800568e:	e001      	b.n	8005694 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e005      	b.n	80056a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2bc8      	cmp	r3, #200	@ 0xc8
 8005698:	d101      	bne.n	800569e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a8:	b084      	sub	sp, #16
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	e009      	b.n	80056dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3340      	adds	r3, #64	@ 0x40
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	3301      	adds	r3, #1
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b0e      	cmp	r3, #14
 80056e0:	d9f2      	bls.n	80056c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11c      	bne.n	8005724 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	@ 0x38
 8005722:	e00b      	b.n	800573c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005742:	461a      	mov	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005748:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10d      	bne.n	800576c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005758:	2100      	movs	r1, #0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f968 	bl	8005a30 <USB_SetDevSpeed>
 8005760:	e008      	b.n	8005774 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005762:	2101      	movs	r1, #1
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f963 	bl	8005a30 <USB_SetDevSpeed>
 800576a:	e003      	b.n	8005774 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800576c:	2103      	movs	r1, #3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f95e 	bl	8005a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005774:	2110      	movs	r1, #16
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8fa 	bl	8005970 <USB_FlushTxFifo>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f924 	bl	80059d4 <USB_FlushRxFifo>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579c:	461a      	mov	r2, r3
 800579e:	2300      	movs	r3, #0
 80057a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e043      	b.n	8005848 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057d6:	d118      	bne.n	800580a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ea:	461a      	mov	r2, r3
 80057ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e013      	b.n	800581c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005800:	461a      	mov	r2, r3
 8005802:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e008      	b.n	800581c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583a:	461a      	mov	r2, r3
 800583c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005840:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3301      	adds	r3, #1
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800584c:	461a      	mov	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4293      	cmp	r3, r2
 8005852:	d3b5      	bcc.n	80057c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005854:	2300      	movs	r3, #0
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	e043      	b.n	80058e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800586c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005870:	d118      	bne.n	80058a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e013      	b.n	80058b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	461a      	mov	r2, r3
 800589c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e008      	b.n	80058b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b0:	461a      	mov	r2, r3
 80058b2:	2300      	movs	r3, #0
 80058b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c2:	461a      	mov	r2, r3
 80058c4:	2300      	movs	r3, #0
 80058c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d4:	461a      	mov	r2, r3
 80058d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	3301      	adds	r3, #1
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058e6:	461a      	mov	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d3b5      	bcc.n	800585a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005900:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800590e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005910:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f043 0210 	orr.w	r2, r3, #16
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	4b10      	ldr	r3, [pc, #64]	@ (800596c <USB_DevInit+0x2c4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005930:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f043 0208 	orr.w	r2, r3, #8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005944:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005948:	2b01      	cmp	r3, #1
 800594a:	d107      	bne.n	800595c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005954:	f043 0304 	orr.w	r3, r3, #4
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005968:	b004      	add	sp, #16
 800596a:	4770      	bx	lr
 800596c:	803c3800 	.word	0x803c3800

08005970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800598a:	d901      	bls.n	8005990 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e01b      	b.n	80059c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	daf2      	bge.n	800597e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	019b      	lsls	r3, r3, #6
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059b4:	d901      	bls.n	80059ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e006      	b.n	80059c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d0f0      	beq.n	80059a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ec:	d901      	bls.n	80059f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e018      	b.n	8005a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	daf2      	bge.n	80059e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2210      	movs	r2, #16
 8005a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a10:	d901      	bls.n	8005a16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e006      	b.n	8005a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d0f0      	beq.n	8005a04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a50:	4313      	orrs	r3, r2
 8005a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0306 	and.w	r3, r3, #6
 8005a7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
 8005a86:	e00a      	b.n	8005a9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d002      	beq.n	8005a94 <USB_GetDevSpeed+0x32>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d102      	bne.n	8005a9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a94:	2302      	movs	r3, #2
 8005a96:	75fb      	strb	r3, [r7, #23]
 8005a98:	e001      	b.n	8005a9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a9a:	230f      	movs	r3, #15
 8005a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d13a      	bne.n	8005b3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	68f9      	ldr	r1, [r7, #12]
 8005ae2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d155      	bne.n	8005bac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	059b      	lsls	r3, r3, #22
 8005b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b24:	4313      	orrs	r3, r2
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e036      	b.n	8005bac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	2101      	movs	r1, #1
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11a      	bne.n	8005bac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b92:	430b      	orrs	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005baa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d161      	bne.n	8005c9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bee:	d11f      	bne.n	8005c30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	2101      	movs	r1, #1
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c50:	4013      	ands	r3, r2
 8005c52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c74:	4013      	ands	r3, r2
 8005c76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	0159      	lsls	r1, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c92:	4619      	mov	r1, r3
 8005c94:	4b35      	ldr	r3, [pc, #212]	@ (8005d6c <USB_DeactivateEndpoint+0x1b0>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]
 8005c9a:	e060      	b.n	8005d5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb2:	d11f      	bne.n	8005cf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	2101      	movs	r1, #1
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d14:	4013      	ands	r3, r2
 8005d16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	2101      	movs	r1, #1
 8005d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	43db      	mvns	r3, r3
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	0159      	lsls	r1, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	440b      	add	r3, r1
 8005d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d56:	4619      	mov	r1, r3
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <USB_DeactivateEndpoint+0x1b4>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	ec337800 	.word	0xec337800
 8005d70:	eff37800 	.word	0xeff37800

08005d74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	@ 0x28
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	f040 817f 	bne.w	8006094 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d132      	bne.n	8005e04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ddc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dfc:	0cdb      	lsrs	r3, r3, #19
 8005dfe:	04db      	lsls	r3, r3, #19
 8005e00:	6113      	str	r3, [r2, #16]
 8005e02:	e097      	b.n	8005f34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1e:	0cdb      	lsrs	r3, r3, #19
 8005e20:	04db      	lsls	r3, r3, #19
 8005e22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e46:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11a      	bne.n	8005e84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d903      	bls.n	8005e62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e80:	6113      	str	r3, [r2, #16]
 8005e82:	e044      	b.n	8005f0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	8afb      	ldrh	r3, [r7, #22]
 8005eaa:	04d9      	lsls	r1, r3, #19
 8005eac:	4ba4      	ldr	r3, [pc, #656]	@ (8006140 <USB_EPStartXfer+0x3cc>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	0148      	lsls	r0, r1, #5
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	4401      	add	r1, r0
 8005eb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d122      	bne.n	8005f0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005ee6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	8afb      	ldrh	r3, [r7, #22]
 8005ef8:	075b      	lsls	r3, r3, #29
 8005efa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005efe:	69b9      	ldr	r1, [r7, #24]
 8005f00:	0148      	lsls	r0, r1, #5
 8005f02:	69f9      	ldr	r1, [r7, #28]
 8005f04:	4401      	add	r1, r0
 8005f06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f24:	69b9      	ldr	r1, [r7, #24]
 8005f26:	0148      	lsls	r0, r1, #5
 8005f28:	69f9      	ldr	r1, [r7, #28]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f30:	4313      	orrs	r3, r2
 8005f32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d14b      	bne.n	8005fd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	791b      	ldrb	r3, [r3, #4]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d128      	bne.n	8005fb0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d110      	bne.n	8005f90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e00f      	b.n	8005fb0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	e166      	b.n	80062a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ff0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d015      	beq.n	8006026 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 814e 	beq.w	80062a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800600a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	2101      	movs	r1, #1
 8006016:	fa01 f303 	lsl.w	r3, r1, r3
 800601a:	69f9      	ldr	r1, [r7, #28]
 800601c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006020:	4313      	orrs	r3, r2
 8006022:	634b      	str	r3, [r1, #52]	@ 0x34
 8006024:	e13c      	b.n	80062a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d110      	bne.n	8006058 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006050:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e00f      	b.n	8006078 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006076:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	68d9      	ldr	r1, [r3, #12]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	b298      	uxth	r0, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4603      	mov	r3, r0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f9b9 	bl	8006404 <USB_WritePacket>
 8006092:	e105      	b.n	80062a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ae:	0cdb      	lsrs	r3, r3, #19
 80060b0:	04db      	lsls	r3, r3, #19
 80060b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d132      	bne.n	8006144 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610c:	69b9      	ldr	r1, [r7, #24]
 800610e:	0148      	lsls	r0, r1, #5
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	4401      	add	r1, r0
 8006114:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006136:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800613a:	6113      	str	r3, [r2, #16]
 800613c:	e062      	b.n	8006204 <USB_EPStartXfer+0x490>
 800613e:	bf00      	nop
 8006140:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d123      	bne.n	8006194 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006162:	69b9      	ldr	r1, [r7, #24]
 8006164:	0148      	lsls	r0, r1, #5
 8006166:	69f9      	ldr	r1, [r7, #28]
 8006168:	4401      	add	r1, r0
 800616a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800616e:	4313      	orrs	r3, r2
 8006170:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800618c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006190:	6113      	str	r3, [r2, #16]
 8006192:	e037      	b.n	8006204 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	4413      	add	r3, r2
 800619e:	1e5a      	subs	r2, r3, #1
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	8afa      	ldrh	r2, [r7, #22]
 80061b0:	fb03 f202 	mul.w	r2, r3, r2
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	8afb      	ldrh	r3, [r7, #22]
 80061c8:	04d9      	lsls	r1, r3, #19
 80061ca:	4b38      	ldr	r3, [pc, #224]	@ (80062ac <USB_EPStartXfer+0x538>)
 80061cc:	400b      	ands	r3, r1
 80061ce:	69b9      	ldr	r1, [r7, #24]
 80061d0:	0148      	lsls	r0, r1, #5
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	4401      	add	r1, r0
 80061d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061da:	4313      	orrs	r3, r2
 80061dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f4:	69b9      	ldr	r1, [r7, #24]
 80061f6:	0148      	lsls	r0, r1, #5
 80061f8:	69f9      	ldr	r1, [r7, #28]
 80061fa:	4401      	add	r1, r0
 80061fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006200:	4313      	orrs	r3, r2
 8006202:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10d      	bne.n	8006226 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d009      	beq.n	8006226 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68d9      	ldr	r1, [r3, #12]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006222:	460a      	mov	r2, r1
 8006224:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	791b      	ldrb	r3, [r3, #4]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d128      	bne.n	8006280 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d110      	bne.n	8006260 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006258:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e00f      	b.n	8006280 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800627a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800627e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800629a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800629e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	1ff80000 	.word	0x1ff80000

080062b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d14a      	bne.n	8006364 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062e6:	f040 8086 	bne.w	80063f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006308:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800630c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	7812      	ldrb	r2, [r2, #0]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800633e:	4293      	cmp	r3, r2
 8006340:	d902      	bls.n	8006348 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
          break;
 8006346:	e056      	b.n	80063f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800635c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006360:	d0e7      	beq.n	8006332 <USB_EPStopXfer+0x82>
 8006362:	e048      	b.n	80063f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800637c:	d13b      	bne.n	80063f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800639c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d902      	bls.n	80063dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
          break;
 80063da:	e00c      	b.n	80063f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063f4:	d0e7      	beq.n	80063c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	@ 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	460b      	mov	r3, r1
 8006414:	71fb      	strb	r3, [r7, #7]
 8006416:	4613      	mov	r3, r2
 8006418:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006422:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d123      	bne.n	8006472 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800642a:	88bb      	ldrh	r3, [r7, #4]
 800642c:	3303      	adds	r3, #3
 800642e:	089b      	lsrs	r3, r3, #2
 8006430:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e018      	b.n	800646a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	031a      	lsls	r2, r3, #12
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006444:	461a      	mov	r2, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	3301      	adds	r3, #1
 8006456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	3301      	adds	r3, #1
 800645c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	3301      	adds	r3, #1
 8006462:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	3301      	adds	r3, #1
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3e2      	bcc.n	8006438 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3724      	adds	r7, #36	@ 0x24
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006480:	b480      	push	{r7}
 8006482:	b08b      	sub	sp, #44	@ 0x2c
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	b29b      	uxth	r3, r3
 800649c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	e014      	b.n	80064d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	3301      	adds	r3, #1
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	3301      	adds	r3, #1
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	3301      	adds	r3, #1
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	3301      	adds	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	3301      	adds	r3, #1
 80064d4:	623b      	str	r3, [r7, #32]
 80064d6:	6a3a      	ldr	r2, [r7, #32]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d3e6      	bcc.n	80064ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064de:	8bfb      	ldrh	r3, [r7, #30]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01e      	beq.n	8006522 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ee:	461a      	mov	r2, r3
 80064f0:	f107 0310 	add.w	r3, r7, #16
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	701a      	strb	r2, [r3, #0]
      i++;
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	3301      	adds	r3, #1
 800650e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	3301      	adds	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006516:	8bfb      	ldrh	r3, [r7, #30]
 8006518:	3b01      	subs	r3, #1
 800651a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800651c:	8bfb      	ldrh	r3, [r7, #30]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ea      	bne.n	80064f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006524:	4618      	mov	r0, r3
 8006526:	372c      	adds	r7, #44	@ 0x2c
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d12c      	bne.n	80065a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	db12      	blt.n	8006584 <USB_EPSetStall+0x54>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800657e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006582:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800659e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e02b      	b.n	80065fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	db12      	blt.n	80065de <USB_EPSetStall+0xae>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d128      	bne.n	800667a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006646:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	791b      	ldrb	r3, [r3, #4]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d003      	beq.n	8006658 <USB_EPClearStall+0x4c>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	791b      	ldrb	r3, [r3, #4]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d138      	bne.n	80066ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	e027      	b.n	80066ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006694:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	791b      	ldrb	r3, [r3, #4]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d003      	beq.n	80066aa <USB_EPClearStall+0x9e>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	791b      	ldrb	r3, [r3, #4]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d10f      	bne.n	80066ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80066fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006752:	f023 0302 	bic.w	r3, r3, #2
 8006756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006780:	f023 0303 	bic.w	r3, r3, #3
 8006784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4013      	ands	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067c0:	68fb      	ldr	r3, [r7, #12]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	0c1b      	lsrs	r3, r3, #16
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	b29b      	uxth	r3, r3
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4013      	ands	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006864:	68bb      	ldr	r3, [r7, #8]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006872:	b480      	push	{r7}
 8006874:	b087      	sub	sp, #28
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006894:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	fa22 f303 	lsr.w	r3, r2, r3
 80068a2:	01db      	lsls	r3, r3, #7
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4013      	ands	r3, r2
 80068be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068c0:	68bb      	ldr	r3, [r7, #8]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0301 	and.w	r3, r3, #1
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006904:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006908:	f023 0307 	bic.w	r3, r3, #7
 800690c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800691c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	460b      	mov	r3, r1
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	333c      	adds	r3, #60	@ 0x3c
 8006946:	3304      	adds	r3, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4a26      	ldr	r2, [pc, #152]	@ (80069e8 <USB_EP0_OutStart+0xb8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d90a      	bls.n	800696a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006964:	d101      	bne.n	800696a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e037      	b.n	80069da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006970:	461a      	mov	r2, r3
 8006972:	2300      	movs	r3, #0
 8006974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006984:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006998:	f043 0318 	orr.w	r3, r3, #24
 800699c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80069b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d10f      	bne.n	80069d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80069d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	4f54300a 	.word	0x4f54300a

080069ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a04:	d901      	bls.n	8006a0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e01b      	b.n	8006a42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	daf2      	bge.n	80069f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f043 0201 	orr.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3301      	adds	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a2e:	d901      	bls.n	8006a34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e006      	b.n	8006a42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d0f0      	beq.n	8006a22 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a60:	f002 fc2e 	bl	80092c0 <USBD_static_malloc>
 8006a64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32b0      	adds	r2, #176	@ 0xb0
 8006a76:	2100      	movs	r1, #0
 8006a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0d4      	b.n	8006c2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006a84:	2100      	movs	r1, #0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f002 fc5e 	bl	8009348 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	32b0      	adds	r2, #176	@ 0xb0
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	32b0      	adds	r2, #176	@ 0xb0
 8006aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d138      	bne.n	8006b2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8006c34 <USBD_CDC_Init+0x1e4>)
 8006aba:	7819      	ldrb	r1, [r3, #0]
 8006abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f002 fad9 	bl	800907a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c34 <USBD_CDC_Init+0x1e4>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	3324      	adds	r3, #36	@ 0x24
 8006ade:	2201      	movs	r2, #1
 8006ae0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ae2:	4b55      	ldr	r3, [pc, #340]	@ (8006c38 <USBD_CDC_Init+0x1e8>)
 8006ae4:	7819      	ldrb	r1, [r3, #0]
 8006ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006aea:	2202      	movs	r2, #2
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f002 fac4 	bl	800907a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006af2:	4b51      	ldr	r3, [pc, #324]	@ (8006c38 <USBD_CDC_Init+0x1e8>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 020f 	and.w	r2, r3, #15
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8006c3c <USBD_CDC_Init+0x1ec>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f003 020f 	and.w	r2, r3, #15
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	3326      	adds	r3, #38	@ 0x26
 8006b24:	2210      	movs	r2, #16
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e035      	b.n	8006b96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b2a:	4b42      	ldr	r3, [pc, #264]	@ (8006c34 <USBD_CDC_Init+0x1e4>)
 8006b2c:	7819      	ldrb	r1, [r3, #0]
 8006b2e:	2340      	movs	r3, #64	@ 0x40
 8006b30:	2202      	movs	r2, #2
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 faa1 	bl	800907a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b38:	4b3e      	ldr	r3, [pc, #248]	@ (8006c34 <USBD_CDC_Init+0x1e4>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	3324      	adds	r3, #36	@ 0x24
 8006b4e:	2201      	movs	r2, #1
 8006b50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b52:	4b39      	ldr	r3, [pc, #228]	@ (8006c38 <USBD_CDC_Init+0x1e8>)
 8006b54:	7819      	ldrb	r1, [r3, #0]
 8006b56:	2340      	movs	r3, #64	@ 0x40
 8006b58:	2202      	movs	r2, #2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f002 fa8d 	bl	800907a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b60:	4b35      	ldr	r3, [pc, #212]	@ (8006c38 <USBD_CDC_Init+0x1e8>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b78:	2201      	movs	r2, #1
 8006b7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c3c <USBD_CDC_Init+0x1ec>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3326      	adds	r3, #38	@ 0x26
 8006b92:	2210      	movs	r2, #16
 8006b94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b96:	4b29      	ldr	r3, [pc, #164]	@ (8006c3c <USBD_CDC_Init+0x1ec>)
 8006b98:	7819      	ldrb	r1, [r3, #0]
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f002 fa6b 	bl	800907a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ba4:	4b25      	ldr	r3, [pc, #148]	@ (8006c3c <USBD_CDC_Init+0x1ec>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f003 020f 	and.w	r2, r3, #15
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3324      	adds	r3, #36	@ 0x24
 8006bba:	2201      	movs	r2, #1
 8006bbc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	33b0      	adds	r3, #176	@ 0xb0
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e018      	b.n	8006c2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7c1b      	ldrb	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c00:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <USBD_CDC_Init+0x1e8>)
 8006c02:	7819      	ldrb	r1, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 fb22 	bl	8009258 <USBD_LL_PrepareReceive>
 8006c14:	e008      	b.n	8006c28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c16:	4b08      	ldr	r3, [pc, #32]	@ (8006c38 <USBD_CDC_Init+0x1e8>)
 8006c18:	7819      	ldrb	r1, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c20:	2340      	movs	r3, #64	@ 0x40
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f002 fb18 	bl	8009258 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000093 	.word	0x20000093
 8006c38:	20000094 	.word	0x20000094
 8006c3c:	20000095 	.word	0x20000095

08006c40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d38 <USBD_CDC_DeInit+0xf8>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f002 fa37 	bl	80090c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c58:	4b37      	ldr	r3, [pc, #220]	@ (8006d38 <USBD_CDC_DeInit+0xf8>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3324      	adds	r3, #36	@ 0x24
 8006c6e:	2200      	movs	r2, #0
 8006c70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c72:	4b32      	ldr	r3, [pc, #200]	@ (8006d3c <USBD_CDC_DeInit+0xfc>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f002 fa24 	bl	80090c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d3c <USBD_CDC_DeInit+0xfc>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f003 020f 	and.w	r2, r3, #15
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c96:	2200      	movs	r2, #0
 8006c98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c9a:	4b29      	ldr	r3, [pc, #164]	@ (8006d40 <USBD_CDC_DeInit+0x100>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f002 fa10 	bl	80090c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ca6:	4b26      	ldr	r3, [pc, #152]	@ (8006d40 <USBD_CDC_DeInit+0x100>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f003 020f 	and.w	r2, r3, #15
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	3324      	adds	r3, #36	@ 0x24
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d40 <USBD_CDC_DeInit+0x100>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3326      	adds	r3, #38	@ 0x26
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	32b0      	adds	r2, #176	@ 0xb0
 8006ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01f      	beq.n	8006d2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	33b0      	adds	r3, #176	@ 0xb0
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	@ 0xb0
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f002 fae4 	bl	80092dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32b0      	adds	r2, #176	@ 0xb0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000093 	.word	0x20000093
 8006d3c:	20000094 	.word	0x20000094
 8006d40:	20000095 	.word	0x20000095

08006d44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	32b0      	adds	r2, #176	@ 0xb0
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e0bf      	b.n	8006ef4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d050      	beq.n	8006e22 <USBD_CDC_Setup+0xde>
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	f040 80af 	bne.w	8006ee4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d03a      	beq.n	8006e04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	b25b      	sxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da1b      	bge.n	8006dd0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	33b0      	adds	r3, #176	@ 0xb0
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006dae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	88d2      	ldrh	r2, [r2, #6]
 8006db4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b07      	cmp	r3, #7
 8006dbc:	bf28      	it	cs
 8006dbe:	2307      	movcs	r3, #7
 8006dc0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	89fa      	ldrh	r2, [r7, #14]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fd53 	bl	8008874 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dce:	e090      	b.n	8006ef2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	785a      	ldrb	r2, [r3, #1]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88db      	ldrh	r3, [r3, #6]
 8006dde:	2b3f      	cmp	r3, #63	@ 0x3f
 8006de0:	d803      	bhi.n	8006dea <USBD_CDC_Setup+0xa6>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	88db      	ldrh	r3, [r3, #6]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	e000      	b.n	8006dec <USBD_CDC_Setup+0xa8>
 8006dea:	2240      	movs	r2, #64	@ 0x40
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006df2:	6939      	ldr	r1, [r7, #16]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fd65 	bl	80088cc <USBD_CtlPrepareRx>
      break;
 8006e02:	e076      	b.n	8006ef2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	33b0      	adds	r3, #176	@ 0xb0
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	7850      	ldrb	r0, [r2, #1]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	4798      	blx	r3
      break;
 8006e20:	e067      	b.n	8006ef2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b0b      	cmp	r3, #11
 8006e28:	d851      	bhi.n	8006ece <USBD_CDC_Setup+0x18a>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <USBD_CDC_Setup+0xec>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e61 	.word	0x08006e61
 8006e34:	08006edd 	.word	0x08006edd
 8006e38:	08006ecf 	.word	0x08006ecf
 8006e3c:	08006ecf 	.word	0x08006ecf
 8006e40:	08006ecf 	.word	0x08006ecf
 8006e44:	08006ecf 	.word	0x08006ecf
 8006e48:	08006ecf 	.word	0x08006ecf
 8006e4c:	08006ecf 	.word	0x08006ecf
 8006e50:	08006ecf 	.word	0x08006ecf
 8006e54:	08006ecf 	.word	0x08006ecf
 8006e58:	08006e8b 	.word	0x08006e8b
 8006e5c:	08006eb5 	.word	0x08006eb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d107      	bne.n	8006e7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e6c:	f107 030a 	add.w	r3, r7, #10
 8006e70:	2202      	movs	r2, #2
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fcfd 	bl	8008874 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e7a:	e032      	b.n	8006ee2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fc7b 	bl	800877a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	75fb      	strb	r3, [r7, #23]
          break;
 8006e88:	e02b      	b.n	8006ee2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d107      	bne.n	8006ea6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e96:	f107 030d 	add.w	r3, r7, #13
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fce8 	bl	8008874 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ea4:	e01d      	b.n	8006ee2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fc66 	bl	800877a <USBD_CtlError>
            ret = USBD_FAIL;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e016      	b.n	8006ee2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d00f      	beq.n	8006ee0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fc59 	bl	800877a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ecc:	e008      	b.n	8006ee0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fc52 	bl	800877a <USBD_CtlError>
          ret = USBD_FAIL;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eda:	e002      	b.n	8006ee2 <USBD_CDC_Setup+0x19e>
          break;
 8006edc:	bf00      	nop
 8006ede:	e008      	b.n	8006ef2 <USBD_CDC_Setup+0x1ae>
          break;
 8006ee0:	bf00      	nop
      }
      break;
 8006ee2:	e006      	b.n	8006ef2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fc47 	bl	800877a <USBD_CtlError>
      ret = USBD_FAIL;
 8006eec:	2303      	movs	r3, #3
 8006eee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	32b0      	adds	r2, #176	@ 0xb0
 8006f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e065      	b.n	8006ff2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	32b0      	adds	r2, #176	@ 0xb0
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	f003 020f 	and.w	r2, r3, #15
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3318      	adds	r3, #24
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02f      	beq.n	8006fb0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	f003 020f 	and.w	r2, r3, #15
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	3318      	adds	r3, #24
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	f003 010f 	and.w	r1, r3, #15
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	440b      	add	r3, r1
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4403      	add	r3, r0
 8006f78:	331c      	adds	r3, #28
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d112      	bne.n	8006fb0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fa2:	78f9      	ldrb	r1, [r7, #3]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f002 f934 	bl	8009216 <USBD_LL_Transmit>
 8006fae:	e01f      	b.n	8006ff0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	33b0      	adds	r3, #176	@ 0xb0
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	33b0      	adds	r3, #176	@ 0xb0
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	32b0      	adds	r2, #176	@ 0xb0
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	32b0      	adds	r2, #176	@ 0xb0
 8007020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	e01a      	b.n	8007062 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f002 f932 	bl	800929a <USBD_LL_GetRxDataSize>
 8007036:	4602      	mov	r2, r0
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	33b0      	adds	r3, #176	@ 0xb0
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800705c:	4611      	mov	r1, r2
 800705e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	32b0      	adds	r2, #176	@ 0xb0
 800707c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007080:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	e024      	b.n	80070d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	33b0      	adds	r3, #176	@ 0xb0
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d019      	beq.n	80070d4 <USBD_CDC_EP0_RxReady+0x6a>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80070a6:	2bff      	cmp	r3, #255	@ 0xff
 80070a8:	d014      	beq.n	80070d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	33b0      	adds	r3, #176	@ 0xb0
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80070c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	22ff      	movs	r2, #255	@ 0xff
 80070d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070e8:	2182      	movs	r1, #130	@ 0x82
 80070ea:	4818      	ldr	r0, [pc, #96]	@ (800714c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070ec:	f000 fd0f 	bl	8007b0e <USBD_GetEpDesc>
 80070f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070f2:	2101      	movs	r1, #1
 80070f4:	4815      	ldr	r0, [pc, #84]	@ (800714c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070f6:	f000 fd0a 	bl	8007b0e <USBD_GetEpDesc>
 80070fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070fc:	2181      	movs	r1, #129	@ 0x81
 80070fe:	4813      	ldr	r0, [pc, #76]	@ (800714c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007100:	f000 fd05 	bl	8007b0e <USBD_GetEpDesc>
 8007104:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2210      	movs	r2, #16
 8007110:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2200      	movs	r2, #0
 800711c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007120:	711a      	strb	r2, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d006      	beq.n	800713a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007134:	711a      	strb	r2, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2243      	movs	r2, #67	@ 0x43
 800713e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007140:	4b02      	ldr	r3, [pc, #8]	@ (800714c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000050 	.word	0x20000050

08007150 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007158:	2182      	movs	r1, #130	@ 0x82
 800715a:	4818      	ldr	r0, [pc, #96]	@ (80071bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800715c:	f000 fcd7 	bl	8007b0e <USBD_GetEpDesc>
 8007160:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007162:	2101      	movs	r1, #1
 8007164:	4815      	ldr	r0, [pc, #84]	@ (80071bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007166:	f000 fcd2 	bl	8007b0e <USBD_GetEpDesc>
 800716a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800716c:	2181      	movs	r1, #129	@ 0x81
 800716e:	4813      	ldr	r0, [pc, #76]	@ (80071bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007170:	f000 fccd 	bl	8007b0e <USBD_GetEpDesc>
 8007174:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2210      	movs	r2, #16
 8007180:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d006      	beq.n	8007196 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2200      	movs	r2, #0
 800718c:	711a      	strb	r2, [r3, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f042 0202 	orr.w	r2, r2, #2
 8007194:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d006      	beq.n	80071aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	711a      	strb	r2, [r3, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f042 0202 	orr.w	r2, r2, #2
 80071a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2243      	movs	r2, #67	@ 0x43
 80071ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071b0:	4b02      	ldr	r3, [pc, #8]	@ (80071bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000050 	.word	0x20000050

080071c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071c8:	2182      	movs	r1, #130	@ 0x82
 80071ca:	4818      	ldr	r0, [pc, #96]	@ (800722c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071cc:	f000 fc9f 	bl	8007b0e <USBD_GetEpDesc>
 80071d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071d2:	2101      	movs	r1, #1
 80071d4:	4815      	ldr	r0, [pc, #84]	@ (800722c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071d6:	f000 fc9a 	bl	8007b0e <USBD_GetEpDesc>
 80071da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071dc:	2181      	movs	r1, #129	@ 0x81
 80071de:	4813      	ldr	r0, [pc, #76]	@ (800722c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071e0:	f000 fc95 	bl	8007b0e <USBD_GetEpDesc>
 80071e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2210      	movs	r2, #16
 80071f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007200:	711a      	strb	r2, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d006      	beq.n	800721a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007214:	711a      	strb	r2, [r3, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2243      	movs	r2, #67	@ 0x43
 800721e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007220:	4b02      	ldr	r3, [pc, #8]	@ (800722c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000050 	.word	0x20000050

08007230 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	220a      	movs	r2, #10
 800723c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800723e:	4b03      	ldr	r3, [pc, #12]	@ (800724c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000000c 	.word	0x2000000c

08007250 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e009      	b.n	8007278 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	33b0      	adds	r3, #176	@ 0xb0
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	32b0      	adds	r2, #176	@ 0xb0
 800729a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e008      	b.n	80072bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	32b0      	adds	r2, #176	@ 0xb0
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e004      	b.n	80072f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32b0      	adds	r2, #176	@ 0xb0
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32b0      	adds	r2, #176	@ 0xb0
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800732e:	2303      	movs	r3, #3
 8007330:	e018      	b.n	8007364 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	7c1b      	ldrb	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800733a:	4b0c      	ldr	r3, [pc, #48]	@ (800736c <USBD_CDC_ReceivePacket+0x68>)
 800733c:	7819      	ldrb	r1, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 ff85 	bl	8009258 <USBD_LL_PrepareReceive>
 800734e:	e008      	b.n	8007362 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007350:	4b06      	ldr	r3, [pc, #24]	@ (800736c <USBD_CDC_ReceivePacket+0x68>)
 8007352:	7819      	ldrb	r1, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800735a:	2340      	movs	r3, #64	@ 0x40
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 ff7b 	bl	8009258 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000094 	.word	0x20000094

08007370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	e01f      	b.n	80073c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	79fa      	ldrb	r2, [r7, #7]
 80073ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f001 fdf5 	bl	8008fac <USBD_LL_Init>
 80073c2:	4603      	mov	r3, r0
 80073c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e025      	b.n	8007434 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32ae      	adds	r2, #174	@ 0xae
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00f      	beq.n	8007424 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	32ae      	adds	r2, #174	@ 0xae
 800740e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	f107 020e 	add.w	r2, r7, #14
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
 800741c:	4602      	mov	r2, r0
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 fdfd 	bl	8009044 <USBD_LL_Start>
 800744a:	4603      	mov	r3, r0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	78fa      	ldrb	r2, [r7, #3]
 800748e:	4611      	mov	r1, r2
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	4611      	mov	r1, r2
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80074c8:	2303      	movs	r3, #3
 80074ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 f90c 	bl	8008706 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80074fc:	461a      	mov	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b02      	cmp	r3, #2
 8007510:	d01a      	beq.n	8007548 <USBD_LL_SetupStage+0x72>
 8007512:	2b02      	cmp	r3, #2
 8007514:	d822      	bhi.n	800755c <USBD_LL_SetupStage+0x86>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <USBD_LL_SetupStage+0x4a>
 800751a:	2b01      	cmp	r3, #1
 800751c:	d00a      	beq.n	8007534 <USBD_LL_SetupStage+0x5e>
 800751e:	e01d      	b.n	800755c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fb63 	bl	8007bf4 <USBD_StdDevReq>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]
      break;
 8007532:	e020      	b.n	8007576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fbcb 	bl	8007cd8 <USBD_StdItfReq>
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
      break;
 8007546:	e016      	b.n	8007576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc2d 	bl	8007db0 <USBD_StdEPReq>
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
      break;
 800755a:	e00c      	b.n	8007576 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007562:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007566:	b2db      	uxtb	r3, r3
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fdca 	bl	8009104 <USBD_LL_StallEP>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
      break;
 8007574:	bf00      	nop
  }

  return ret;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	460b      	mov	r3, r1
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d16e      	bne.n	8007676 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800759e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	f040 8098 	bne.w	80076dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d913      	bls.n	80075e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	1ad2      	subs	r2, r2, r3
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bf28      	it	cs
 80075d2:	4613      	movcs	r3, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f001 f994 	bl	8008906 <USBD_CtlContinueRx>
 80075de:	e07d      	b.n	80076dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d014      	beq.n	8007618 <USBD_LL_DataOutStage+0x98>
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d81d      	bhi.n	800762e <USBD_LL_DataOutStage+0xae>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <USBD_LL_DataOutStage+0x7c>
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d003      	beq.n	8007602 <USBD_LL_DataOutStage+0x82>
 80075fa:	e018      	b.n	800762e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007600:	e018      	b.n	8007634 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007608:	b2db      	uxtb	r3, r3
 800760a:	4619      	mov	r1, r3
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fa64 	bl	8007ada <USBD_CoreFindIF>
 8007612:	4603      	mov	r3, r0
 8007614:	75bb      	strb	r3, [r7, #22]
            break;
 8007616:	e00d      	b.n	8007634 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800761e:	b2db      	uxtb	r3, r3
 8007620:	4619      	mov	r1, r3
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fa66 	bl	8007af4 <USBD_CoreFindEP>
 8007628:	4603      	mov	r3, r0
 800762a:	75bb      	strb	r3, [r7, #22]
            break;
 800762c:	e002      	b.n	8007634 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	75bb      	strb	r3, [r7, #22]
            break;
 8007632:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007634:	7dbb      	ldrb	r3, [r7, #22]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d119      	bne.n	800766e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b03      	cmp	r3, #3
 8007644:	d113      	bne.n	800766e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007646:	7dba      	ldrb	r2, [r7, #22]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	32ae      	adds	r2, #174	@ 0xae
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007656:	7dba      	ldrb	r2, [r7, #22]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800765e:	7dba      	ldrb	r2, [r7, #22]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	32ae      	adds	r2, #174	@ 0xae
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f001 f95a 	bl	8008928 <USBD_CtlSendStatus>
 8007674:	e032      	b.n	80076dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767c:	b2db      	uxtb	r3, r3
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa37 	bl	8007af4 <USBD_CoreFindEP>
 8007686:	4603      	mov	r3, r0
 8007688:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800768a:	7dbb      	ldrb	r3, [r7, #22]
 800768c:	2bff      	cmp	r3, #255	@ 0xff
 800768e:	d025      	beq.n	80076dc <USBD_LL_DataOutStage+0x15c>
 8007690:	7dbb      	ldrb	r3, [r7, #22]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d122      	bne.n	80076dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d117      	bne.n	80076d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076a2:	7dba      	ldrb	r2, [r7, #22]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	32ae      	adds	r2, #174	@ 0xae
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00f      	beq.n	80076d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80076b2:	7dba      	ldrb	r2, [r7, #22]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80076ba:	7dba      	ldrb	r2, [r7, #22]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	32ae      	adds	r2, #174	@ 0xae
 80076c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	7afa      	ldrb	r2, [r7, #11]
 80076c8:	4611      	mov	r1, r2
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	4798      	blx	r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	e000      	b.n	80076de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	460b      	mov	r3, r1
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d16f      	bne.n	80077da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3314      	adds	r3, #20
 80076fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007706:	2b02      	cmp	r3, #2
 8007708:	d15a      	bne.n	80077c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	429a      	cmp	r2, r3
 8007714:	d914      	bls.n	8007740 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	461a      	mov	r2, r3
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f001 f8bc 	bl	80088aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007732:	2300      	movs	r3, #0
 8007734:	2200      	movs	r2, #0
 8007736:	2100      	movs	r1, #0
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f001 fd8d 	bl	8009258 <USBD_LL_PrepareReceive>
 800773e:	e03f      	b.n	80077c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	d11c      	bne.n	8007786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007754:	429a      	cmp	r2, r3
 8007756:	d316      	bcc.n	8007786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007762:	429a      	cmp	r2, r3
 8007764:	d20f      	bcs.n	8007786 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007766:	2200      	movs	r2, #0
 8007768:	2100      	movs	r1, #0
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f001 f89d 	bl	80088aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007778:	2300      	movs	r3, #0
 800777a:	2200      	movs	r2, #0
 800777c:	2100      	movs	r1, #0
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f001 fd6a 	bl	8009258 <USBD_LL_PrepareReceive>
 8007784:	e01c      	b.n	80077c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b03      	cmp	r3, #3
 8007790:	d10f      	bne.n	80077b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077b2:	2180      	movs	r1, #128	@ 0x80
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f001 fca5 	bl	8009104 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f001 f8c7 	bl	800894e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d03a      	beq.n	8007840 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fe42 	bl	8007454 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80077d8:	e032      	b.n	8007840 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	4619      	mov	r1, r3
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f985 	bl	8007af4 <USBD_CoreFindEP>
 80077ea:	4603      	mov	r3, r0
 80077ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	2bff      	cmp	r3, #255	@ 0xff
 80077f2:	d025      	beq.n	8007840 <USBD_LL_DataInStage+0x15a>
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d122      	bne.n	8007840 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b03      	cmp	r3, #3
 8007804:	d11c      	bne.n	8007840 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007806:	7dfa      	ldrb	r2, [r7, #23]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	32ae      	adds	r2, #174	@ 0xae
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d014      	beq.n	8007840 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007816:	7dfa      	ldrb	r2, [r7, #23]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800781e:	7dfa      	ldrb	r2, [r7, #23]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	32ae      	adds	r2, #174	@ 0xae
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	7afa      	ldrb	r2, [r7, #11]
 800782c:	4611      	mov	r1, r2
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	4798      	blx	r3
 8007832:	4603      	mov	r3, r0
 8007834:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007836:	7dbb      	ldrb	r3, [r7, #22]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800783c:	7dbb      	ldrb	r3, [r7, #22]
 800783e:	e000      	b.n	8007842 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d014      	beq.n	80078b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6852      	ldr	r2, [r2, #4]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	4611      	mov	r1, r2
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078b0:	2340      	movs	r3, #64	@ 0x40
 80078b2:	2200      	movs	r2, #0
 80078b4:	2100      	movs	r1, #0
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fbdf 	bl	800907a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2240      	movs	r2, #64	@ 0x40
 80078c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078cc:	2340      	movs	r3, #64	@ 0x40
 80078ce:	2200      	movs	r2, #0
 80078d0:	2180      	movs	r1, #128	@ 0x80
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fbd1 	bl	800907a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2240      	movs	r2, #64	@ 0x40
 80078e2:	621a      	str	r2, [r3, #32]

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b04      	cmp	r3, #4
 8007920:	d006      	beq.n	8007930 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2204      	movs	r2, #4
 8007934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b04      	cmp	r3, #4
 8007958:	d106      	bne.n	8007968 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b03      	cmp	r3, #3
 8007988:	d110      	bne.n	80079ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	32ae      	adds	r2, #174	@ 0xae
 80079cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e01c      	b.n	8007a12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d115      	bne.n	8007a10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	@ 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	32ae      	adds	r2, #174	@ 0xae
 8007a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	32ae      	adds	r2, #174	@ 0xae
 8007a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e01c      	b.n	8007a76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d115      	bne.n	8007a74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	32ae      	adds	r2, #174	@ 0xae
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	32ae      	adds	r2, #174	@ 0xae
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6852      	ldr	r2, [r2, #4]
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ae6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	885b      	ldrh	r3, [r3, #2]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d91f      	bls.n	8007b74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b3a:	e013      	b.n	8007b64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b3c:	f107 030a 	add.w	r3, r7, #10
 8007b40:	4619      	mov	r1, r3
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f000 f81b 	bl	8007b7e <USBD_GetNextDesc>
 8007b48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d108      	bne.n	8007b64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	789b      	ldrb	r3, [r3, #2]
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d008      	beq.n	8007b72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	885b      	ldrh	r3, [r3, #2]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	897b      	ldrh	r3, [r7, #10]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d8e5      	bhi.n	8007b3c <USBD_GetEpDesc+0x2e>
 8007b70:	e000      	b.n	8007b74 <USBD_GetEpDesc+0x66>
          break;
 8007b72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b74:	693b      	ldr	r3, [r7, #16]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	4413      	add	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b087      	sub	sp, #28
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	b21a      	sxth	r2, r3
 8007bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b21b      	sxth	r3, r3
 8007be4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007be6:	89fb      	ldrh	r3, [r7, #14]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c0a:	2b40      	cmp	r3, #64	@ 0x40
 8007c0c:	d005      	beq.n	8007c1a <USBD_StdDevReq+0x26>
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d857      	bhi.n	8007cc2 <USBD_StdDevReq+0xce>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00f      	beq.n	8007c36 <USBD_StdDevReq+0x42>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d153      	bne.n	8007cc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	32ae      	adds	r2, #174	@ 0xae
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]
      break;
 8007c34:	e04a      	b.n	8007ccc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b09      	cmp	r3, #9
 8007c3c:	d83b      	bhi.n	8007cb6 <USBD_StdDevReq+0xc2>
 8007c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <USBD_StdDevReq+0x50>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007cad 	.word	0x08007cad
 8007c4c:	08007cb7 	.word	0x08007cb7
 8007c50:	08007ca3 	.word	0x08007ca3
 8007c54:	08007cb7 	.word	0x08007cb7
 8007c58:	08007c77 	.word	0x08007c77
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007cb7 	.word	0x08007cb7
 8007c64:	08007c8f 	.word	0x08007c8f
 8007c68:	08007c81 	.word	0x08007c81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa3c 	bl	80080ec <USBD_GetDescriptor>
          break;
 8007c74:	e024      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fba1 	bl	80083c0 <USBD_SetAddress>
          break;
 8007c7e:	e01f      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fbe0 	bl	8008448 <USBD_SetConfig>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8007c8c:	e018      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc83 	bl	800859c <USBD_GetConfig>
          break;
 8007c96:	e013      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fcb4 	bl	8008608 <USBD_GetStatus>
          break;
 8007ca0:	e00e      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fce3 	bl	8008670 <USBD_SetFeature>
          break;
 8007caa:	e009      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fd07 	bl	80086c2 <USBD_ClrFeature>
          break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fd5e 	bl	800877a <USBD_CtlError>
          break;
 8007cbe:	bf00      	nop
      }
      break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fd58 	bl	800877a <USBD_CtlError>
      break;
 8007cca:	bf00      	nop
  }

  return ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop

08007cd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cee:	2b40      	cmp	r3, #64	@ 0x40
 8007cf0:	d005      	beq.n	8007cfe <USBD_StdItfReq+0x26>
 8007cf2:	2b40      	cmp	r3, #64	@ 0x40
 8007cf4:	d852      	bhi.n	8007d9c <USBD_StdItfReq+0xc4>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <USBD_StdItfReq+0x26>
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d14e      	bne.n	8007d9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d840      	bhi.n	8007d8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	889b      	ldrh	r3, [r3, #4]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d836      	bhi.n	8007d84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	889b      	ldrh	r3, [r3, #4]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fedb 	bl	8007ada <USBD_CoreFindIF>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2bff      	cmp	r3, #255	@ 0xff
 8007d2c:	d01d      	beq.n	8007d6a <USBD_StdItfReq+0x92>
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d11a      	bne.n	8007d6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d34:	7bba      	ldrb	r2, [r7, #14]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	32ae      	adds	r2, #174	@ 0xae
 8007d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00f      	beq.n	8007d64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d44:	7bba      	ldrb	r2, [r7, #14]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d4c:	7bba      	ldrb	r2, [r7, #14]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	32ae      	adds	r2, #174	@ 0xae
 8007d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d62:	e004      	b.n	8007d6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d68:	e001      	b.n	8007d6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88db      	ldrh	r3, [r3, #6]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d110      	bne.n	8007d98 <USBD_StdItfReq+0xc0>
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10d      	bne.n	8007d98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fdd3 	bl	8008928 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d82:	e009      	b.n	8007d98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fcf7 	bl	800877a <USBD_CtlError>
          break;
 8007d8c:	e004      	b.n	8007d98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fcf2 	bl	800877a <USBD_CtlError>
          break;
 8007d96:	e000      	b.n	8007d9a <USBD_StdItfReq+0xc2>
          break;
 8007d98:	bf00      	nop
      }
      break;
 8007d9a:	e004      	b.n	8007da6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fceb 	bl	800877a <USBD_CtlError>
      break;
 8007da4:	bf00      	nop
  }

  return ret;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	889b      	ldrh	r3, [r3, #4]
 8007dc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dcc:	2b40      	cmp	r3, #64	@ 0x40
 8007dce:	d007      	beq.n	8007de0 <USBD_StdEPReq+0x30>
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	f200 817f 	bhi.w	80080d4 <USBD_StdEPReq+0x324>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d02a      	beq.n	8007e30 <USBD_StdEPReq+0x80>
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	f040 817a 	bne.w	80080d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fe85 	bl	8007af4 <USBD_CoreFindEP>
 8007dea:	4603      	mov	r3, r0
 8007dec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dee:	7b7b      	ldrb	r3, [r7, #13]
 8007df0:	2bff      	cmp	r3, #255	@ 0xff
 8007df2:	f000 8174 	beq.w	80080de <USBD_StdEPReq+0x32e>
 8007df6:	7b7b      	ldrb	r3, [r7, #13]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 8170 	bne.w	80080de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007dfe:	7b7a      	ldrb	r2, [r7, #13]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e06:	7b7a      	ldrb	r2, [r7, #13]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	32ae      	adds	r2, #174	@ 0xae
 8007e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8163 	beq.w	80080de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e18:	7b7a      	ldrb	r2, [r7, #13]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	@ 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e2e:	e156      	b.n	80080de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d008      	beq.n	8007e4a <USBD_StdEPReq+0x9a>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	f300 8145 	bgt.w	80080c8 <USBD_StdEPReq+0x318>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 809b 	beq.w	8007f7a <USBD_StdEPReq+0x1ca>
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d03c      	beq.n	8007ec2 <USBD_StdEPReq+0x112>
 8007e48:	e13e      	b.n	80080c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d002      	beq.n	8007e5c <USBD_StdEPReq+0xac>
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d016      	beq.n	8007e88 <USBD_StdEPReq+0xd8>
 8007e5a:	e02c      	b.n	8007eb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <USBD_StdEPReq+0xce>
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b80      	cmp	r3, #128	@ 0x80
 8007e66:	d00a      	beq.n	8007e7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 f949 	bl	8009104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e72:	2180      	movs	r1, #128	@ 0x80
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f945 	bl	8009104 <USBD_LL_StallEP>
 8007e7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e7c:	e020      	b.n	8007ec0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc7a 	bl	800877a <USBD_CtlError>
              break;
 8007e86:	e01b      	b.n	8007ec0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	885b      	ldrh	r3, [r3, #2]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10e      	bne.n	8007eae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <USBD_StdEPReq+0xfe>
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b80      	cmp	r3, #128	@ 0x80
 8007e9a:	d008      	beq.n	8007eae <USBD_StdEPReq+0xfe>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 f92b 	bl	8009104 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fd3a 	bl	8008928 <USBD_CtlSendStatus>

              break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fc5e 	bl	800877a <USBD_CtlError>
              break;
 8007ebe:	bf00      	nop
          }
          break;
 8007ec0:	e107      	b.n	80080d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d002      	beq.n	8007ed4 <USBD_StdEPReq+0x124>
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d016      	beq.n	8007f00 <USBD_StdEPReq+0x150>
 8007ed2:	e04b      	b.n	8007f6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00d      	beq.n	8007ef6 <USBD_StdEPReq+0x146>
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b80      	cmp	r3, #128	@ 0x80
 8007ede:	d00a      	beq.n	8007ef6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 f90d 	bl	8009104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eea:	2180      	movs	r1, #128	@ 0x80
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f909 	bl	8009104 <USBD_LL_StallEP>
 8007ef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ef4:	e040      	b.n	8007f78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc3e 	bl	800877a <USBD_CtlError>
              break;
 8007efe:	e03b      	b.n	8007f78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	885b      	ldrh	r3, [r3, #2]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d136      	bne.n	8007f76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 f913 	bl	8009142 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fd03 	bl	8008928 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fde4 	bl	8007af4 <USBD_CoreFindEP>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f30:	7b7b      	ldrb	r3, [r7, #13]
 8007f32:	2bff      	cmp	r3, #255	@ 0xff
 8007f34:	d01f      	beq.n	8007f76 <USBD_StdEPReq+0x1c6>
 8007f36:	7b7b      	ldrb	r3, [r7, #13]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11c      	bne.n	8007f76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f3c:	7b7a      	ldrb	r2, [r7, #13]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f44:	7b7a      	ldrb	r2, [r7, #13]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	32ae      	adds	r2, #174	@ 0xae
 8007f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d010      	beq.n	8007f76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f54:	7b7a      	ldrb	r2, [r7, #13]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	32ae      	adds	r2, #174	@ 0xae
 8007f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f6a:	e004      	b.n	8007f76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fc03 	bl	800877a <USBD_CtlError>
              break;
 8007f74:	e000      	b.n	8007f78 <USBD_StdEPReq+0x1c8>
              break;
 8007f76:	bf00      	nop
          }
          break;
 8007f78:	e0ab      	b.n	80080d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d002      	beq.n	8007f8c <USBD_StdEPReq+0x1dc>
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d032      	beq.n	8007ff0 <USBD_StdEPReq+0x240>
 8007f8a:	e097      	b.n	80080bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <USBD_StdEPReq+0x1f2>
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b80      	cmp	r3, #128	@ 0x80
 8007f96:	d004      	beq.n	8007fa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fbed 	bl	800877a <USBD_CtlError>
                break;
 8007fa0:	e091      	b.n	80080c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da0b      	bge.n	8007fc2 <USBD_StdEPReq+0x212>
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	3310      	adds	r3, #16
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	e00b      	b.n	8007fda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3304      	adds	r3, #4
 8007fda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fc43 	bl	8008874 <USBD_CtlSendData>
              break;
 8007fee:	e06a      	b.n	80080c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da11      	bge.n	800801c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	f003 020f 	and.w	r2, r3, #15
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	3324      	adds	r3, #36	@ 0x24
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d117      	bne.n	8008042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fbb0 	bl	800877a <USBD_CtlError>
                  break;
 800801a:	e054      	b.n	80080c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	f003 020f 	and.w	r2, r3, #15
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb9d 	bl	800877a <USBD_CtlError>
                  break;
 8008040:	e041      	b.n	80080c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da0b      	bge.n	8008062 <USBD_StdEPReq+0x2b2>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	3310      	adds	r3, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	3304      	adds	r3, #4
 8008060:	e00b      	b.n	800807a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <USBD_StdEPReq+0x2d8>
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b80      	cmp	r3, #128	@ 0x80
 8008086:	d103      	bne.n	8008090 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e00e      	b.n	80080ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f873 	bl	8009180 <USBD_LL_IsStallEP>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e002      	b.n	80080ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2202      	movs	r2, #2
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fbdd 	bl	8008874 <USBD_CtlSendData>
              break;
 80080ba:	e004      	b.n	80080c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fb5b 	bl	800877a <USBD_CtlError>
              break;
 80080c4:	bf00      	nop
          }
          break;
 80080c6:	e004      	b.n	80080d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fb55 	bl	800877a <USBD_CtlError>
          break;
 80080d0:	bf00      	nop
      }
      break;
 80080d2:	e005      	b.n	80080e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fb4f 	bl	800877a <USBD_CtlError>
      break;
 80080dc:	e000      	b.n	80080e0 <USBD_StdEPReq+0x330>
      break;
 80080de:	bf00      	nop
  }

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	2b06      	cmp	r3, #6
 800810e:	f200 8128 	bhi.w	8008362 <USBD_GetDescriptor+0x276>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <USBD_GetDescriptor+0x2c>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	08008135 	.word	0x08008135
 800811c:	0800814d 	.word	0x0800814d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	08008363 	.word	0x08008363
 8008128:	08008363 	.word	0x08008363
 800812c:	08008303 	.word	0x08008303
 8008130:	0800832f 	.word	0x0800832f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
      break;
 800814a:	e112      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7c1b      	ldrb	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10d      	bne.n	8008170 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	f107 0208 	add.w	r2, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	2202      	movs	r2, #2
 800816c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800816e:	e100      	b.n	8008372 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	f107 0208 	add.w	r2, r7, #8
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
 8008180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	2202      	movs	r2, #2
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0f2      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b05      	cmp	r3, #5
 8008194:	f200 80ac 	bhi.w	80082f0 <USBD_GetDescriptor+0x204>
 8008198:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <USBD_GetDescriptor+0xb4>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	08008221 	.word	0x08008221
 80081ac:	08008255 	.word	0x08008255
 80081b0:	08008289 	.word	0x08008289
 80081b4:	080082bd 	.word	0x080082bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e091      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 facb 	bl	800877a <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e089      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e077      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fab1 	bl	800877a <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e06f      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e05d      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa97 	bl	800877a <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e055      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e043      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa7d 	bl	800877a <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e03b      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7c12      	ldrb	r2, [r2, #16]
 80082a0:	f107 0108 	add.w	r1, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082aa:	e029      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa63 	bl	800877a <USBD_CtlError>
            err++;
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	3301      	adds	r3, #1
 80082b8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ba:	e021      	b.n	8008300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	7c12      	ldrb	r2, [r2, #16]
 80082d4:	f107 0108 	add.w	r1, r7, #8
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082de:	e00f      	b.n	8008300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa49 	bl	800877a <USBD_CtlError>
            err++;
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	3301      	adds	r3, #1
 80082ec:	72fb      	strb	r3, [r7, #11]
          break;
 80082ee:	e007      	b.n	8008300 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa41 	bl	800877a <USBD_CtlError>
          err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80082fe:	bf00      	nop
      }
      break;
 8008300:	e037      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7c1b      	ldrb	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008312:	f107 0208 	add.w	r2, r7, #8
 8008316:	4610      	mov	r0, r2
 8008318:	4798      	blx	r3
 800831a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800831c:	e029      	b.n	8008372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa2a 	bl	800877a <USBD_CtlError>
        err++;
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	3301      	adds	r3, #1
 800832a:	72fb      	strb	r3, [r7, #11]
      break;
 800832c:	e021      	b.n	8008372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	7c1b      	ldrb	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10d      	bne.n	8008352 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800833c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	4610      	mov	r0, r2
 8008344:	4798      	blx	r3
 8008346:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	2207      	movs	r2, #7
 800834e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008350:	e00f      	b.n	8008372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fa10 	bl	800877a <USBD_CtlError>
        err++;
 800835a:	7afb      	ldrb	r3, [r7, #11]
 800835c:	3301      	adds	r3, #1
 800835e:	72fb      	strb	r3, [r7, #11]
      break;
 8008360:	e007      	b.n	8008372 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa08 	bl	800877a <USBD_CtlError>
      err++;
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	3301      	adds	r3, #1
 800836e:	72fb      	strb	r3, [r7, #11]
      break;
 8008370:	bf00      	nop
  }

  if (err != 0U)
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11e      	bne.n	80083b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	88db      	ldrh	r3, [r3, #6]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d016      	beq.n	80083ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00e      	beq.n	80083a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88da      	ldrh	r2, [r3, #6]
 800838a:	893b      	ldrh	r3, [r7, #8]
 800838c:	4293      	cmp	r3, r2
 800838e:	bf28      	it	cs
 8008390:	4613      	movcs	r3, r2
 8008392:	b29b      	uxth	r3, r3
 8008394:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008396:	893b      	ldrh	r3, [r7, #8]
 8008398:	461a      	mov	r2, r3
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa69 	bl	8008874 <USBD_CtlSendData>
 80083a2:	e009      	b.n	80083b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9e7 	bl	800877a <USBD_CtlError>
 80083ac:	e004      	b.n	80083b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 faba 	bl	8008928 <USBD_CtlSendStatus>
 80083b4:	e000      	b.n	80083b8 <USBD_GetDescriptor+0x2cc>
    return;
 80083b6:	bf00      	nop
  }
}
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop

080083c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	889b      	ldrh	r3, [r3, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d131      	bne.n	8008436 <USBD_SetAddress+0x76>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88db      	ldrh	r3, [r3, #6]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d12d      	bne.n	8008436 <USBD_SetAddress+0x76>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	885b      	ldrh	r3, [r3, #2]
 80083de:	2b7f      	cmp	r3, #127	@ 0x7f
 80083e0:	d829      	bhi.n	8008436 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d104      	bne.n	8008404 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f9bc 	bl	800877a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008402:	e01d      	b.n	8008440 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	7bfa      	ldrb	r2, [r7, #15]
 8008408:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fee1 	bl	80091d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa86 	bl	8008928 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842a:	e009      	b.n	8008440 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008434:	e004      	b.n	8008440 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f99e 	bl	800877a <USBD_CtlError>
  }
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	b2da      	uxtb	r2, r3
 800845c:	4b4e      	ldr	r3, [pc, #312]	@ (8008598 <USBD_SetConfig+0x150>)
 800845e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008460:	4b4d      	ldr	r3, [pc, #308]	@ (8008598 <USBD_SetConfig+0x150>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d905      	bls.n	8008474 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f985 	bl	800877a <USBD_CtlError>
    return USBD_FAIL;
 8008470:	2303      	movs	r3, #3
 8008472:	e08c      	b.n	800858e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d002      	beq.n	8008486 <USBD_SetConfig+0x3e>
 8008480:	2b03      	cmp	r3, #3
 8008482:	d029      	beq.n	80084d8 <USBD_SetConfig+0x90>
 8008484:	e075      	b.n	8008572 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008486:	4b44      	ldr	r3, [pc, #272]	@ (8008598 <USBD_SetConfig+0x150>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d020      	beq.n	80084d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800848e:	4b42      	ldr	r3, [pc, #264]	@ (8008598 <USBD_SetConfig+0x150>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008498:	4b3f      	ldr	r3, [pc, #252]	@ (8008598 <USBD_SetConfig+0x150>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fe ffe3 	bl	800746a <USBD_SetClassConfig>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d008      	beq.n	80084c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f962 	bl	800877a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084be:	e065      	b.n	800858c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fa31 	bl	8008928 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2203      	movs	r2, #3
 80084ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084ce:	e05d      	b.n	800858c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fa29 	bl	8008928 <USBD_CtlSendStatus>
      break;
 80084d6:	e059      	b.n	800858c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008598 <USBD_SetConfig+0x150>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d112      	bne.n	8008506 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80084e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008598 <USBD_SetConfig+0x150>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084f2:	4b29      	ldr	r3, [pc, #164]	@ (8008598 <USBD_SetConfig+0x150>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7fe ffd2 	bl	80074a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa12 	bl	8008928 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008504:	e042      	b.n	800858c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008506:	4b24      	ldr	r3, [pc, #144]	@ (8008598 <USBD_SetConfig+0x150>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d02a      	beq.n	800856a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fe ffc0 	bl	80074a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008522:	4b1d      	ldr	r3, [pc, #116]	@ (8008598 <USBD_SetConfig+0x150>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800852c:	4b1a      	ldr	r3, [pc, #104]	@ (8008598 <USBD_SetConfig+0x150>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fe ff99 	bl	800746a <USBD_SetClassConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00f      	beq.n	8008562 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f918 	bl	800877a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fe ffa5 	bl	80074a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008560:	e014      	b.n	800858c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f9e0 	bl	8008928 <USBD_CtlSendStatus>
      break;
 8008568:	e010      	b.n	800858c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9dc 	bl	8008928 <USBD_CtlSendStatus>
      break;
 8008570:	e00c      	b.n	800858c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f900 	bl	800877a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800857a:	4b07      	ldr	r3, [pc, #28]	@ (8008598 <USBD_SetConfig+0x150>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7fe ff8e 	bl	80074a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008586:	2303      	movs	r3, #3
 8008588:	73fb      	strb	r3, [r7, #15]
      break;
 800858a:	bf00      	nop
  }

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	2000034c 	.word	0x2000034c

0800859c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d004      	beq.n	80085b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f8e2 	bl	800877a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085b6:	e023      	b.n	8008600 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	dc02      	bgt.n	80085ca <USBD_GetConfig+0x2e>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc03      	bgt.n	80085d0 <USBD_GetConfig+0x34>
 80085c8:	e015      	b.n	80085f6 <USBD_GetConfig+0x5a>
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d00b      	beq.n	80085e6 <USBD_GetConfig+0x4a>
 80085ce:	e012      	b.n	80085f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3308      	adds	r3, #8
 80085da:	2201      	movs	r2, #1
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f948 	bl	8008874 <USBD_CtlSendData>
        break;
 80085e4:	e00c      	b.n	8008600 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2201      	movs	r2, #1
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f940 	bl	8008874 <USBD_CtlSendData>
        break;
 80085f4:	e004      	b.n	8008600 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8be 	bl	800877a <USBD_CtlError>
        break;
 80085fe:	bf00      	nop
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	2b02      	cmp	r3, #2
 800861e:	d81e      	bhi.n	800865e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88db      	ldrh	r3, [r3, #6]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d004      	beq.n	8008632 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f8a5 	bl	800877a <USBD_CtlError>
        break;
 8008630:	e01a      	b.n	8008668 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d005      	beq.n	800864e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f043 0202 	orr.w	r2, r3, #2
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	330c      	adds	r3, #12
 8008652:	2202      	movs	r2, #2
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f90c 	bl	8008874 <USBD_CtlSendData>
      break;
 800865c:	e004      	b.n	8008668 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f88a 	bl	800877a <USBD_CtlError>
      break;
 8008666:	bf00      	nop
  }
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d107      	bne.n	8008692 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f94c 	bl	8008928 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008690:	e013      	b.n	80086ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d10b      	bne.n	80086b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	889b      	ldrh	r3, [r3, #4]
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f93c 	bl	8008928 <USBD_CtlSendStatus>
}
 80086b0:	e003      	b.n	80086ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f860 	bl	800877a <USBD_CtlError>
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d80b      	bhi.n	80086f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d10c      	bne.n	80086fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f91c 	bl	8008928 <USBD_CtlSendStatus>
      }
      break;
 80086f0:	e004      	b.n	80086fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f840 	bl	800877a <USBD_CtlError>
      break;
 80086fa:	e000      	b.n	80086fe <USBD_ClrFeature+0x3c>
      break;
 80086fc:	bf00      	nop
  }
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	781a      	ldrb	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	781a      	ldrb	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fa40 	bl	8007bb6 <SWAPBYTE>
 8008736:	4603      	mov	r3, r0
 8008738:	461a      	mov	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fa33 	bl	8007bb6 <SWAPBYTE>
 8008750:	4603      	mov	r3, r0
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fa26 	bl	8007bb6 <SWAPBYTE>
 800876a:	4603      	mov	r3, r0
 800876c:	461a      	mov	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	80da      	strh	r2, [r3, #6]
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008784:	2180      	movs	r1, #128	@ 0x80
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fcbc 	bl	8009104 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800878c:	2100      	movs	r1, #0
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fcb8 	bl	8009104 <USBD_LL_StallEP>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d042      	beq.n	8008838 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80087b6:	6938      	ldr	r0, [r7, #16]
 80087b8:	f000 f842 	bl	8008840 <USBD_GetLen>
 80087bc:	4603      	mov	r3, r0
 80087be:	3301      	adds	r3, #1
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087c6:	d808      	bhi.n	80087da <USBD_GetString+0x3e>
 80087c8:	6938      	ldr	r0, [r7, #16]
 80087ca:	f000 f839 	bl	8008840 <USBD_GetLen>
 80087ce:	4603      	mov	r3, r0
 80087d0:	3301      	adds	r3, #1
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	e001      	b.n	80087de <USBD_GetString+0x42>
 80087da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	3301      	adds	r3, #1
 80087f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4413      	add	r3, r2
 80087fa:	2203      	movs	r2, #3
 80087fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	3301      	adds	r3, #1
 8008802:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008804:	e013      	b.n	800882e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	4413      	add	r3, r2
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	7812      	ldrb	r2, [r2, #0]
 8008810:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	3301      	adds	r3, #1
 8008816:	613b      	str	r3, [r7, #16]
    idx++;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	3301      	adds	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	4413      	add	r3, r2
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
    idx++;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	3301      	adds	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e7      	bne.n	8008806 <USBD_GetString+0x6a>
 8008836:	e000      	b.n	800883a <USBD_GetString+0x9e>
    return;
 8008838:	bf00      	nop
  }
}
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008850:	e005      	b.n	800885e <USBD_GetLen+0x1e>
  {
    len++;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	3301      	adds	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3301      	adds	r3, #1
 800885c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f5      	bne.n	8008852 <USBD_GetLen+0x12>
  }

  return len;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fcbb 	bl	8009216 <USBD_LL_Transmit>

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fcaa 	bl	8009216 <USBD_LL_Transmit>

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2203      	movs	r2, #3
 80088dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	2100      	movs	r1, #0
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fcae 	bl	8009258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	2100      	movs	r1, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fc9d 	bl	8009258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2204      	movs	r2, #4
 8008934:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008938:	2300      	movs	r3, #0
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc69 	bl	8009216 <USBD_LL_Transmit>

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2205      	movs	r2, #5
 800895a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800895e:	2300      	movs	r3, #0
 8008960:	2200      	movs	r2, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc77 	bl	8009258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008978:	2200      	movs	r2, #0
 800897a:	4912      	ldr	r1, [pc, #72]	@ (80089c4 <MX_USB_DEVICE_Init+0x50>)
 800897c:	4812      	ldr	r0, [pc, #72]	@ (80089c8 <MX_USB_DEVICE_Init+0x54>)
 800897e:	f7fe fcf7 	bl	8007370 <USBD_Init>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008988:	f7f8 f92c 	bl	8000be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800898c:	490f      	ldr	r1, [pc, #60]	@ (80089cc <MX_USB_DEVICE_Init+0x58>)
 800898e:	480e      	ldr	r0, [pc, #56]	@ (80089c8 <MX_USB_DEVICE_Init+0x54>)
 8008990:	f7fe fd1e 	bl	80073d0 <USBD_RegisterClass>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800899a:	f7f8 f923 	bl	8000be4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800899e:	490c      	ldr	r1, [pc, #48]	@ (80089d0 <MX_USB_DEVICE_Init+0x5c>)
 80089a0:	4809      	ldr	r0, [pc, #36]	@ (80089c8 <MX_USB_DEVICE_Init+0x54>)
 80089a2:	f7fe fc55 	bl	8007250 <USBD_CDC_RegisterInterface>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089ac:	f7f8 f91a 	bl	8000be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089b0:	4805      	ldr	r0, [pc, #20]	@ (80089c8 <MX_USB_DEVICE_Init+0x54>)
 80089b2:	f7fe fd43 	bl	800743c <USBD_Start>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089bc:	f7f8 f912 	bl	8000be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089c0:	bf00      	nop
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200000ac 	.word	0x200000ac
 80089c8:	20000350 	.word	0x20000350
 80089cc:	20000018 	.word	0x20000018
 80089d0:	20000098 	.word	0x20000098

080089d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089d8:	2200      	movs	r2, #0
 80089da:	4905      	ldr	r1, [pc, #20]	@ (80089f0 <CDC_Init_FS+0x1c>)
 80089dc:	4805      	ldr	r0, [pc, #20]	@ (80089f4 <CDC_Init_FS+0x20>)
 80089de:	f7fe fc51 	bl	8007284 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089e2:	4905      	ldr	r1, [pc, #20]	@ (80089f8 <CDC_Init_FS+0x24>)
 80089e4:	4803      	ldr	r0, [pc, #12]	@ (80089f4 <CDC_Init_FS+0x20>)
 80089e6:	f7fe fc6f 	bl	80072c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20000e2c 	.word	0x20000e2c
 80089f4:	20000350 	.word	0x20000350
 80089f8:	2000062c 	.word	0x2000062c

080089fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b23      	cmp	r3, #35	@ 0x23
 8008a20:	d84a      	bhi.n	8008ab8 <CDC_Control_FS+0xac>
 8008a22:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <CDC_Control_FS+0x1c>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008ab9 	.word	0x08008ab9
 8008a2c:	08008ab9 	.word	0x08008ab9
 8008a30:	08008ab9 	.word	0x08008ab9
 8008a34:	08008ab9 	.word	0x08008ab9
 8008a38:	08008ab9 	.word	0x08008ab9
 8008a3c:	08008ab9 	.word	0x08008ab9
 8008a40:	08008ab9 	.word	0x08008ab9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ab9 	.word	0x08008ab9
 8008a4c:	08008ab9 	.word	0x08008ab9
 8008a50:	08008ab9 	.word	0x08008ab9
 8008a54:	08008ab9 	.word	0x08008ab9
 8008a58:	08008ab9 	.word	0x08008ab9
 8008a5c:	08008ab9 	.word	0x08008ab9
 8008a60:	08008ab9 	.word	0x08008ab9
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008ab9 	.word	0x08008ab9
 8008a6c:	08008ab9 	.word	0x08008ab9
 8008a70:	08008ab9 	.word	0x08008ab9
 8008a74:	08008ab9 	.word	0x08008ab9
 8008a78:	08008ab9 	.word	0x08008ab9
 8008a7c:	08008ab9 	.word	0x08008ab9
 8008a80:	08008ab9 	.word	0x08008ab9
 8008a84:	08008ab9 	.word	0x08008ab9
 8008a88:	08008ab9 	.word	0x08008ab9
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008ab9 	.word	0x08008ab9
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ab9 	.word	0x08008ab9
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008ab9 	.word	0x08008ab9
 8008aa8:	08008ab9 	.word	0x08008ab9
 8008aac:	08008ab9 	.word	0x08008ab9
 8008ab0:	08008ab9 	.word	0x08008ab9
 8008ab4:	08008ab9 	.word	0x08008ab9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ab8:	bf00      	nop
  }

  return (USBD_OK);
 8008aba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4805      	ldr	r0, [pc, #20]	@ (8008aec <CDC_Receive_FS+0x24>)
 8008ad6:	f7fe fbf7 	bl	80072c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ada:	4804      	ldr	r0, [pc, #16]	@ (8008aec <CDC_Receive_FS+0x24>)
 8008adc:	f7fe fc12 	bl	8007304 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ae0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000350 	.word	0x20000350

08008af0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2212      	movs	r2, #18
 8008b24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b26:	4b03      	ldr	r3, [pc, #12]	@ (8008b34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	200000c8 	.word	0x200000c8

08008b38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2204      	movs	r2, #4
 8008b48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b4a:	4b03      	ldr	r3, [pc, #12]	@ (8008b58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	200000dc 	.word	0x200000dc

08008b5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4907      	ldr	r1, [pc, #28]	@ (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b72:	4808      	ldr	r0, [pc, #32]	@ (8008b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b74:	f7ff fe12 	bl	800879c <USBD_GetString>
 8008b78:	e004      	b.n	8008b84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4904      	ldr	r1, [pc, #16]	@ (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b7e:	4805      	ldr	r0, [pc, #20]	@ (8008b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b80:	f7ff fe0c 	bl	800879c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b84:	4b02      	ldr	r3, [pc, #8]	@ (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	2000162c 	.word	0x2000162c
 8008b94:	080093e0 	.word	0x080093e0

08008b98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	4904      	ldr	r1, [pc, #16]	@ (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ba8:	4804      	ldr	r0, [pc, #16]	@ (8008bbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008baa:	f7ff fdf7 	bl	800879c <USBD_GetString>
  return USBD_StrDesc;
 8008bae:	4b02      	ldr	r3, [pc, #8]	@ (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	2000162c 	.word	0x2000162c
 8008bbc:	080093f8 	.word	0x080093f8

08008bc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	221a      	movs	r2, #26
 8008bd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bd2:	f000 f843 	bl	8008c5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bd6:	4b02      	ldr	r3, [pc, #8]	@ (8008be0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	200000e0 	.word	0x200000e0

08008be4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d105      	bne.n	8008c02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	4907      	ldr	r1, [pc, #28]	@ (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bfa:	4808      	ldr	r0, [pc, #32]	@ (8008c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bfc:	f7ff fdce 	bl	800879c <USBD_GetString>
 8008c00:	e004      	b.n	8008c0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4904      	ldr	r1, [pc, #16]	@ (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c06:	4805      	ldr	r0, [pc, #20]	@ (8008c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c08:	f7ff fdc8 	bl	800879c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	2000162c 	.word	0x2000162c
 8008c1c:	0800940c 	.word	0x0800940c

08008c20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4907      	ldr	r1, [pc, #28]	@ (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c36:	4808      	ldr	r0, [pc, #32]	@ (8008c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c38:	f7ff fdb0 	bl	800879c <USBD_GetString>
 8008c3c:	e004      	b.n	8008c48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4904      	ldr	r1, [pc, #16]	@ (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c42:	4805      	ldr	r0, [pc, #20]	@ (8008c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c44:	f7ff fdaa 	bl	800879c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c48:	4b02      	ldr	r3, [pc, #8]	@ (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	2000162c 	.word	0x2000162c
 8008c58:	08009418 	.word	0x08009418

08008c5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca0 <Get_SerialNum+0x44>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca4 <Get_SerialNum+0x48>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca8 <Get_SerialNum+0x4c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c82:	2208      	movs	r2, #8
 8008c84:	4909      	ldr	r1, [pc, #36]	@ (8008cac <Get_SerialNum+0x50>)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f814 	bl	8008cb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	4908      	ldr	r1, [pc, #32]	@ (8008cb0 <Get_SerialNum+0x54>)
 8008c90:	68b8      	ldr	r0, [r7, #8]
 8008c92:	f000 f80f 	bl	8008cb4 <IntToUnicode>
  }
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	1fff7a10 	.word	0x1fff7a10
 8008ca4:	1fff7a14 	.word	0x1fff7a14
 8008ca8:	1fff7a18 	.word	0x1fff7a18
 8008cac:	200000e2 	.word	0x200000e2
 8008cb0:	200000f2 	.word	0x200000f2

08008cb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	75fb      	strb	r3, [r7, #23]
 8008cca:	e027      	b.n	8008d1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	0f1b      	lsrs	r3, r3, #28
 8008cd0:	2b09      	cmp	r3, #9
 8008cd2:	d80b      	bhi.n	8008cec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0f1b      	lsrs	r3, r3, #28
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3230      	adds	r2, #48	@ 0x30
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	e00a      	b.n	8008d02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	0f1b      	lsrs	r3, r3, #28
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3237      	adds	r2, #55	@ 0x37
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
 8008d1c:	7dfa      	ldrb	r2, [r7, #23]
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d3d3      	bcc.n	8008ccc <IntToUnicode+0x18>
  }
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	@ 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	609a      	str	r2, [r3, #8]
 8008d48:	60da      	str	r2, [r3, #12]
 8008d4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d54:	d13a      	bne.n	8008dcc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d66:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d80:	2303      	movs	r3, #3
 8008d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d84:	230a      	movs	r3, #10
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d88:	f107 0314 	add.w	r3, r7, #20
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4812      	ldr	r0, [pc, #72]	@ (8008dd8 <HAL_PCD_MspInit+0xa4>)
 8008d90:	f7f9 fada 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d94:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d98:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008da8:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dae:	6453      	str	r3, [r2, #68]	@ 0x44
 8008db0:	4b08      	ldr	r3, [pc, #32]	@ (8008dd4 <HAL_PCD_MspInit+0xa0>)
 8008db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	2043      	movs	r0, #67	@ 0x43
 8008dc2:	f7f9 fa8a 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dc6:	2043      	movs	r0, #67	@ 0x43
 8008dc8:	f7f9 faa3 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dcc:	bf00      	nop
 8008dce:	3728      	adds	r7, #40	@ 0x28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	40020000 	.word	0x40020000

08008ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f7fe fb6f 	bl	80074d6 <USBD_LL_SetupStage>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4613      	mov	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f7fe fba9 	bl	8007580 <USBD_LL_DataOutStage>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	3320      	adds	r3, #32
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7fe fc42 	bl	80076e6 <USBD_LL_DataInStage>
}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fd7c 	bl	8007976 <USBD_LL_SOF>
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	79db      	ldrb	r3, [r3, #7]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d001      	beq.n	8008e9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e9a:	f7f7 fea3 	bl	8000be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ea4:	7bfa      	ldrb	r2, [r7, #15]
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fd20 	bl	80078ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fcc8 	bl	800784a <USBD_LL_Reset>
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fd1b 	bl	800790e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7adb      	ldrb	r3, [r3, #11]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ef8:	4b04      	ldr	r3, [pc, #16]	@ (8008f0c <HAL_PCD_SuspendCallback+0x48>)
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	4a03      	ldr	r2, [pc, #12]	@ (8008f0c <HAL_PCD_SuspendCallback+0x48>)
 8008efe:	f043 0306 	orr.w	r3, r3, #6
 8008f02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	e000ed00 	.word	0xe000ed00

08008f10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fd11 	bl	8007946 <USBD_LL_Resume>
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fd69 	bl	8007a1a <USBD_LL_IsoOUTIncomplete>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fd25 	bl	80079b6 <USBD_LL_IsoINIncomplete>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe fd7b 	bl	8007a7e <USBD_LL_DevConnected>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fd78 	bl	8007a94 <USBD_LL_DevDisconnected>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d13c      	bne.n	8009036 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fbc:	4a20      	ldr	r2, [pc, #128]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fc8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008fd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fda:	4b19      	ldr	r3, [pc, #100]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fdc:	2202      	movs	r2, #2
 8008fde:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fe0:	4b17      	ldr	r3, [pc, #92]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fe6:	4b16      	ldr	r3, [pc, #88]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fe8:	2202      	movs	r2, #2
 8008fea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fec:	4b14      	ldr	r3, [pc, #80]	@ (8009040 <USBD_LL_Init+0x94>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ff2:	4b13      	ldr	r3, [pc, #76]	@ (8009040 <USBD_LL_Init+0x94>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ff8:	4b11      	ldr	r3, [pc, #68]	@ (8009040 <USBD_LL_Init+0x94>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ffe:	4b10      	ldr	r3, [pc, #64]	@ (8009040 <USBD_LL_Init+0x94>)
 8009000:	2200      	movs	r2, #0
 8009002:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009004:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <USBD_LL_Init+0x94>)
 8009006:	2200      	movs	r2, #0
 8009008:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800900a:	480d      	ldr	r0, [pc, #52]	@ (8009040 <USBD_LL_Init+0x94>)
 800900c:	f7f9 fb39 	bl	8002682 <HAL_PCD_Init>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009016:	f7f7 fde5 	bl	8000be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800901a:	2180      	movs	r1, #128	@ 0x80
 800901c:	4808      	ldr	r0, [pc, #32]	@ (8009040 <USBD_LL_Init+0x94>)
 800901e:	f7fa fd66 	bl	8003aee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009022:	2240      	movs	r2, #64	@ 0x40
 8009024:	2100      	movs	r1, #0
 8009026:	4806      	ldr	r0, [pc, #24]	@ (8009040 <USBD_LL_Init+0x94>)
 8009028:	f7fa fd1a 	bl	8003a60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800902c:	2280      	movs	r2, #128	@ 0x80
 800902e:	2101      	movs	r1, #1
 8009030:	4803      	ldr	r0, [pc, #12]	@ (8009040 <USBD_LL_Init+0x94>)
 8009032:	f7fa fd15 	bl	8003a60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	2000182c 	.word	0x2000182c

08009044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800905a:	4618      	mov	r0, r3
 800905c:	f7f9 fc20 	bl	80028a0 <HAL_PCD_Start>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f942 	bl	80092f0 <USBD_Get_USB_Status>
 800906c:	4603      	mov	r3, r0
 800906e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009070:	7bbb      	ldrb	r3, [r7, #14]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	4608      	mov	r0, r1
 8009084:	4611      	mov	r1, r2
 8009086:	461a      	mov	r2, r3
 8009088:	4603      	mov	r3, r0
 800908a:	70fb      	strb	r3, [r7, #3]
 800908c:	460b      	mov	r3, r1
 800908e:	70bb      	strb	r3, [r7, #2]
 8009090:	4613      	mov	r3, r2
 8009092:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090a2:	78bb      	ldrb	r3, [r7, #2]
 80090a4:	883a      	ldrh	r2, [r7, #0]
 80090a6:	78f9      	ldrb	r1, [r7, #3]
 80090a8:	f7fa f8f4 	bl	8003294 <HAL_PCD_EP_Open>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f91c 	bl	80092f0 <USBD_Get_USB_Status>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fa f93f 	bl	8003368 <HAL_PCD_EP_Close>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 f8fd 	bl	80092f0 <USBD_Get_USB_Status>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fa f9f7 	bl	8003516 <HAL_PCD_EP_SetStall>
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	4618      	mov	r0, r3
 8009130:	f000 f8de 	bl	80092f0 <USBD_Get_USB_Status>
 8009134:	4603      	mov	r3, r0
 8009136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009138:	7bbb      	ldrb	r3, [r7, #14]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	4611      	mov	r1, r2
 8009160:	4618      	mov	r0, r3
 8009162:	f7fa fa3b 	bl	80035dc <HAL_PCD_EP_ClrStall>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f8bf 	bl	80092f0 <USBD_Get_USB_Status>
 8009172:	4603      	mov	r3, r0
 8009174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009176:	7bbb      	ldrb	r3, [r7, #14]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009192:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009198:	2b00      	cmp	r3, #0
 800919a:	da0b      	bge.n	80091b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	4613      	mov	r3, r2
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	3316      	adds	r3, #22
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	e00b      	b.n	80091cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091ba:	68f9      	ldr	r1, [r7, #12]
 80091bc:	4613      	mov	r3, r2
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80091ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fa f828 	bl	800324c <HAL_PCD_SetAddress>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f874 	bl	80092f0 <USBD_Get_USB_Status>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920c:	7bbb      	ldrb	r3, [r7, #14]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
 8009222:	460b      	mov	r3, r1
 8009224:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009234:	7af9      	ldrb	r1, [r7, #11]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	f7fa f932 	bl	80034a2 <HAL_PCD_EP_Transmit>
 800923e:	4603      	mov	r3, r0
 8009240:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f853 	bl	80092f0 <USBD_Get_USB_Status>
 800924a:	4603      	mov	r3, r0
 800924c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800924e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	460b      	mov	r3, r1
 8009266:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009276:	7af9      	ldrb	r1, [r7, #11]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	f7fa f8be 	bl	80033fc <HAL_PCD_EP_Receive>
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f832 	bl	80092f0 <USBD_Get_USB_Status>
 800928c:	4603      	mov	r3, r0
 800928e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009290:	7dbb      	ldrb	r3, [r7, #22]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fa f8de 	bl	8003472 <HAL_PCD_EP_GetRxCount>
 80092b6:	4603      	mov	r3, r0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092c8:	4b03      	ldr	r3, [pc, #12]	@ (80092d8 <USBD_static_malloc+0x18>)
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20001d10 	.word	0x20001d10

080092dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]

}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	2b03      	cmp	r3, #3
 8009302:	d817      	bhi.n	8009334 <USBD_Get_USB_Status+0x44>
 8009304:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <USBD_Get_USB_Status+0x1c>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	0800931d 	.word	0x0800931d
 8009310:	08009323 	.word	0x08009323
 8009314:	08009329 	.word	0x08009329
 8009318:	0800932f 	.word	0x0800932f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
    break;
 8009320:	e00b      	b.n	800933a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009322:	2303      	movs	r3, #3
 8009324:	73fb      	strb	r3, [r7, #15]
    break;
 8009326:	e008      	b.n	800933a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009328:	2301      	movs	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
    break;
 800932c:	e005      	b.n	800933a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800932e:	2303      	movs	r3, #3
 8009330:	73fb      	strb	r3, [r7, #15]
    break;
 8009332:	e002      	b.n	800933a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009334:	2303      	movs	r3, #3
 8009336:	73fb      	strb	r3, [r7, #15]
    break;
 8009338:	bf00      	nop
  }
  return usb_status;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <memset>:
 8009348:	4402      	add	r2, r0
 800934a:	4603      	mov	r3, r0
 800934c:	4293      	cmp	r3, r2
 800934e:	d100      	bne.n	8009352 <memset+0xa>
 8009350:	4770      	bx	lr
 8009352:	f803 1b01 	strb.w	r1, [r3], #1
 8009356:	e7f9      	b.n	800934c <memset+0x4>

08009358 <__libc_init_array>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	4d0d      	ldr	r5, [pc, #52]	@ (8009390 <__libc_init_array+0x38>)
 800935c:	4c0d      	ldr	r4, [pc, #52]	@ (8009394 <__libc_init_array+0x3c>)
 800935e:	1b64      	subs	r4, r4, r5
 8009360:	10a4      	asrs	r4, r4, #2
 8009362:	2600      	movs	r6, #0
 8009364:	42a6      	cmp	r6, r4
 8009366:	d109      	bne.n	800937c <__libc_init_array+0x24>
 8009368:	4d0b      	ldr	r5, [pc, #44]	@ (8009398 <__libc_init_array+0x40>)
 800936a:	4c0c      	ldr	r4, [pc, #48]	@ (800939c <__libc_init_array+0x44>)
 800936c:	f000 f818 	bl	80093a0 <_init>
 8009370:	1b64      	subs	r4, r4, r5
 8009372:	10a4      	asrs	r4, r4, #2
 8009374:	2600      	movs	r6, #0
 8009376:	42a6      	cmp	r6, r4
 8009378:	d105      	bne.n	8009386 <__libc_init_array+0x2e>
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009380:	4798      	blx	r3
 8009382:	3601      	adds	r6, #1
 8009384:	e7ee      	b.n	8009364 <__libc_init_array+0xc>
 8009386:	f855 3b04 	ldr.w	r3, [r5], #4
 800938a:	4798      	blx	r3
 800938c:	3601      	adds	r6, #1
 800938e:	e7f2      	b.n	8009376 <__libc_init_array+0x1e>
 8009390:	08009458 	.word	0x08009458
 8009394:	08009458 	.word	0x08009458
 8009398:	08009458 	.word	0x08009458
 800939c:	0800945c 	.word	0x0800945c

080093a0 <_init>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr

080093ac <_fini>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	bf00      	nop
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr
