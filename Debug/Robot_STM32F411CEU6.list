
Robot_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f90  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091c0  080091c0  0000b0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c8  080091c8  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091c8  080091c8  0000a1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091cc  080091cc  0000a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080091d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e34  200000fc  080092cc  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  080092cc  0000bf30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016822  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a95  00000000  00000000  0002194e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  000253e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001068  00000000  00000000  00026960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af0f  00000000  00000000  000279c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b7e  00000000  00000000  000428d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3ae  00000000  00000000  0005c455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  000fa848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001001ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009110 	.word	0x08009110

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08009110 	.word	0x08009110

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 fa92 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f816 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fad6 	bl	8000ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000514:	f000 f87a 	bl	800060c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000518:	f000 f8ca 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800051c:	f008 f8e2 	bl	80086e4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000520:	f000 f8fc 	bl	800071c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f97e 	bl	8000824 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000528:	f000 f9d4 	bl	80008d4 <MX_TIM4_Init>
  MX_TIM10_Init();
 800052c:	f000 fa2c 	bl	8000988 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000530:	f000 fa78 	bl	8000a24 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  movement();
 8000534:	f000 fbdc 	bl	8000cf0 <movement>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x34>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 fdb4 	bl	80090b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a26      	ldr	r2, [pc, #152]	@ (8000604 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b24      	ldr	r3, [pc, #144]	@ (8000604 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <SystemClock_Config+0xcc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b0:	23c0      	movs	r3, #192	@ 0xc0
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fa3f 	bl	8003a44 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 fafc 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fca1 	bl	8003f34 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f8:	f000 fae6 	bl	8000bc8 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	@ 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x9c>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800064e:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800066e:	f001 fa75 	bl	8001b5c <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 faa6 	bl	8000bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800068e:	f001 faa9 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fa96 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000118 	.word	0x20000118
 80006a8:	40012000 	.word	0x40012000
 80006ac:	0f000001 	.word	0x0f000001

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	@ (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f003 fdcf 	bl	80042a4 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 fa5c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000160 	.word	0x20000160
 8000718:	40013000 	.word	0x40013000

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b092      	sub	sp, #72	@ 0x48
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f008 fcb6 	bl	80090b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_TIM1_Init+0x100>)
 800074e:	4a34      	ldr	r2, [pc, #208]	@ (8000820 <MX_TIM1_Init+0x104>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96;
 8000752:	4b32      	ldr	r3, [pc, #200]	@ (800081c <MX_TIM1_Init+0x100>)
 8000754:	2260      	movs	r2, #96	@ 0x60
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b30      	ldr	r3, [pc, #192]	@ (800081c <MX_TIM1_Init+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800075e:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_TIM1_Init+0x100>)
 8000760:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <MX_TIM1_Init+0x100>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <MX_TIM1_Init+0x100>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <MX_TIM1_Init+0x100>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000778:	4828      	ldr	r0, [pc, #160]	@ (800081c <MX_TIM1_Init+0x100>)
 800077a:	f004 f8f0 	bl	800495e <HAL_TIM_PWM_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000784:	f000 fa20 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000790:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000794:	4619      	mov	r1, r3
 8000796:	4821      	ldr	r0, [pc, #132]	@ (800081c <MX_TIM1_Init+0x100>)
 8000798:	f004 fc0a 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 fa11 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a6:	2360      	movs	r3, #96	@ 0x60
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_TIM1_Init+0x100>)
 80007cc:	f004 f916 	bl	80049fc <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007d6:	f000 f9f7 	bl	8000bc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <MX_TIM1_Init+0x100>)
 80007fe:	f004 fc45 	bl	800508c <HAL_TIMEx_ConfigBreakDeadTime>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000808:	f000 f9de 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_TIM1_Init+0x100>)
 800080e:	f000 ffc3 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3748      	adds	r7, #72	@ 0x48
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001b8 	.word	0x200001b8
 8000820:	40010000 	.word	0x40010000

08000824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000850:	2260      	movs	r2, #96	@ 0x60
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800085c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000870:	f004 f875 	bl	800495e <HAL_TIM_PWM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800087a:	f000 f9a5 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	4619      	mov	r1, r3
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800088e:	f004 fb8f 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000898:	f000 f996 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	@ 0x60
 800089e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_TIM2_Init+0xac>)
 80008b4:	f004 f8a2 	bl	80049fc <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008be:	f000 f983 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <MX_TIM2_Init+0xac>)
 80008c4:	f000 ff68 	bl	8001798 <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000200 	.word	0x20000200

080008d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f6:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_TIM4_Init+0xac>)
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <MX_TIM4_Init+0xb0>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_TIM4_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_TIM4_Init+0xac>)
 800090a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800090e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800091c:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_TIM4_Init+0xac>)
 800091e:	f004 f81e 	bl	800495e <HAL_TIM_PWM_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f94e 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_TIM4_Init+0xac>)
 800093c:	f004 fb38 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000946:	f000 f93f 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	@ 0x60
 800094c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000962:	f004 f84b 	bl	80049fc <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800096c:	f000 f92c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000972:	f000 ff11 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000248 	.word	0x20000248
 8000984:	40000800 	.word	0x40000800

08000988 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <MX_TIM10_Init+0x98>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009c6:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009c8:	f003 ff7a 	bl	80048c0 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80009d2:	f000 f8f9 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009d8:	f003 ffc1 	bl	800495e <HAL_TIM_PWM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80009e2:	f000 f8f1 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009fe:	f003 fffd 	bl	80049fc <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000a08:	f000 f8de 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <MX_TIM10_Init+0x94>)
 8000a0e:	f000 fec3 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000290 	.word	0x20000290
 8000a20:	40014400 	.word	0x40014400

08000a24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_TIM11_Init+0x98>)
 8000a40:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a44:	2260      	movs	r2, #96	@ 0x60
 8000a46:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a50:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000a54:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a64:	f003 ff2c 	bl	80048c0 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000a6e:	f000 f8ab 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a74:	f003 ff73 	bl	800495e <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 f8a3 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	@ 0x60
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a9a:	f003 ffaf 	bl	80049fc <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000aa4:	f000 f890 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000aaa:	f000 fe75 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002d8 	.word	0x200002d8
 8000abc:	40014800 	.word	0x40014800

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a37      	ldr	r2, [pc, #220]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a30      	ldr	r2, [pc, #192]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a29      	ldr	r2, [pc, #164]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a22      	ldr	r2, [pc, #136]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <MX_GPIO_Init+0xfc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4c:	481c      	ldr	r0, [pc, #112]	@ (8000bc0 <MX_GPIO_Init+0x100>)
 8000b4e:	f001 fd0d 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b58:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <MX_GPIO_Init+0x104>)
 8000b5a:	f001 fd07 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <MX_GPIO_Init+0x100>)
 8000b78:	f001 fb74 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000b7c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <MX_GPIO_Init+0x104>)
 8000b96:	f001 fb65 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_GPIO_Init+0x104>)
 8000bb0:	f001 fb58 	bl	8002264 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	@ 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <nRF24_CE_L>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;


static inline void nRF24_CE_L() {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bde:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <nRF24_CE_L+0x14>)
 8000be0:	f001 fcc4 	bl	800256c <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020400 	.word	0x40020400

08000bec <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf6:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <nRF24_CE_H+0x14>)
 8000bf8:	f001 fcb8 	bl	800256c <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020400 	.word	0x40020400

08000c04 <nRF24_TransmitPacket>:
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <nRF24_TransmitPacket+0x80>)
 8000c12:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000c14:	f7ff ffde 	bl	8000bd4 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 fbea 	bl	80013f6 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000c22:	f7ff ffe3 	bl	8000bec <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8000c26:	f000 fbae 	bl	8001386 <nRF24_GetStatus>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d105      	bne.n	8000c44 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f1      	bne.n	8000c26 <nRF24_TransmitPacket+0x22>
 8000c42:	e000      	b.n	8000c46 <nRF24_TransmitPacket+0x42>
			break;
 8000c44:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000c46:	f7ff ffc5 	bl	8000bd4 <nRF24_CE_L>

	if (!wait) {
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8000c50:	2302      	movs	r3, #2
 8000c52:	e012      	b.n	8000c7a <nRF24_TransmitPacket+0x76>
	}


	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8000c54:	f000 fbba 	bl	80013cc <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <nRF24_TransmitPacket+0x62>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e009      	b.n	8000c7a <nRF24_TransmitPacket+0x76>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <nRF24_TransmitPacket+0x70>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e002      	b.n	8000c7a <nRF24_TransmitPacket+0x76>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8000c74:	f000 fb9a 	bl	80013ac <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	000fffff 	.word	0x000fffff

08000c88 <send_payload>:

void send_payload(uint8_t* payload, uint8_t length)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 fa1a 	bl	80010ce <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000c9a:	f000 fb97 	bl	80013cc <nRF24_ClearIRQFlags>


	// Transmit a packet
	tx_res = nRF24_TransmitPacket(payload, length);
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffae 	bl	8000c04 <nRF24_TransmitPacket>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <send_payload+0x64>)
 8000cae:	701a      	strb	r2, [r3, #0]
	switch (tx_res) {
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <send_payload+0x64>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d006      	beq.n	8000cc6 <send_payload+0x3e>
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	dc06      	bgt.n	8000cca <send_payload+0x42>
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d006      	beq.n	8000cce <send_payload+0x46>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d006      	beq.n	8000cd2 <send_payload+0x4a>
		case nRF24_TX_MAXRT:

			break;
		default:

			break;
 8000cc4:	e001      	b.n	8000cca <send_payload+0x42>
			break;
 8000cc6:	bf00      	nop
 8000cc8:	e004      	b.n	8000cd4 <send_payload+0x4c>
			break;
 8000cca:	bf00      	nop
 8000ccc:	e002      	b.n	8000cd4 <send_payload+0x4c>
			break;
 8000cce:	bf00      	nop
 8000cd0:	e000      	b.n	8000cd4 <send_payload+0x4c>
			break;
 8000cd2:	bf00      	nop
	}

	HAL_Delay(5);
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	f000 ff1d 	bl	8001b14 <HAL_Delay>
    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f9f7 	bl	80010ce <nRF24_SetOperationalMode>


    // Put the transceiver to the RX mode
    nRF24_CE_H();
 8000ce0:	f7ff ff84 	bl	8000bec <nRF24_CE_H>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000346 	.word	0x20000346

08000cf0 <movement>:
    	}
    }
}

void movement(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

		HAL_Delay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cfa:	f000 ff0b 	bl	8001b14 <HAL_Delay>
		// RX/TX disabled
		nRF24_CE_L();
 8000cfe:	f7ff ff69 	bl	8000bd4 <nRF24_CE_L>

		// Configure the nRF24L01+

		HAL_Delay(1000);
 8000d02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d06:	f000 ff05 	bl	8001b14 <HAL_Delay>
		if (!nRF24_Check())
 8000d0a:	f000 f993 	bl	8001034 <nRF24_Check>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d109      	bne.n	8000d28 <movement+0x38>
		{

			while (1)
			{
				HAL_Delay(100);
 8000d14:	2064      	movs	r0, #100	@ 0x64
 8000d16:	f000 fefd 	bl	8001b14 <HAL_Delay>
				if (nRF24_Check()) break;
 8000d1a:	f000 f98b 	bl	8001034 <nRF24_Check>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d100      	bne.n	8000d26 <movement+0x36>
				HAL_Delay(100);
 8000d24:	e7f6      	b.n	8000d14 <movement+0x24>
				if (nRF24_Check()) break;
 8000d26:	bf00      	nop




		// Initialize the nRF24L01 to its default state
		nRF24_Init();
 8000d28:	f000 f937 	bl	8000f9a <nRF24_Init>
		//   - CRC scheme		: 2 byte

	    // The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

	    // Disable ShockBurst for all RX pipes
	    nRF24_DisableAA(0xFF);
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	f000 fb03 	bl	8001338 <nRF24_DisableAA>

	    // Set RF channel
	    nRF24_SetRFChannel(115);
 8000d32:	2073      	movs	r0, #115	@ 0x73
 8000d34:	f000 fa0d 	bl	8001152 <nRF24_SetRFChannel>

	    // Set data rate
	    nRF24_SetDataRate(nRF24_DR_250kbps);
 8000d38:	2020      	movs	r0, #32
 8000d3a:	f000 fa8e 	bl	800125a <nRF24_SetDataRate>

	    // Set CRC scheme
	    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000d3e:	200c      	movs	r0, #12
 8000d40:	f000 f9e6 	bl	8001110 <nRF24_SetCRCScheme>

	    // Set address width, its common for all pipes (RX and TX)
	    nRF24_SetAddrWidth(3);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 fa12 	bl	800116e <nRF24_SetAddrWidth>

	    // Configure RX PIPE#1
	    static const uint8_t nRF24_ADDR_Rx[] = { 0xE7, 0x1C, 0xE4 };
	    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_Rx); // program address for RX pipe #1
 8000d4a:	4926      	ldr	r1, [pc, #152]	@ (8000de4 <movement+0xf4>)
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 fa1f 	bl	8001190 <nRF24_SetAddr>
	    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 8000d52:	2205      	movs	r2, #5
 8000d54:	2100      	movs	r1, #0
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 fa9a 	bl	8001290 <nRF24_SetRXPipe>

	    // Configure TX PIPE
	    static const uint8_t nRF24_ADDR_Tx[] = { 0xE7, 0x1C, 0xE3 };
	    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR_Tx); // program TX address
 8000d5c:	4922      	ldr	r1, [pc, #136]	@ (8000de8 <movement+0xf8>)
 8000d5e:	2006      	movs	r0, #6
 8000d60:	f000 fa16 	bl	8001190 <nRF24_SetAddr>

	    // Set TX power (maximum)
	    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000d64:	2006      	movs	r0, #6
 8000d66:	f000 fa5d 	bl	8001224 <nRF24_SetTXPower>

	    // Set operational mode (PRX == receiver)
	    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f9af 	bl	80010ce <nRF24_SetOperationalMode>

	    // Wake the transceiver
	    nRF24_SetPowerMode(nRF24_PWR_UP);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f000 f98d 	bl	8001090 <nRF24_SetPowerMode>

	    // Put the transceiver to the RX mode
	    nRF24_CE_H();
 8000d76:	f7ff ff39 	bl	8000bec <nRF24_CE_H>
	    	// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
	    	//
	    	// This is far from best solution, but it's ok for testing purposes
	    	// More smart way is to use the IRQ pin :)
	    	//
	    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8000d7a:	f000 fb0c 	bl	8001396 <nRF24_GetStatus_RXFIFO>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d021      	beq.n	8000dc8 <movement+0xd8>
	    	{
	    		// Get a payload from the transceiver
	    		pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 8000d84:	4919      	ldr	r1, [pc, #100]	@ (8000dec <movement+0xfc>)
 8000d86:	481a      	ldr	r0, [pc, #104]	@ (8000df0 <movement+0x100>)
 8000d88:	f000 fba2 	bl	80014d0 <nRF24_ReadPayload>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <movement+0x104>)
 8000d92:	701a      	strb	r2, [r3, #0]

	    		// Clear all pending IRQ flags
				nRF24_ClearIRQFlags();
 8000d94:	f000 fb1a 	bl	80013cc <nRF24_ClearIRQFlags>

				// Print a payload contents to UART


				HAL_Delay(2);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f000 febb 	bl	8001b14 <HAL_Delay>
				uint8_t message[32] = {0xaa,0x44,0x11,0x22,0x55};
 8000d9e:	4a16      	ldr	r2, [pc, #88]	@ (8000df8 <movement+0x108>)
 8000da0:	463b      	mov	r3, r7
 8000da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da6:	6018      	str	r0, [r3, #0]
 8000da8:	3304      	adds	r3, #4
 8000daa:	8019      	strh	r1, [r3, #0]
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	831a      	strh	r2, [r3, #24]
				send_payload(message, 5);
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff60 	bl	8000c88 <send_payload>
	//			send_payload(nRF24_payload, payload_length);
	    	}
	    	Val_X = nRF24_payload[0];
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <movement+0x100>)
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <movement+0x10c>)
 8000dce:	701a      	strb	r2, [r3, #0]
	    	Val_Y = nRF24_payload[1];
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <movement+0x100>)
 8000dd2:	785a      	ldrb	r2, [r3, #1]
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <movement+0x110>)
 8000dd6:	701a      	strb	r2, [r3, #0]
	    	Val_S = nRF24_payload[2];
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <movement+0x100>)
 8000dda:	789a      	ldrb	r2, [r3, #2]
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <movement+0x114>)
 8000dde:	701a      	strb	r2, [r3, #0]
	    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8000de0:	e7cb      	b.n	8000d7a <movement+0x8a>
 8000de2:	bf00      	nop
 8000de4:	08009198 	.word	0x08009198
 8000de8:	0800919c 	.word	0x0800919c
 8000dec:	20000345 	.word	0x20000345
 8000df0:	20000324 	.word	0x20000324
 8000df4:	20000344 	.word	0x20000344
 8000df8:	08009128 	.word	0x08009128
 8000dfc:	20000320 	.word	0x20000320
 8000e00:	20000321 	.word	0x20000321
 8000e04:	20000322 	.word	0x20000322

08000e08 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e12:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <nRF24_CSN_L+0x14>)
 8000e14:	f001 fbaa 	bl	800256c <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020400 	.word	0x40020400

08000e20 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e2a:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <nRF24_CSN_H+0x14>)
 8000e2c:	f001 fb9e 	bl	800256c <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020400 	.word	0x40020400

08000e38 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000e42:	f107 020f 	add.w	r2, r7, #15
 8000e46:	1df9      	adds	r1, r7, #7
 8000e48:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <nRF24_LL_RW+0x34>)
 8000e52:	f003 fab0 	bl	80043b6 <HAL_SPI_TransmitReceive>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000e5c:	f7ff feb4 	bl	8000bc8 <Error_Handler>
    };
    return result;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000160 	.word	0x20000160

08000e70 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000e7a:	f7ff ffc5 	bl	8000e08 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 031f 	and.w	r3, r3, #31
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffd6 	bl	8000e38 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000e8c:	20ff      	movs	r0, #255	@ 0xff
 8000e8e:	f7ff ffd3 	bl	8000e38 <nRF24_LL_RW>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000e96:	f7ff ffc3 	bl	8000e20 <nRF24_CSN_H>

	return value;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000eb4:	f7ff ffa8 	bl	8000e08 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b1f      	cmp	r3, #31
 8000ebc:	d810      	bhi.n	8000ee0 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	f003 031f 	and.w	r3, r3, #31
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffb1 	bl	8000e38 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffad 	bl	8000e38 <nRF24_LL_RW>
 8000ede:	e013      	b.n	8000f08 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffa8 	bl	8000e38 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2be1      	cmp	r3, #225	@ 0xe1
 8000eec:	d00c      	beq.n	8000f08 <nRF24_WriteReg+0x64>
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2be2      	cmp	r3, #226	@ 0xe2
 8000ef2:	d009      	beq.n	8000f08 <nRF24_WriteReg+0x64>
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2be3      	cmp	r3, #227	@ 0xe3
 8000ef8:	d006      	beq.n	8000f08 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2bff      	cmp	r3, #255	@ 0xff
 8000efe:	d003      	beq.n	8000f08 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff98 	bl	8000e38 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000f08:	f7ff ff8a 	bl	8000e20 <nRF24_CSN_H>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000f24:	f7ff ff70 	bl	8000e08 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff84 	bl	8000e38 <nRF24_LL_RW>
	while (count--) {
 8000f30:	e007      	b.n	8000f42 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000f32:	683c      	ldr	r4, [r7, #0]
 8000f34:	1c63      	adds	r3, r4, #1
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	20ff      	movs	r0, #255	@ 0xff
 8000f3a:	f7ff ff7d 	bl	8000e38 <nRF24_LL_RW>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	1e5a      	subs	r2, r3, #1
 8000f46:	71ba      	strb	r2, [r7, #6]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f2      	bne.n	8000f32 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000f4c:	f7ff ff68 	bl	8000e20 <nRF24_CSN_H>
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000f68:	f7ff ff4e 	bl	8000e08 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff62 	bl	8000e38 <nRF24_LL_RW>
	while (count--) {
 8000f74:	e006      	b.n	8000f84 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	603a      	str	r2, [r7, #0]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff5a 	bl	8000e38 <nRF24_LL_RW>
	while (count--) {
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	71ba      	strb	r2, [r7, #6]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f3      	bne.n	8000f76 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000f8e:	f7ff ff47 	bl	8000e20 <nRF24_CSN_H>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff ff7f 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000fa6:	213f      	movs	r1, #63	@ 0x3f
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff ff7b 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000fae:	2103      	movs	r1, #3
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f7ff ff77 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f7ff ff73 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	2004      	movs	r0, #4
 8000fc2:	f7ff ff6f 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f7ff ff6b 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000fce:	210e      	movs	r1, #14
 8000fd0:	2006      	movs	r0, #6
 8000fd2:	f7ff ff67 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2007      	movs	r0, #7
 8000fda:	f7ff ff63 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2011      	movs	r0, #17
 8000fe2:	f7ff ff5f 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2012      	movs	r0, #18
 8000fea:	f7ff ff5b 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2013      	movs	r0, #19
 8000ff2:	f7ff ff57 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2014      	movs	r0, #20
 8000ffa:	f7ff ff53 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2015      	movs	r0, #21
 8001002:	f7ff ff4f 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001006:	2100      	movs	r1, #0
 8001008:	2016      	movs	r0, #22
 800100a:	f7ff ff4b 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800100e:	2100      	movs	r1, #0
 8001010:	201c      	movs	r0, #28
 8001012:	f7ff ff47 	bl	8000ea4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	201d      	movs	r0, #29
 800101a:	f7ff ff43 	bl	8000ea4 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800101e:	f000 f9cd 	bl	80013bc <nRF24_FlushRX>
	nRF24_FlushTX();
 8001022:	f000 f9c3 	bl	80013ac <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8001026:	f000 f9d1 	bl	80013cc <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800102a:	f7ff fef9 	bl	8000e20 <nRF24_CSN_H>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <nRF24_Check+0x58>)
 800103c:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800103e:	2205      	movs	r2, #5
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	2030      	movs	r0, #48	@ 0x30
 8001044:	f7ff ff88 	bl	8000f58 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8001048:	463b      	mov	r3, r7
 800104a:	2205      	movs	r2, #5
 800104c:	4619      	mov	r1, r3
 800104e:	2010      	movs	r0, #16
 8001050:	f7ff ff60 	bl	8000f14 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e00f      	b.n	800107a <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3310      	adds	r3, #16
 800105e:	443b      	add	r3, r7
 8001060:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c59      	adds	r1, r3, #1
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <nRF24_Check+0x40>
 8001070:	2300      	movs	r3, #0
 8001072:	e006      	b.n	8001082 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d9ec      	bls.n	800105a <nRF24_Check+0x26>
	}

	return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08009148 	.word	0x08009148

08001090 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fee8 	bl	8000e70 <nRF24_ReadReg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d104      	bne.n	80010b4 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e003      	b.n	80010bc <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4619      	mov	r1, r3
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff feef 	bl	8000ea4 <nRF24_WriteReg>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fec9 	bl	8000e70 <nRF24_ReadReg>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f023 0301 	bic.w	r3, r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4619      	mov	r1, r3
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fece 	bl	8000ea4 <nRF24_WriteReg>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fea8 	bl	8000e70 <nRF24_ReadReg>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	f023 030c 	bic.w	r3, r3, #12
 800112a:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	b25a      	sxtb	r2, r3
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4313      	orrs	r3, r2
 800113c:	b25b      	sxtb	r3, r3
 800113e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fead 	bl	8000ea4 <nRF24_WriteReg>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4619      	mov	r1, r3
 8001160:	2005      	movs	r0, #5
 8001162:	f7ff fe9f 	bl	8000ea4 <nRF24_WriteReg>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3b02      	subs	r3, #2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
 8001180:	2003      	movs	r0, #3
 8001182:	f7ff fe8f 	bl	8000ea4 <nRF24_WriteReg>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d00a      	beq.n	80011b8 <nRF24_SetAddr+0x28>
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	dc36      	bgt.n	8001214 <nRF24_SetAddr+0x84>
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	dc02      	bgt.n	80011b0 <nRF24_SetAddr+0x20>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da04      	bge.n	80011b8 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 80011ae:	e031      	b.n	8001214 <nRF24_SetAddr+0x84>
 80011b0:	3b02      	subs	r3, #2
	switch (pipe) {
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d82e      	bhi.n	8001214 <nRF24_SetAddr+0x84>
 80011b6:	e023      	b.n	8001200 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80011b8:	2003      	movs	r0, #3
 80011ba:	f7ff fe59 	bl	8000e70 <nRF24_ReadReg>
 80011be:	4603      	mov	r3, r0
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80011cc:	f7ff fe1c 	bl	8000e08 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <nRF24_SetAddr+0x90>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe2b 	bl	8000e38 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	603a      	str	r2, [r7, #0]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe24 	bl	8000e38 <nRF24_LL_RW>
			} while (addr_width--);
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	73fa      	strb	r2, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f3      	bne.n	80011e2 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 80011fa:	f7ff fe11 	bl	8000e20 <nRF24_CSN_H>
			break;
 80011fe:	e00a      	b.n	8001216 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <nRF24_SetAddr+0x90>)
 8001204:	5cd2      	ldrb	r2, [r2, r3]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4610      	mov	r0, r2
 800120e:	f7ff fe49 	bl	8000ea4 <nRF24_WriteReg>
			break;
 8001212:	e000      	b.n	8001216 <nRF24_SetAddr+0x86>
			break;
 8001214:	bf00      	nop
	}
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	080091a8 	.word	0x080091a8

08001224 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800122e:	2006      	movs	r0, #6
 8001230:	f7ff fe1e 	bl	8000e70 <nRF24_ReadReg>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	f023 0306 	bic.w	r3, r3, #6
 800123e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4313      	orrs	r3, r2
 8001246:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4619      	mov	r1, r3
 800124c:	2006      	movs	r0, #6
 800124e:	f7ff fe29 	bl	8000ea4 <nRF24_WriteReg>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001264:	2006      	movs	r0, #6
 8001266:	f7ff fe03 	bl	8000e70 <nRF24_ReadReg>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001274:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4313      	orrs	r3, r2
 800127c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4619      	mov	r1, r3
 8001282:	2006      	movs	r0, #6
 8001284:	f7ff fe0e 	bl	8000ea4 <nRF24_WriteReg>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	460b      	mov	r3, r1
 800129c:	71bb      	strb	r3, [r7, #6]
 800129e:	4613      	mov	r3, r2
 80012a0:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff fde4 	bl	8000e70 <nRF24_ReadReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b25a      	sxtb	r2, r3
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012c0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4619      	mov	r1, r3
 80012c6:	2002      	movs	r0, #2
 80012c8:	f7ff fdec 	bl	8000ea4 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <nRF24_SetRXPipe+0xa4>)
 80012d0:	5cd2      	ldrb	r2, [r2, r3]
 80012d2:	797b      	ldrb	r3, [r7, #5]
 80012d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f7ff fde1 	bl	8000ea4 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fdc4 	bl	8000e70 <nRF24_ReadReg>
 80012e8:	4603      	mov	r3, r0
 80012ea:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10a      	bne.n	8001308 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2201      	movs	r2, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	4313      	orrs	r3, r2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e00b      	b.n	8001320 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2201      	movs	r2, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	b25a      	sxtb	r2, r3
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4013      	ands	r3, r2
 800131c:	b25b      	sxtb	r3, r3
 800131e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	4619      	mov	r1, r3
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fdbd 	bl	8000ea4 <nRF24_WriteReg>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	080091a0 	.word	0x080091a0

08001338 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d904      	bls.n	8001352 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8001348:	2100      	movs	r1, #0
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fdaa 	bl	8000ea4 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8001350:	e015      	b.n	800137e <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fd8c 	bl	8000e70 <nRF24_ReadReg>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2201      	movs	r2, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	b25a      	sxtb	r2, r3
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4013      	ands	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	4619      	mov	r1, r3
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fd93 	bl	8000ea4 <nRF24_WriteReg>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800138a:	2007      	movs	r0, #7
 800138c:	f7ff fd70 	bl	8000e70 <nRF24_ReadReg>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}

08001396 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800139a:	2017      	movs	r0, #23
 800139c:	f7ff fd68 	bl	8000e70 <nRF24_ReadReg>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	b2db      	uxtb	r3, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}

080013ac <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80013b0:	21ff      	movs	r1, #255	@ 0xff
 80013b2:	20e1      	movs	r0, #225	@ 0xe1
 80013b4:	f7ff fd76 	bl	8000ea4 <nRF24_WriteReg>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80013c0:	21ff      	movs	r1, #255	@ 0xff
 80013c2:	20e2      	movs	r0, #226	@ 0xe2
 80013c4:	f7ff fd6e 	bl	8000ea4 <nRF24_WriteReg>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80013d2:	2007      	movs	r0, #7
 80013d4:	f7ff fd4c 	bl	8000e70 <nRF24_ReadReg>
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80013e2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4619      	mov	r1, r3
 80013e8:	2007      	movs	r0, #7
 80013ea:	f7ff fd5b 	bl	8000ea4 <nRF24_WriteReg>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	461a      	mov	r2, r3
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	20a0      	movs	r0, #160	@ 0xa0
 800140a:	f7ff fda5 	bl	8000f58 <nRF24_WriteMBReg>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800141c:	f7ff fcf4 	bl	8000e08 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8001420:	2060      	movs	r0, #96	@ 0x60
 8001422:	f7ff fd09 	bl	8000e38 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001426:	20ff      	movs	r0, #255	@ 0xff
 8001428:	f7ff fd06 	bl	8000e38 <nRF24_LL_RW>
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8001430:	f7ff fcf6 	bl	8000e20 <nRF24_CSN_H>

	return value;
 8001434:	79fb      	ldrb	r3, [r7, #7]

}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800144e:	2007      	movs	r0, #7
 8001450:	f7ff fd0e 	bl	8000e70 <nRF24_ReadReg>
 8001454:	4603      	mov	r3, r0
 8001456:	105b      	asrs	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d829      	bhi.n	80014ba <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00f      	beq.n	800148c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 800146c:	f7ff ffd3 	bl	8001416 <nRF24_GetRxDplPayloadWidth>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b20      	cmp	r3, #32
 800147e:	d90f      	bls.n	80014a0 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001486:	f7ff ff99 	bl	80013bc <nRF24_FlushRX>
 800148a:	e009      	b.n	80014a0 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <nRF24_ReadPayloadGeneric+0x8c>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fcec 	bl	8000e70 <nRF24_ReadReg>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68f9      	ldr	r1, [r7, #12]
 80014b0:	2061      	movs	r0, #97	@ 0x61
 80014b2:	f7ff fd2f 	bl	8000f14 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	e003      	b.n	80014c2 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80014c0:	23ff      	movs	r3, #255	@ 0xff
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	080091a0 	.word	0x080091a0

080014d0 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 80014da:	2200      	movs	r2, #0
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffae 	bl	8001440 <nRF24_ReadPayloadGeneric>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a24      	ldr	r2, [pc, #144]	@ (80015f0 <HAL_ADC_MspInit+0xb0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d141      	bne.n	80015e6 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a22      	ldr	r2, [pc, #136]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_ADC_MspInit+0xb4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015b6:	23ff      	movs	r3, #255	@ 0xff
 80015b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <HAL_ADC_MspInit+0xb8>)
 80015ca:	f000 fe4b 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ce:	2303      	movs	r3, #3
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4806      	ldr	r0, [pc, #24]	@ (80015fc <HAL_ADC_MspInit+0xbc>)
 80015e2:	f000 fe3f 	bl	8002264 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012000 	.word	0x40012000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_SPI_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 800162c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_SPI_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800165a:	2338      	movs	r3, #56	@ 0x38
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <HAL_SPI_MspInit+0x8c>)
 8001676:	f000 fdf5 	bl	8002264 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	@ 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40013000 	.word	0x40013000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <HAL_TIM_PWM_MspInit+0x8c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10e      	bne.n	80016c0 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016be:	e026      	b.n	800170e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c8:	d10e      	bne.n	80016e8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
}
 80016e6:	e012      	b.n	800170e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_TIM_PWM_MspInit+0x94>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10d      	bne.n	800170e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_TIM_PWM_MspInit+0x90>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40010000 	.word	0x40010000
 8001720:	40023800 	.word	0x40023800
 8001724:	40000800 	.word	0x40000800

08001728 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a15      	ldr	r2, [pc, #84]	@ (800178c <HAL_TIM_Base_MspInit+0x64>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10e      	bne.n	8001758 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_TIM_Base_MspInit+0x68>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	4a13      	ldr	r2, [pc, #76]	@ (8001790 <HAL_TIM_Base_MspInit+0x68>)
 8001744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001748:	6453      	str	r3, [r2, #68]	@ 0x44
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_TIM_Base_MspInit+0x68>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001756:	e012      	b.n	800177e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_TIM_Base_MspInit+0x6c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10d      	bne.n	800177e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_TIM_Base_MspInit+0x68>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <HAL_TIM_Base_MspInit+0x68>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <HAL_TIM_Base_MspInit+0x68>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40014400 	.word	0x40014400
 8001790:	40023800 	.word	0x40023800
 8001794:	40014800 	.word	0x40014800

08001798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001928 <HAL_TIM_MspPostInit+0x190>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11f      	bne.n	80017fa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a5a      	ldr	r2, [pc, #360]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_B_Pin;
 80017d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	484f      	ldr	r0, [pc, #316]	@ (8001930 <HAL_TIM_MspPostInit+0x198>)
 80017f4:	f000 fd36 	bl	8002264 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80017f8:	e091      	b.n	800191e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001802:	d11f      	bne.n	8001844 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	4b48      	ldr	r3, [pc, #288]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a47      	ldr	r2, [pc, #284]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b45      	ldr	r3, [pc, #276]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_M_Pin;
 8001820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001832:	2301      	movs	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_M_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	483c      	ldr	r0, [pc, #240]	@ (8001930 <HAL_TIM_MspPostInit+0x198>)
 800183e:	f000 fd11 	bl	8002264 <HAL_GPIO_Init>
}
 8001842:	e06c      	b.n	800191e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3a      	ldr	r2, [pc, #232]	@ (8001934 <HAL_TIM_MspPostInit+0x19c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11e      	bne.n	800188c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a35      	ldr	r2, [pc, #212]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b33      	ldr	r3, [pc, #204]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800186a:	2340      	movs	r3, #64	@ 0x40
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800187a:	2302      	movs	r3, #2
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	482c      	ldr	r0, [pc, #176]	@ (8001938 <HAL_TIM_MspPostInit+0x1a0>)
 8001886:	f000 fced 	bl	8002264 <HAL_GPIO_Init>
}
 800188a:	e048      	b.n	800191e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a2a      	ldr	r2, [pc, #168]	@ (800193c <HAL_TIM_MspPostInit+0x1a4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11f      	bne.n	80018d6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a23      	ldr	r2, [pc, #140]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	481a      	ldr	r0, [pc, #104]	@ (8001938 <HAL_TIM_MspPostInit+0x1a0>)
 80018d0:	f000 fcc8 	bl	8002264 <HAL_GPIO_Init>
}
 80018d4:	e023      	b.n	800191e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_TIM_MspPostInit+0x1a8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d11e      	bne.n	800191e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f0:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_TIM_MspPostInit+0x194>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_H_Pin;
 80018fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800190e:	2303      	movs	r3, #3
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_H_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	4807      	ldr	r0, [pc, #28]	@ (8001938 <HAL_TIM_MspPostInit+0x1a0>)
 800191a:	f000 fca3 	bl	8002264 <HAL_GPIO_Init>
}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	@ 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40010000 	.word	0x40010000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000
 8001934:	40000800 	.word	0x40000800
 8001938:	40020400 	.word	0x40020400
 800193c:	40014400 	.word	0x40014400
 8001940:	40014800 	.word	0x40014800

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f000 f89b 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <OTG_FS_IRQHandler+0x10>)
 80019aa:	f000 ff3c 	bl	8002826 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000182c 	.word	0x2000182c

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e0:	f7ff ffea 	bl	80019b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f007 fb5d 	bl	80090c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7fe fd79 	bl	8000504 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001a20:	080091d0 	.word	0x080091d0
  ldr r2, =_sbss
 8001a24:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001a28:	20001f30 	.word	0x20001f30

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 fbc1 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fd44 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fbd9 	bl	800224a <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 fba1 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000348 	.word	0x20000348

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000348 	.word	0x20000348

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e033      	b.n	8001bda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fce0 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ba2:	f023 0302 	bic.w	r3, r3, #2
 8001ba6:	f043 0202 	orr.w	r2, r3, #2
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f94a 	bl	8001e48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bca:	e001      	b.n	8001bd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1c>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e113      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x244>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d925      	bls.n	8001c5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68d9      	ldr	r1, [r3, #12]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	3b1e      	subs	r3, #30
 8001c26:	2207      	movs	r2, #7
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	400a      	ands	r2, r1
 8001c34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68d9      	ldr	r1, [r3, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	4603      	mov	r3, r0
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4403      	add	r3, r0
 8001c4e:	3b1e      	subs	r3, #30
 8001c50:	409a      	lsls	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	e022      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6919      	ldr	r1, [r3, #16]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	2207      	movs	r2, #7
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4403      	add	r3, r0
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d824      	bhi.n	8001cf4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b05      	subs	r3, #5
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b05      	subs	r3, #5
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cf2:	e04c      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d824      	bhi.n	8001d46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b23      	subs	r3, #35	@ 0x23
 8001d0e:	221f      	movs	r2, #31
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43da      	mvns	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b23      	subs	r3, #35	@ 0x23
 8001d38:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d44:	e023      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	3b41      	subs	r3, #65	@ 0x41
 8001d58:	221f      	movs	r2, #31
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	400a      	ands	r2, r1
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b41      	subs	r3, #65	@ 0x41
 8001d82:	fa00 f203 	lsl.w	r2, r0, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <HAL_ADC_ConfigChannel+0x250>)
 8001d90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <HAL_ADC_ConfigChannel+0x254>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10f      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d8>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_ADC_ConfigChannel+0x254>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12b      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x23a>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1c      	ldr	r2, [pc, #112]	@ (8001e3c <HAL_ADC_ConfigChannel+0x258>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b11      	cmp	r3, #17
 8001dd6:	d122      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <HAL_ADC_ConfigChannel+0x258>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d111      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_ADC_ConfigChannel+0x25c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	@ (8001e44 <HAL_ADC_ConfigChannel+0x260>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9a      	lsrs	r2, r3, #18
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40012300 	.word	0x40012300
 8001e38:	40012000 	.word	0x40012000
 8001e3c:	10000012 	.word	0x10000012
 8001e40:	20000000 	.word	0x20000000
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e50:	4b79      	ldr	r3, [pc, #484]	@ (8002038 <ADC_Init+0x1f0>)
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	4a58      	ldr	r2, [pc, #352]	@ (800203c <ADC_Init+0x1f4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e00f      	b.n	8001f46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0202 	bic.w	r2, r2, #2
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	005a      	lsls	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	035a      	lsls	r2, r3, #13
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	e007      	b.n	8001fbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	051a      	lsls	r2, r3, #20
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ffe:	025a      	lsls	r2, r3, #9
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	029a      	lsls	r2, r3, #10
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40012300 	.word	0x40012300
 800203c:	0f000001 	.word	0x0f000001

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	@ (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	@ (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	@ (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff3e 	bl	8002088 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff31 	bl	80020a4 <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	@ 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e159      	b.n	8002534 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	f040 8148 	bne.w	800252e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d005      	beq.n	80022b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d130      	bne.n	8002318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0201 	and.w	r2, r3, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b03      	cmp	r3, #3
 8002322:	d017      	beq.n	8002354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d123      	bne.n	80023a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	08da      	lsrs	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a2 	beq.w	800252e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b57      	ldr	r3, [pc, #348]	@ (800254c <HAL_GPIO_Init+0x2e8>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	4a56      	ldr	r2, [pc, #344]	@ (800254c <HAL_GPIO_Init+0x2e8>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fa:	4b54      	ldr	r3, [pc, #336]	@ (800254c <HAL_GPIO_Init+0x2e8>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002406:	4a52      	ldr	r2, [pc, #328]	@ (8002550 <HAL_GPIO_Init+0x2ec>)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a49      	ldr	r2, [pc, #292]	@ (8002554 <HAL_GPIO_Init+0x2f0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x202>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a48      	ldr	r2, [pc, #288]	@ (8002558 <HAL_GPIO_Init+0x2f4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x1fe>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a47      	ldr	r2, [pc, #284]	@ (800255c <HAL_GPIO_Init+0x2f8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x1fa>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a46      	ldr	r2, [pc, #280]	@ (8002560 <HAL_GPIO_Init+0x2fc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x1f6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a45      	ldr	r2, [pc, #276]	@ (8002564 <HAL_GPIO_Init+0x300>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x1f2>
 8002452:	2304      	movs	r3, #4
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x204>
 8002456:	2307      	movs	r3, #7
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x204>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x204>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x204>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x204>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	@ (8002550 <HAL_GPIO_Init+0x2ec>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b38      	ldr	r3, [pc, #224]	@ (8002568 <HAL_GPIO_Init+0x304>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002568 <HAL_GPIO_Init+0x304>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <HAL_GPIO_Init+0x304>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <HAL_GPIO_Init+0x304>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <HAL_GPIO_Init+0x304>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002568 <HAL_GPIO_Init+0x304>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_GPIO_Init+0x304>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a0f      	ldr	r2, [pc, #60]	@ (8002568 <HAL_GPIO_Init+0x304>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f aea2 	bls.w	8002280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40013c00 	.word	0x40013c00

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002588:	e003      	b.n	8002592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	619a      	str	r2, [r3, #24]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af02      	add	r7, sp, #8
 80025a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e101      	b.n	80027b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f006 fa6a 	bl	8008aa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025de:	d102      	bne.n	80025e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 feb7 	bl	800535e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7c1a      	ldrb	r2, [r3, #16]
 80025f8:	f88d 2000 	strb.w	r2, [sp]
 80025fc:	3304      	adds	r3, #4
 80025fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002600:	f002 fd96 	bl	8005130 <USB_CoreInit>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0ce      	b.n	80027b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f002 feaf 	bl	8005380 <USB_SetCurrentMode>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0bf      	b.n	80027b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e04a      	b.n	80026d0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3315      	adds	r3, #21
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3314      	adds	r3, #20
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	b298      	uxth	r0, r3
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	332e      	adds	r3, #46	@ 0x2e
 8002676:	4602      	mov	r2, r0
 8002678:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3318      	adds	r3, #24
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	331c      	adds	r3, #28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3320      	adds	r3, #32
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3324      	adds	r3, #36	@ 0x24
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3301      	adds	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3af      	bcc.n	800263a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e044      	b.n	800276a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	791b      	ldrb	r3, [r3, #4]
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3b5      	bcc.n	80026e0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7c1a      	ldrb	r2, [r3, #16]
 800277c:	f88d 2000 	strb.w	r2, [sp]
 8002780:	3304      	adds	r3, #4
 8002782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002784:	f002 fe48 	bl	8005418 <USB_DevInit>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00c      	b.n	80027b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fe92 	bl	80064d6 <USB_DevDisconnect>

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_PCD_Start+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e022      	b.n	800281e <HAL_PCD_Start+0x62>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fd99 	bl	800533c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fe40 	bl	8006494 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002826:	b590      	push	{r4, r7, lr}
 8002828:	b08d      	sub	sp, #52	@ 0x34
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fefe 	bl	800663e <USB_GetMode>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 848c 	bne.w	8003162 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f003 fe62 	bl	8006518 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8482 	beq.w	8003160 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fe4f 	bl	8006518 <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d107      	bne.n	8002894 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f002 0202 	and.w	r2, r2, #2
 8002892:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f003 fe3d 	bl	8006518 <USB_ReadInterrupts>
 800289e:	4603      	mov	r3, r0
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d161      	bne.n	800296c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0210 	bic.w	r2, r2, #16
 80028b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028e2:	d124      	bne.n	800292e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d035      	beq.n	800295c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028fe:	b29b      	uxth	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	6a38      	ldr	r0, [r7, #32]
 8002904:	f003 fc74 	bl	80061f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002914:	441a      	add	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002926:	441a      	add	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	e016      	b.n	800295c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002934:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002938:	d110      	bne.n	800295c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002940:	2208      	movs	r2, #8
 8002942:	4619      	mov	r1, r3
 8002944:	6a38      	ldr	r0, [r7, #32]
 8002946:	f003 fc53 	bl	80061f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002956:	441a      	add	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0210 	orr.w	r2, r2, #16
 800296a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fdd1 	bl	8006518 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002980:	f040 80a7 	bne.w	8002ad2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fdd6 	bl	800653e <USB_ReadDevAllOutEpInterrupt>
 8002992:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002994:	e099      	b.n	8002aca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 808e 	beq.w	8002abe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fdfa 	bl	80065a6 <USB_ReadDevOutEPInterrupt>
 80029b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ca:	461a      	mov	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fea4 	bl	8003720 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ee:	461a      	mov	r2, r3
 80029f0:	2308      	movs	r3, #8
 80029f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 ff7a 	bl	80038f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a12:	461a      	mov	r2, r3
 8002a14:	2310      	movs	r3, #16
 8002a16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d030      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2a:	2b80      	cmp	r3, #128	@ 0x80
 8002a2c:	d109      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	78db      	ldrb	r3, [r3, #3]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d108      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2200      	movs	r2, #0
 8002a64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f006 f915 	bl	8008c9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2302      	movs	r3, #2
 8002a82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002abc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f af62 	bne.w	8002996 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fd1e 	bl	8006518 <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ae6:	f040 80db 	bne.w	8002ca0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fd3f 	bl	8006572 <USB_ReadDevAllInEpInterrupt>
 8002af4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002afa:	e0cd      	b.n	8002c98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c2 	beq.w	8002c8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fd65 	bl	80065e2 <USB_ReadDevInEPInterrupt>
 8002b18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d057      	beq.n	8002bd4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b44:	4013      	ands	r3, r2
 8002b46:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b54:	461a      	mov	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	799b      	ldrb	r3, [r3, #6]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d132      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3320      	adds	r3, #32
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	331c      	adds	r3, #28
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4419      	add	r1, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4403      	add	r3, r0
 8002b96:	3320      	adds	r3, #32
 8002b98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x3a2>
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3324      	adds	r3, #36	@ 0x24
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	f003 fd6c 	bl	80066a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f005 ffe9 	bl	8008ba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bea:	461a      	mov	r2, r3
 8002bec:	2308      	movs	r3, #8
 8002bee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c06:	461a      	mov	r2, r3
 8002c08:	2310      	movs	r3, #16
 8002c0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c22:	461a      	mov	r2, r3
 8002c24:	2340      	movs	r3, #64	@ 0x40
 8002c26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d023      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c34:	6a38      	ldr	r0, [r7, #32]
 8002c36:	f002 fd53 	bl	80056e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	3310      	adds	r3, #16
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	78db      	ldrb	r3, [r3, #3]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d108      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f006 f82c 	bl	8008cc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c74:	461a      	mov	r2, r3
 8002c76:	2302      	movs	r3, #2
 8002c78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fcbd 	bl	8003606 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	3301      	adds	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f47f af2e 	bne.w	8002afc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f003 fc37 	bl	8006518 <USB_ReadInterrupts>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cb4:	d122      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fea4 	bl	8003a2c <HAL_PCDEx_LPM_Callback>
 8002ce4:	e002      	b.n	8002cec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f005 ffca 	bl	8008c80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fc09 	bl	8006518 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d10:	d112      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f005 ff86 	bl	8008c34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d36:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fbeb 	bl	8006518 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4c:	f040 80b7 	bne.w	8002ebe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fcb8 	bl	80056e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d74:	e046      	b.n	8002e04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d82:	461a      	mov	r2, r3
 8002d84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002da4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002da8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ddc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dee:	0151      	lsls	r1, r2, #5
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	440a      	add	r2, r1
 8002df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002df8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dfc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	3301      	adds	r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d3b2      	bcc.n	8002d76 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7bdb      	ldrb	r3, [r3, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d016      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3c:	f043 030b 	orr.w	r3, r3, #11
 8002e40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e52:	f043 030b 	orr.w	r3, r3, #11
 8002e56:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e58:	e015      	b.n	8002e86 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e6c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e80:	f043 030b 	orr.w	r3, r3, #11
 8002e84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e94:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f003 fbf9 	bl	80066a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fb28 	bl	8006518 <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed2:	d123      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fbbe 	bl	800665a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fc75 	bl	80057d2 <USB_GetDevSpeed>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681c      	ldr	r4, [r3, #0]
 8002ef4:	f001 f9ca 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8002ef8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002efe:	461a      	mov	r2, r3
 8002f00:	4620      	mov	r0, r4
 8002f02:	f002 f979 	bl	80051f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f005 fe75 	bl	8008bf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 faf9 	bl	8006518 <USB_ReadInterrupts>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d10a      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f005 fe52 	bl	8008bda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f002 0208 	and.w	r2, r2, #8
 8002f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fae4 	bl	8006518 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b80      	cmp	r3, #128	@ 0x80
 8002f58:	d123      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f66:	2301      	movs	r3, #1
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6a:	e014      	b.n	8002f96 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb0a 	bl	80035a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	3301      	adds	r3, #1
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	791b      	ldrb	r3, [r3, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d3e4      	bcc.n	8002f6c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fab6 	bl	8006518 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb6:	d13c      	bne.n	8003032 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb8:	2301      	movs	r3, #1
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbc:	e02b      	b.n	8003016 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3318      	adds	r3, #24
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d115      	bne.n	8003010 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fe4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da12      	bge.n	8003010 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3317      	adds	r3, #23
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 faca 	bl	80035a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	3301      	adds	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	791b      	ldrb	r3, [r3, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	4293      	cmp	r3, r2
 8003020:	d3cd      	bcc.n	8002fbe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fa6e 	bl	8006518 <USB_ReadInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003046:	d156      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
 800304c:	e045      	b.n	80030da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d12e      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003076:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003078:	2b00      	cmp	r3, #0
 800307a:	da2b      	bge.n	80030d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003088:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800308c:	429a      	cmp	r2, r3
 800308e:	d121      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030d0:	6053      	str	r3, [r2, #4]
            break;
 80030d2:	e008      	b.n	80030e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	3301      	adds	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	791b      	ldrb	r3, [r3, #4]
 80030de:	461a      	mov	r2, r3
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d3b3      	bcc.n	800304e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fa0c 	bl	8006518 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310a:	d10a      	bne.n	8003122 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f005 fde9 	bl	8008ce4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 f9f6 	bl	8006518 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d115      	bne.n	8003162 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f005 fdd9 	bl	8008d00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e000      	b.n	8003162 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003160:	bf00      	nop
    }
  }
}
 8003162:	3734      	adds	r7, #52	@ 0x34
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_PCD_SetAddress+0x1a>
 800317e:	2302      	movs	r3, #2
 8003180:	e012      	b.n	80031a8 <HAL_PCD_SetAddress+0x40>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f003 f955 	bl	8006448 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	70fb      	strb	r3, [r7, #3]
 80031c2:	460b      	mov	r3, r1
 80031c4:	803b      	strh	r3, [r7, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	da0f      	bge.n	80031f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	f003 020f 	and.w	r2, r3, #15
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3310      	adds	r3, #16
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	705a      	strb	r2, [r3, #1]
 80031f4:	e00f      	b.n	8003216 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003222:	883b      	ldrh	r3, [r7, #0]
 8003224:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	78ba      	ldrb	r2, [r7, #2]
 8003230:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003244:	78bb      	ldrb	r3, [r7, #2]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d102      	bne.n	8003250 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_PCD_EP_Open+0xae>
 800325a:	2302      	movs	r3, #2
 800325c:	e00e      	b.n	800327c <HAL_PCD_EP_Open+0xcc>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	f002 fad5 	bl	800581c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800327a:	7afb      	ldrb	r3, [r7, #11]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003294:	2b00      	cmp	r3, #0
 8003296:	da0f      	bge.n	80032b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	3310      	adds	r3, #16
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	705a      	strb	r2, [r3, #1]
 80032b6:	e00f      	b.n	80032d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_PCD_EP_Close+0x6e>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e00e      	b.n	8003310 <HAL_PCD_EP_Close+0x8c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	4618      	mov	r0, r3
 8003302:	f002 fb13 	bl	800592c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	460b      	mov	r3, r1
 8003326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003328:	7afb      	ldrb	r3, [r7, #11]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2200      	movs	r2, #0
 8003358:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	b2da      	uxtb	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	799b      	ldrb	r3, [r3, #6]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	799b      	ldrb	r3, [r3, #6]
 800337c:	461a      	mov	r2, r3
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	f002 fbb0 	bl	8005ae4 <USB_EPStartXfer>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 020f 	and.w	r2, r3, #15
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033b0:	681b      	ldr	r3, [r3, #0]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	460b      	mov	r3, r1
 80033cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	3310      	adds	r3, #16
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4413      	add	r3, r2
 80033e2:	3304      	adds	r3, #4
 80033e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2201      	movs	r2, #1
 80033fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	799b      	ldrb	r3, [r3, #6]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	799b      	ldrb	r3, [r3, #6]
 8003420:	461a      	mov	r2, r3
 8003422:	6979      	ldr	r1, [r7, #20]
 8003424:	f002 fb5e 	bl	8005ae4 <USB_EPStartXfer>

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	7912      	ldrb	r2, [r2, #4]
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e04f      	b.n	80034f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003454:	2b00      	cmp	r3, #0
 8003456:	da0f      	bge.n	8003478 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 020f 	and.w	r2, r3, #15
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	3310      	adds	r3, #16
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	705a      	strb	r2, [r3, #1]
 8003476:	e00d      	b.n	8003494 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_PCD_EP_SetStall+0x82>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e01d      	b.n	80034f0 <HAL_PCD_EP_SetStall+0xbe>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 feec 	bl	80062a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7999      	ldrb	r1, [r3, #6]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034e0:	461a      	mov	r2, r3
 80034e2:	f003 f8dd 	bl	80066a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	7912      	ldrb	r2, [r2, #4]
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e042      	b.n	800359c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da0f      	bge.n	800353e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	3310      	adds	r3, #16
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	705a      	strb	r2, [r3, #1]
 800353c:	e00f      	b.n	800355e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_PCD_EP_ClrStall+0x86>
 800357a:	2302      	movs	r3, #2
 800357c:	e00e      	b.n	800359c <HAL_PCD_EP_ClrStall+0xa4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	4618      	mov	r0, r3
 800358e:	f002 fef5 	bl	800637c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da0c      	bge.n	80035d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	3310      	adds	r3, #16
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e00c      	b.n	80035ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 fd14 	bl	8006020 <USB_EPStopXfer>
 80035f8:	4603      	mov	r3, r0
 80035fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08a      	sub	sp, #40	@ 0x28
 800360a:	af02      	add	r7, sp, #8
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	3310      	adds	r3, #16
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	3304      	adds	r3, #4
 800362c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d901      	bls.n	800363e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06b      	b.n	8003716 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	d902      	bls.n	800365a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3303      	adds	r3, #3
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003662:	e02a      	b.n	80036ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	429a      	cmp	r2, r3
 8003678:	d902      	bls.n	8003680 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3303      	adds	r3, #3
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68d9      	ldr	r1, [r3, #12]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4603      	mov	r3, r0
 800369c:	6978      	ldr	r0, [r7, #20]
 800369e:	f002 fd69 	bl	8006174 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	441a      	add	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d809      	bhi.n	80036e4 <PCD_WriteEmptyTxFifo+0xde>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d8:	429a      	cmp	r2, r3
 80036da:	d203      	bcs.n	80036e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1bf      	bne.n	8003664 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d811      	bhi.n	8003714 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	2201      	movs	r2, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	43db      	mvns	r3, r3
 800370a:	6939      	ldr	r1, [r7, #16]
 800370c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003710:	4013      	ands	r3, r2
 8003712:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	333c      	adds	r3, #60	@ 0x3c
 8003738:	3304      	adds	r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	799b      	ldrb	r3, [r3, #6]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d17b      	bne.n	800384e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4a61      	ldr	r2, [pc, #388]	@ (80038e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	f240 80b9 	bls.w	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80b3 	beq.w	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003782:	461a      	mov	r2, r3
 8003784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003788:	6093      	str	r3, [r2, #8]
 800378a:	e0a7      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2320      	movs	r3, #32
 80037a6:	6093      	str	r3, [r2, #8]
 80037a8:	e098      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 8093 	bne.w	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4a4b      	ldr	r2, [pc, #300]	@ (80038e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d90f      	bls.n	80037de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d4:	461a      	mov	r2, r3
 80037d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037da:	6093      	str	r3, [r2, #8]
 80037dc:	e07e      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	0159      	lsls	r1, r3, #5
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	440b      	add	r3, r1
 8003800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003828:	461a      	mov	r2, r3
 800382a:	2101      	movs	r1, #1
 800382c:	f002 ff38 	bl	80066a0 <USB_EP0_OutStart>
 8003830:	e006      	b.n	8003840 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	441a      	add	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f005 f992 	bl	8008b70 <HAL_PCD_DataOutStageCallback>
 800384c:	e046      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a26      	ldr	r2, [pc, #152]	@ (80038ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d124      	bne.n	80038a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003872:	6093      	str	r3, [r2, #8]
 8003874:	e032      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388c:	461a      	mov	r2, r3
 800388e:	2320      	movs	r3, #32
 8003890:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f005 f969 	bl	8008b70 <HAL_PCD_DataOutStageCallback>
 800389e:	e01d      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d114      	bne.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038c8:	461a      	mov	r2, r3
 80038ca:	2100      	movs	r1, #0
 80038cc:	f002 fee8 	bl	80066a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f005 f94a 	bl	8008b70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	4f54300a 	.word	0x4f54300a
 80038ec:	4f54310a 	.word	0x4f54310a

080038f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	333c      	adds	r3, #60	@ 0x3c
 8003908:	3304      	adds	r3, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a15      	ldr	r2, [pc, #84]	@ (8003978 <PCD_EP_OutSetupPacket_int+0x88>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d90e      	bls.n	8003944 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393c:	461a      	mov	r2, r3
 800393e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003942:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f005 f901 	bl	8008b4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a0a      	ldr	r2, [pc, #40]	@ (8003978 <PCD_EP_OutSetupPacket_int+0x88>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d90c      	bls.n	800396c <PCD_EP_OutSetupPacket_int+0x7c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	799b      	ldrb	r3, [r3, #6]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d108      	bne.n	800396c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003964:	461a      	mov	r2, r3
 8003966:	2101      	movs	r1, #1
 8003968:	f002 fe9a 	bl	80066a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	4f54300a 	.word	0x4f54300a

0800397c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
 8003988:	4613      	mov	r3, r2
 800398a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800399a:	883b      	ldrh	r3, [r7, #0]
 800399c:	0419      	lsls	r1, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039a8:	e028      	b.n	80039fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4413      	add	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e00d      	b.n	80039da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	3340      	adds	r3, #64	@ 0x40
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	3301      	adds	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	3b01      	subs	r3, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3ec      	bcc.n	80039be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039e4:	883b      	ldrh	r3, [r7, #0]
 80039e6:	0418      	lsls	r0, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4302      	orrs	r2, r0
 80039f4:	3340      	adds	r3, #64	@ 0x40
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e267      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a62:	4b88      	ldr	r3, [pc, #544]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4b85      	ldr	r3, [pc, #532]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b82      	ldr	r3, [pc, #520]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b7e      	ldr	r3, [pc, #504]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e242      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b76      	ldr	r3, [pc, #472]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b70      	ldr	r3, [pc, #448]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b6d      	ldr	r3, [pc, #436]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b69      	ldr	r3, [pc, #420]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd fffe 	bl	8001afc <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd fffa 	bl	8001afc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e207      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b5b      	ldr	r3, [pc, #364]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd ffea 	bl	8001afc <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd ffe6 	bl	8001afc <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1f3      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b51      	ldr	r3, [pc, #324]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b47      	ldr	r3, [pc, #284]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b44      	ldr	r3, [pc, #272]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b41      	ldr	r3, [pc, #260]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1c7      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4937      	ldr	r1, [pc, #220]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b34      	ldr	r3, [pc, #208]	@ (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd ff9f 	bl	8001afc <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fd ff9b 	bl	8001afc <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1a8      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b28      	ldr	r3, [pc, #160]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4925      	ldr	r1, [pc, #148]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd ff7e 	bl	8001afc <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd ff7a 	bl	8001afc <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e187      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b1b      	ldr	r3, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d036      	beq.n	8003c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b15      	ldr	r3, [pc, #84]	@ (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd ff5e 	bl	8001afc <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd ff5a 	bl	8001afc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e167      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
 8003c62:	e01b      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd ff47 	bl	8001afc <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fd ff43 	bl	8001afc <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d907      	bls.n	8003c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e150      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	42470000 	.word	0x42470000
 8003c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ea      	bne.n	8003c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8097 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b81      	ldr	r3, [pc, #516]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cca:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b77      	ldr	r3, [pc, #476]	@ (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce6:	4b74      	ldr	r3, [pc, #464]	@ (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a73      	ldr	r2, [pc, #460]	@ (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd ff03 	bl	8001afc <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd feff 	bl	8001afc <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e10c      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2ea>
 8003d20:	4b64      	ldr	r3, [pc, #400]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d24:	4a63      	ldr	r2, [pc, #396]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x30c>
 8003d36:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d42:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d46:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d50:	4b58      	ldr	r3, [pc, #352]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d54:	4a57      	ldr	r2, [pc, #348]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5c:	4b55      	ldr	r3, [pc, #340]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	4a54      	ldr	r2, [pc, #336]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fec4 	bl	8001afc <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fec0 	bl	8001afc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0cb      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	4b49      	ldr	r3, [pc, #292]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ee      	beq.n	8003d78 <HAL_RCC_OscConfig+0x334>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7fd feae 	bl	8001afc <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fd feaa 	bl	8001afc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0b5      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dba:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ee      	bne.n	8003da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	4a38      	ldr	r2, [pc, #224]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a1 	beq.w	8003f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de2:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d05c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d141      	bne.n	8003e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b31      	ldr	r3, [pc, #196]	@ (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fe7e 	bl	8001afc <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fd fe7a 	bl	8001afc <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e087      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	491b      	ldr	r1, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd fe53 	bl	8001afc <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd fe4f 	bl	8001afc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e05c      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x416>
 8003e78:	e054      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fe3c 	bl	8001afc <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fe38 	bl	8001afc <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e045      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x444>
 8003ea6:	e03d      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e038      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <HAL_RCC_OscConfig+0x4ec>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d028      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d121      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d11a      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0cc      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b68      	ldr	r3, [pc, #416]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d90c      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b65      	ldr	r3, [pc, #404]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b63      	ldr	r3, [pc, #396]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b8      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f88:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa0:	4b53      	ldr	r3, [pc, #332]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b50      	ldr	r3, [pc, #320]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	494d      	ldr	r1, [pc, #308]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d044      	beq.n	8004054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b47      	ldr	r3, [pc, #284]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d119      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e07f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e067      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b37      	ldr	r3, [pc, #220]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4934      	ldr	r1, [pc, #208]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004024:	f7fd fd6a 	bl	8001afc <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd fd66 	bl	8001afc <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e04f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2b      	ldr	r3, [pc, #172]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d20c      	bcs.n	800407c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b22      	ldr	r3, [pc, #136]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e032      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4916      	ldr	r1, [pc, #88]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	490e      	ldr	r1, [pc, #56]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ba:	f000 f821 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490a      	ldr	r1, [pc, #40]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040d6:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fcca 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00
 80040f0:	40023800 	.word	0x40023800
 80040f4:	080091b0 	.word	0x080091b0
 80040f8:	20000000 	.word	0x20000000
 80040fc:	20000004 	.word	0x20000004

08004100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b090      	sub	sp, #64	@ 0x40
 8004106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004118:	4b59      	ldr	r3, [pc, #356]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d00d      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x40>
 8004124:	2b08      	cmp	r3, #8
 8004126:	f200 80a1 	bhi.w	800426c <HAL_RCC_GetSysClockFreq+0x16c>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x34>
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x3a>
 8004132:	e09b      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b53      	ldr	r3, [pc, #332]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x184>)
 8004136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004138:	e09b      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413a:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x188>)
 800413c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800413e:	e098      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004140:	4b4f      	ldr	r3, [pc, #316]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004148:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414a:	4b4d      	ldr	r3, [pc, #308]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d028      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b4a      	ldr	r3, [pc, #296]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	2200      	movs	r2, #0
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	627a      	str	r2, [r7, #36]	@ 0x24
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004168:	2100      	movs	r1, #0
 800416a:	4b47      	ldr	r3, [pc, #284]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x188>)
 800416c:	fb03 f201 	mul.w	r2, r3, r1
 8004170:	2300      	movs	r3, #0
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	4413      	add	r3, r2
 8004178:	4a43      	ldr	r2, [pc, #268]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x188>)
 800417a:	fba0 1202 	umull	r1, r2, r0, r2
 800417e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004180:	460a      	mov	r2, r1
 8004182:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004186:	4413      	add	r3, r2
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800418a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418c:	2200      	movs	r2, #0
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	61fa      	str	r2, [r7, #28]
 8004192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800419a:	f7fc f81d 	bl	80001d8 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4613      	mov	r3, r2
 80041a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a6:	e053      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a8:	4b35      	ldr	r3, [pc, #212]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	2200      	movs	r2, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	617a      	str	r2, [r7, #20]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041ba:	f04f 0b00 	mov.w	fp, #0
 80041be:	4652      	mov	r2, sl
 80041c0:	465b      	mov	r3, fp
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f04f 0100 	mov.w	r1, #0
 80041ca:	0159      	lsls	r1, r3, #5
 80041cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d0:	0150      	lsls	r0, r2, #5
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	ebb2 080a 	subs.w	r8, r2, sl
 80041da:	eb63 090b 	sbc.w	r9, r3, fp
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041f2:	ebb2 0408 	subs.w	r4, r2, r8
 80041f6:	eb63 0509 	sbc.w	r5, r3, r9
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	00eb      	lsls	r3, r5, #3
 8004204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004208:	00e2      	lsls	r2, r4, #3
 800420a:	4614      	mov	r4, r2
 800420c:	461d      	mov	r5, r3
 800420e:	eb14 030a 	adds.w	r3, r4, sl
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	eb45 030b 	adc.w	r3, r5, fp
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004226:	4629      	mov	r1, r5
 8004228:	028b      	lsls	r3, r1, #10
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004230:	4621      	mov	r1, r4
 8004232:	028a      	lsls	r2, r1, #10
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423a:	2200      	movs	r2, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004244:	f7fb ffc8 	bl	80001d8 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4613      	mov	r3, r2
 800424e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800426a:	e002      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x184>)
 800426e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004274:	4618      	mov	r0, r3
 8004276:	3740      	adds	r7, #64	@ 0x40
 8004278:	46bd      	mov	sp, r7
 800427a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	017d7840 	.word	0x017d7840

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000000 	.word	0x20000000

080042a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07b      	b.n	80043ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042c6:	d009      	beq.n	80042dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]
 80042ce:	e005      	b.n	80042dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd f982 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	ea42 0103 	orr.w	r1, r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0104 	and.w	r1, r3, #4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f003 0210 	and.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800439c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08a      	sub	sp, #40	@ 0x28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043c4:	2301      	movs	r3, #1
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c8:	f7fd fb98 	bl	8001afc <HAL_GetTick>
 80043cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043e0:	7ffb      	ldrb	r3, [r7, #31]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d00c      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x4a>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ec:	d106      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x46>
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d001      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
 80043fe:	e17f      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x5c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x5c>
 800440c:	887b      	ldrh	r3, [r7, #2]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e174      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x6e>
 8004420:	2302      	movs	r3, #2
 8004422:	e16d      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b04      	cmp	r3, #4
 8004436:	d003      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2205      	movs	r2, #5
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	887a      	ldrh	r2, [r7, #2]
 8004456:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	887a      	ldrh	r2, [r7, #2]
 8004462:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004480:	2b40      	cmp	r3, #64	@ 0x40
 8004482:	d007      	beq.n	8004494 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800449c:	d17e      	bne.n	800459c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_TransmitReceive+0xf6>
 80044a6:	8afb      	ldrh	r3, [r7, #22]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d16c      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	881a      	ldrh	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	1c9a      	adds	r2, r3, #2
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d0:	e059      	b.n	8004586 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d11b      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x162>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x162>
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d113      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d119      	bne.n	800455a <HAL_SPI_TransmitReceive+0x1a4>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d014      	beq.n	800455a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	b292      	uxth	r2, r2
 800453c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	1c9a      	adds	r2, r3, #2
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004556:	2301      	movs	r3, #1
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800455a:	f7fd facf 	bl	8001afc <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004566:	429a      	cmp	r2, r3
 8004568:	d80d      	bhi.n	8004586 <HAL_SPI_TransmitReceive+0x1d0>
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d009      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0bc      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1a0      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x11c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d19b      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x11c>
 800459a:	e082      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x1f4>
 80045a4:	8afb      	ldrh	r3, [r7, #22]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d171      	bne.n	800468e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d0:	e05d      	b.n	800468e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d11c      	bne.n	800461a <HAL_SPI_TransmitReceive+0x264>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d017      	beq.n	800461a <HAL_SPI_TransmitReceive+0x264>
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d114      	bne.n	800461a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d119      	bne.n	800465c <HAL_SPI_TransmitReceive+0x2a6>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d014      	beq.n	800465c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004658:	2301      	movs	r3, #1
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800465c:	f7fd fa4e 	bl	8001afc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004668:	429a      	cmp	r2, r3
 800466a:	d803      	bhi.n	8004674 <HAL_SPI_TransmitReceive+0x2be>
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d102      	bne.n	800467a <HAL_SPI_TransmitReceive+0x2c4>
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e038      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d19c      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x21c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d197      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a2:	6a3a      	ldr	r2, [r7, #32]
 80046a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8b6 	bl	8004818 <SPI_EndRxTxTransaction>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e01d      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3728      	adds	r7, #40	@ 0x28
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004718:	f7fd f9f0 	bl	8001afc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004728:	f7fd f9e8 	bl	8001afc <HAL_GetTick>
 800472c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800472e:	4b39      	ldr	r3, [pc, #228]	@ (8004814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	015b      	lsls	r3, r3, #5
 8004734:	0d1b      	lsrs	r3, r3, #20
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800473e:	e054      	b.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d050      	beq.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004748:	f7fd f9d8 	bl	8001afc <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	d902      	bls.n	800475e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d13d      	bne.n	80047da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800476c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004776:	d111      	bne.n	800479c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004780:	d004      	beq.n	800478c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478a:	d107      	bne.n	800479c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a4:	d10f      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e017      	b.n	800480a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	429a      	cmp	r2, r3
 8004806:	d19b      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000000 	.word	0x20000000

08004818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2201      	movs	r2, #1
 800482c:	2102      	movs	r1, #2
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ff6a 	bl	8004708 <SPI_WaitFlagStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e032      	b.n	80048b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800484a:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <SPI_EndRxTxTransaction+0xa0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1b      	ldr	r2, [pc, #108]	@ (80048bc <SPI_EndRxTxTransaction+0xa4>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	0d5b      	lsrs	r3, r3, #21
 8004856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004868:	d112      	bne.n	8004890 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	@ 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff47 	bl	8004708 <SPI_WaitFlagStateUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e00f      	b.n	80048b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	3b01      	subs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b80      	cmp	r3, #128	@ 0x80
 80048a8:	d0f2      	beq.n	8004890 <SPI_EndRxTxTransaction+0x78>
 80048aa:	e000      	b.n	80048ae <SPI_EndRxTxTransaction+0x96>
        break;
 80048ac:	bf00      	nop
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000000 	.word	0x20000000
 80048bc:	165e9f81 	.word	0x165e9f81

080048c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e041      	b.n	8004956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc ff1e 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 f93e 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e041      	b.n	80049f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fc fe83 	bl	8001690 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 f8ef 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0ae      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	f200 809f 	bhi.w	8004b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004b69 	.word	0x08004b69
 8004a38:	08004b69 	.word	0x08004b69
 8004a3c:	08004b69 	.word	0x08004b69
 8004a40:	08004aa5 	.word	0x08004aa5
 8004a44:	08004b69 	.word	0x08004b69
 8004a48:	08004b69 	.word	0x08004b69
 8004a4c:	08004b69 	.word	0x08004b69
 8004a50:	08004ae7 	.word	0x08004ae7
 8004a54:	08004b69 	.word	0x08004b69
 8004a58:	08004b69 	.word	0x08004b69
 8004a5c:	08004b69 	.word	0x08004b69
 8004a60:	08004b27 	.word	0x08004b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f914 	bl	8004c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0204 	bic.w	r2, r2, #4
 8004a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	619a      	str	r2, [r3, #24]
      break;
 8004aa2:	e064      	b.n	8004b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f95a 	bl	8004d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	619a      	str	r2, [r3, #24]
      break;
 8004ae4:	e043      	b.n	8004b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 f9a5 	bl	8004e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0208 	orr.w	r2, r2, #8
 8004b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0204 	bic.w	r2, r2, #4
 8004b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69d9      	ldr	r1, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]
      break;
 8004b24:	e023      	b.n	8004b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 f9ef 	bl	8004f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69d9      	ldr	r1, [r3, #28]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	61da      	str	r2, [r3, #28]
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3a      	ldr	r2, [pc, #232]	@ (8004c7c <TIM_Base_SetConfig+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a37      	ldr	r2, [pc, #220]	@ (8004c80 <TIM_Base_SetConfig+0x100>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a36      	ldr	r2, [pc, #216]	@ (8004c84 <TIM_Base_SetConfig+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a35      	ldr	r2, [pc, #212]	@ (8004c88 <TIM_Base_SetConfig+0x108>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d108      	bne.n	8004bca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8004c7c <TIM_Base_SetConfig+0xfc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01b      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd8:	d017      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <TIM_Base_SetConfig+0x100>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	@ (8004c84 <TIM_Base_SetConfig+0x104>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a26      	ldr	r2, [pc, #152]	@ (8004c88 <TIM_Base_SetConfig+0x108>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a25      	ldr	r2, [pc, #148]	@ (8004c8c <TIM_Base_SetConfig+0x10c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a24      	ldr	r2, [pc, #144]	@ (8004c90 <TIM_Base_SetConfig+0x110>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a23      	ldr	r2, [pc, #140]	@ (8004c94 <TIM_Base_SetConfig+0x114>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0e      	ldr	r2, [pc, #56]	@ (8004c7c <TIM_Base_SetConfig+0xfc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f023 0201 	bic.w	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0302 	bic.w	r3, r3, #2
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <TIM_OC1_SetConfig+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10c      	bne.n	8004d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0308 	bic.w	r3, r3, #8
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <TIM_OC1_SetConfig+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000

08004d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f023 0210 	bic.w	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0320 	bic.w	r3, r3, #32
 8004dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e38 <TIM_OC2_SetConfig+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10d      	bne.n	8004de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a15      	ldr	r2, [pc, #84]	@ (8004e38 <TIM_OC2_SetConfig+0xd4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d113      	bne.n	8004e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000

08004e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	@ (8004f0c <TIM_OC3_SetConfig+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a14      	ldr	r2, [pc, #80]	@ (8004f0c <TIM_OC3_SetConfig+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d113      	bne.n	8004ee6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40010000 	.word	0x40010000

08004f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	031b      	lsls	r3, r3, #12
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	@ (8004fac <TIM_OC4_SetConfig+0x9c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000

08004fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e050      	b.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005014:	d013      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a18      	ldr	r2, [pc, #96]	@ (800507c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a16      	ldr	r2, [pc, #88]	@ (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a15      	ldr	r2, [pc, #84]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a13      	ldr	r2, [pc, #76]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10c      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4313      	orrs	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40000c00 	.word	0x40000c00
 8005088:	40014000 	.word	0x40014000

0800508c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e03d      	b.n	8005124 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005130:	b084      	sub	sp, #16
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	f107 001c 	add.w	r0, r7, #28
 800513e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005142:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005146:	2b01      	cmp	r3, #1
 8005148:	d123      	bne.n	8005192 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800515e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fae8 	bl	800675c <USB_CoreReset>
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	e01b      	b.n	80051ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fadc 	bl	800675c <USB_CoreReset>
 80051a4:	4603      	mov	r3, r0
 80051a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80051bc:	e005      	b.n	80051ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051ca:	7fbb      	ldrb	r3, [r7, #30]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10b      	bne.n	80051e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f043 0206 	orr.w	r2, r3, #6
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f4:	b004      	add	sp, #16
 80051f6:	4770      	bx	lr

080051f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d165      	bne.n	80052d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a41      	ldr	r2, [pc, #260]	@ (8005314 <USB_SetTurnaroundTime+0x11c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d906      	bls.n	8005222 <USB_SetTurnaroundTime+0x2a>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a40      	ldr	r2, [pc, #256]	@ (8005318 <USB_SetTurnaroundTime+0x120>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d202      	bcs.n	8005222 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800521c:	230f      	movs	r3, #15
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e062      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a3c      	ldr	r2, [pc, #240]	@ (8005318 <USB_SetTurnaroundTime+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d306      	bcc.n	8005238 <USB_SetTurnaroundTime+0x40>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a3b      	ldr	r2, [pc, #236]	@ (800531c <USB_SetTurnaroundTime+0x124>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d202      	bcs.n	8005238 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005232:	230e      	movs	r3, #14
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e057      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a38      	ldr	r2, [pc, #224]	@ (800531c <USB_SetTurnaroundTime+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d306      	bcc.n	800524e <USB_SetTurnaroundTime+0x56>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a37      	ldr	r2, [pc, #220]	@ (8005320 <USB_SetTurnaroundTime+0x128>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d202      	bcs.n	800524e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005248:	230d      	movs	r3, #13
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e04c      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a33      	ldr	r2, [pc, #204]	@ (8005320 <USB_SetTurnaroundTime+0x128>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d306      	bcc.n	8005264 <USB_SetTurnaroundTime+0x6c>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a32      	ldr	r2, [pc, #200]	@ (8005324 <USB_SetTurnaroundTime+0x12c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d802      	bhi.n	8005264 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800525e:	230c      	movs	r3, #12
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e041      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a2f      	ldr	r2, [pc, #188]	@ (8005324 <USB_SetTurnaroundTime+0x12c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d906      	bls.n	800527a <USB_SetTurnaroundTime+0x82>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a2e      	ldr	r2, [pc, #184]	@ (8005328 <USB_SetTurnaroundTime+0x130>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d802      	bhi.n	800527a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005274:	230b      	movs	r3, #11
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e036      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a2a      	ldr	r2, [pc, #168]	@ (8005328 <USB_SetTurnaroundTime+0x130>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d906      	bls.n	8005290 <USB_SetTurnaroundTime+0x98>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4a29      	ldr	r2, [pc, #164]	@ (800532c <USB_SetTurnaroundTime+0x134>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d802      	bhi.n	8005290 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800528a:	230a      	movs	r3, #10
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e02b      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a26      	ldr	r2, [pc, #152]	@ (800532c <USB_SetTurnaroundTime+0x134>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d906      	bls.n	80052a6 <USB_SetTurnaroundTime+0xae>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a25      	ldr	r2, [pc, #148]	@ (8005330 <USB_SetTurnaroundTime+0x138>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d202      	bcs.n	80052a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052a0:	2309      	movs	r3, #9
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e020      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a21      	ldr	r2, [pc, #132]	@ (8005330 <USB_SetTurnaroundTime+0x138>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d306      	bcc.n	80052bc <USB_SetTurnaroundTime+0xc4>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <USB_SetTurnaroundTime+0x13c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d802      	bhi.n	80052bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052b6:	2308      	movs	r3, #8
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e015      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a1d      	ldr	r2, [pc, #116]	@ (8005334 <USB_SetTurnaroundTime+0x13c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d906      	bls.n	80052d2 <USB_SetTurnaroundTime+0xda>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <USB_SetTurnaroundTime+0x140>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d202      	bcs.n	80052d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052cc:	2307      	movs	r3, #7
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e00a      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052d2:	2306      	movs	r3, #6
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e007      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052de:	2309      	movs	r3, #9
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e001      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052e4:	2309      	movs	r3, #9
 80052e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	029b      	lsls	r3, r3, #10
 80052fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	00d8acbf 	.word	0x00d8acbf
 8005318:	00e4e1c0 	.word	0x00e4e1c0
 800531c:	00f42400 	.word	0x00f42400
 8005320:	01067380 	.word	0x01067380
 8005324:	011a499f 	.word	0x011a499f
 8005328:	01312cff 	.word	0x01312cff
 800532c:	014ca43f 	.word	0x014ca43f
 8005330:	016e3600 	.word	0x016e3600
 8005334:	01a6ab1f 	.word	0x01a6ab1f
 8005338:	01e84800 	.word	0x01e84800

0800533c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f043 0201 	orr.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d115      	bne.n	80053ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053ae:	200a      	movs	r0, #10
 80053b0:	f7fc fbb0 	bl	8001b14 <HAL_Delay>
      ms += 10U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	330a      	adds	r3, #10
 80053b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 f93f 	bl	800663e <USB_GetMode>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d01e      	beq.n	8005404 <USB_SetCurrentMode+0x84>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80053ca:	d9f0      	bls.n	80053ae <USB_SetCurrentMode+0x2e>
 80053cc:	e01a      	b.n	8005404 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d115      	bne.n	8005400 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053e0:	200a      	movs	r0, #10
 80053e2:	f7fc fb97 	bl	8001b14 <HAL_Delay>
      ms += 10U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	330a      	adds	r3, #10
 80053ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f926 	bl	800663e <USB_GetMode>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <USB_SetCurrentMode+0x84>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80053fc:	d9f0      	bls.n	80053e0 <USB_SetCurrentMode+0x60>
 80053fe:	e001      	b.n	8005404 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e005      	b.n	8005410 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2bc8      	cmp	r3, #200	@ 0xc8
 8005408:	d101      	bne.n	800540e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005418:	b084      	sub	sp, #16
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e009      	b.n	800544c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3340      	adds	r3, #64	@ 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3301      	adds	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b0e      	cmp	r3, #14
 8005450:	d9f2      	bls.n	8005438 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005452:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11c      	bne.n	8005494 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005468:	f043 0302 	orr.w	r3, r3, #2
 800546c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38
 8005492:	e00b      	b.n	80054ac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054b2:	461a      	mov	r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10d      	bne.n	80054dc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f968 	bl	80057a0 <USB_SetDevSpeed>
 80054d0:	e008      	b.n	80054e4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054d2:	2101      	movs	r1, #1
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f963 	bl	80057a0 <USB_SetDevSpeed>
 80054da:	e003      	b.n	80054e4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054dc:	2103      	movs	r1, #3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f95e 	bl	80057a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054e4:	2110      	movs	r1, #16
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8fa 	bl	80056e0 <USB_FlushTxFifo>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f924 	bl	8005744 <USB_FlushRxFifo>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e043      	b.n	80055b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005546:	d118      	bne.n	800557a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555a:	461a      	mov	r2, r3
 800555c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e013      	b.n	800558c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e008      	b.n	800558c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005586:	461a      	mov	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055aa:	461a      	mov	r2, r3
 80055ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3301      	adds	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055bc:	461a      	mov	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d3b5      	bcc.n	8005530 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	e043      	b.n	8005652 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e0:	d118      	bne.n	8005614 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e013      	b.n	8005626 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e008      	b.n	8005626 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	2300      	movs	r3, #0
 8005624:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	2300      	movs	r3, #0
 8005636:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800564a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3301      	adds	r3, #1
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005656:	461a      	mov	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4293      	cmp	r3, r2
 800565c:	d3b5      	bcc.n	80055ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800566c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005670:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800567e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f043 0210 	orr.w	r2, r3, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <USB_DevInit+0x2c4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f043 0208 	orr.w	r2, r3, #8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr
 80056dc:	803c3800 	.word	0x803c3800

080056e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056fa:	d901      	bls.n	8005700 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01b      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	daf2      	bge.n	80056ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	019b      	lsls	r3, r3, #6
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005724:	d901      	bls.n	800572a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e006      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d0f0      	beq.n	8005718 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800575c:	d901      	bls.n	8005762 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e018      	b.n	8005794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	daf2      	bge.n	8005750 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2210      	movs	r2, #16
 8005772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005780:	d901      	bls.n	8005786 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e006      	b.n	8005794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d0f0      	beq.n	8005774 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0306 	and.w	r3, r3, #6
 80057ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]
 80057f6:	e00a      	b.n	800580e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d002      	beq.n	8005804 <USB_GetDevSpeed+0x32>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d102      	bne.n	800580a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005804:	2302      	movs	r3, #2
 8005806:	75fb      	strb	r3, [r7, #23]
 8005808:	e001      	b.n	800580e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800580a:	230f      	movs	r3, #15
 800580c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800580e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d13a      	bne.n	80058ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	2101      	movs	r1, #1
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	b29b      	uxth	r3, r3
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005856:	4313      	orrs	r3, r2
 8005858:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d155      	bne.n	800591c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	791b      	ldrb	r3, [r3, #4]
 800588a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800588c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005894:	4313      	orrs	r3, r2
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e036      	b.n	800591c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	2101      	movs	r1, #1
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11a      	bne.n	800591c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	791b      	ldrb	r3, [r3, #4]
 8005900:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005902:	430b      	orrs	r3, r1
 8005904:	4313      	orrs	r3, r2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800591a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d161      	bne.n	8005a0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800595a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595e:	d11f      	bne.n	80059a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800597e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800599a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800599e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	2101      	movs	r1, #1
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059c0:	4013      	ands	r3, r2
 80059c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f303 	lsl.w	r3, r1, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059e4:	4013      	ands	r3, r2
 80059e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0159      	lsls	r1, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a02:	4619      	mov	r1, r3
 8005a04:	4b35      	ldr	r3, [pc, #212]	@ (8005adc <USB_DeactivateEndpoint+0x1b0>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]
 8005a0a:	e060      	b.n	8005ace <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a22:	d11f      	bne.n	8005a64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	2101      	movs	r1, #1
 8005a76:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a84:	4013      	ands	r3, r2
 8005a86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	0159      	lsls	r1, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	440b      	add	r3, r1
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <USB_DeactivateEndpoint+0x1b4>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	ec337800 	.word	0xec337800
 8005ae0:	eff37800 	.word	0xeff37800

08005ae4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	@ 0x28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 817f 	bne.w	8005e04 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d132      	bne.n	8005b74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b28:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b2c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6c:	0cdb      	lsrs	r3, r3, #19
 8005b6e:	04db      	lsls	r3, r3, #19
 8005b70:	6113      	str	r3, [r2, #16]
 8005b72:	e097      	b.n	8005ca4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b8e:	0cdb      	lsrs	r3, r3, #19
 8005b90:	04db      	lsls	r3, r3, #19
 8005b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bb2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bb6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11a      	bne.n	8005bf4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d903      	bls.n	8005bd2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bf0:	6113      	str	r3, [r2, #16]
 8005bf2:	e044      	b.n	8005c7e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	1e5a      	subs	r2, r3, #1
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	8afb      	ldrh	r3, [r7, #22]
 8005c1a:	04d9      	lsls	r1, r3, #19
 8005c1c:	4ba4      	ldr	r3, [pc, #656]	@ (8005eb0 <USB_EPStartXfer+0x3cc>)
 8005c1e:	400b      	ands	r3, r1
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	0148      	lsls	r0, r1, #5
 8005c24:	69f9      	ldr	r1, [r7, #28]
 8005c26:	4401      	add	r1, r0
 8005c28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	791b      	ldrb	r3, [r3, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d122      	bne.n	8005c7e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c52:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005c56:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	075b      	lsls	r3, r3, #29
 8005c6a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	0148      	lsls	r0, r1, #5
 8005c72:	69f9      	ldr	r1, [r7, #28]
 8005c74:	4401      	add	r1, r0
 8005c76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	0148      	lsls	r0, r1, #5
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d14b      	bne.n	8005d42 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	791b      	ldrb	r3, [r3, #4]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d128      	bne.n	8005d20 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d110      	bne.n	8005d00 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cf8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e00f      	b.n	8005d20 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e166      	b.n	8006010 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d60:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d015      	beq.n	8005d96 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 814e 	beq.w	8006010 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	2101      	movs	r1, #1
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	69f9      	ldr	r1, [r7, #28]
 8005d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d90:	4313      	orrs	r3, r2
 8005d92:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d94:	e13c      	b.n	8006010 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d110      	bne.n	8005dc8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00f      	b.n	8005de8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	68d9      	ldr	r1, [r3, #12]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	781a      	ldrb	r2, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	b298      	uxth	r0, r3
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f9b9 	bl	8006174 <USB_WritePacket>
 8005e02:	e105      	b.n	8006010 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e1e:	0cdb      	lsrs	r3, r3, #19
 8005e20:	04db      	lsls	r3, r3, #19
 8005e22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e46:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d132      	bne.n	8005eb4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7c:	69b9      	ldr	r1, [r7, #24]
 8005e7e:	0148      	lsls	r0, r1, #5
 8005e80:	69f9      	ldr	r1, [r7, #28]
 8005e82:	4401      	add	r1, r0
 8005e84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eaa:	6113      	str	r3, [r2, #16]
 8005eac:	e062      	b.n	8005f74 <USB_EPStartXfer+0x490>
 8005eae:	bf00      	nop
 8005eb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d123      	bne.n	8005f04 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	0148      	lsls	r0, r1, #5
 8005ed6:	69f9      	ldr	r1, [r7, #28]
 8005ed8:	4401      	add	r1, r0
 8005eda:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f00:	6113      	str	r3, [r2, #16]
 8005f02:	e037      	b.n	8005f74 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	8afa      	ldrh	r2, [r7, #22]
 8005f20:	fb03 f202 	mul.w	r2, r3, r2
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	8afb      	ldrh	r3, [r7, #22]
 8005f38:	04d9      	lsls	r1, r3, #19
 8005f3a:	4b38      	ldr	r3, [pc, #224]	@ (800601c <USB_EPStartXfer+0x538>)
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	0148      	lsls	r0, r1, #5
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	4401      	add	r1, r0
 8005f46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f64:	69b9      	ldr	r1, [r7, #24]
 8005f66:	0148      	lsls	r0, r1, #5
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	4401      	add	r1, r0
 8005f6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10d      	bne.n	8005f96 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	68d9      	ldr	r1, [r3, #12]
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	460a      	mov	r2, r1
 8005f94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	791b      	ldrb	r3, [r3, #4]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d128      	bne.n	8005ff0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d110      	bne.n	8005fd0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e00f      	b.n	8005ff0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800600a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800600e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	1ff80000 	.word	0x1ff80000

08006020 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d14a      	bne.n	80060d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006056:	f040 8086 	bne.w	8006166 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006078:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800607c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d902      	bls.n	80060b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
          break;
 80060b6:	e056      	b.n	8006166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060d0:	d0e7      	beq.n	80060a2 <USB_EPStopXfer+0x82>
 80060d2:	e048      	b.n	8006166 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060ec:	d13b      	bne.n	8006166 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800610c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006110:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3301      	adds	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006142:	4293      	cmp	r3, r2
 8006144:	d902      	bls.n	800614c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
          break;
 800614a:	e00c      	b.n	8006166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006164:	d0e7      	beq.n	8006136 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006174:	b480      	push	{r7}
 8006176:	b089      	sub	sp, #36	@ 0x24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4611      	mov	r1, r2
 8006180:	461a      	mov	r2, r3
 8006182:	460b      	mov	r3, r1
 8006184:	71fb      	strb	r3, [r7, #7]
 8006186:	4613      	mov	r3, r2
 8006188:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d123      	bne.n	80061e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800619a:	88bb      	ldrh	r3, [r7, #4]
 800619c:	3303      	adds	r3, #3
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e018      	b.n	80061da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	031a      	lsls	r2, r3, #12
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b4:	461a      	mov	r2, r3
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	3301      	adds	r3, #1
 80061d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d3e2      	bcc.n	80061a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3724      	adds	r7, #36	@ 0x24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b08b      	sub	sp, #44	@ 0x2c
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	089b      	lsrs	r3, r3, #2
 800620a:	b29b      	uxth	r3, r3
 800620c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006216:	2300      	movs	r3, #0
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	e014      	b.n	8006246 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	601a      	str	r2, [r3, #0]
    pDest++;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	3301      	adds	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	3301      	adds	r3, #1
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	3301      	adds	r3, #1
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	3301      	adds	r3, #1
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	6a3a      	ldr	r2, [r7, #32]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	429a      	cmp	r2, r3
 800624c:	d3e6      	bcc.n	800621c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800624e:	8bfb      	ldrh	r3, [r7, #30]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01e      	beq.n	8006292 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800625e:	461a      	mov	r2, r3
 8006260:	f107 0310 	add.w	r3, r7, #16
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	701a      	strb	r2, [r3, #0]
      i++;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	3301      	adds	r3, #1
 800627e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	3301      	adds	r3, #1
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006286:	8bfb      	ldrh	r3, [r7, #30]
 8006288:	3b01      	subs	r3, #1
 800628a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800628c:	8bfb      	ldrh	r3, [r7, #30]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1ea      	bne.n	8006268 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006294:	4618      	mov	r0, r3
 8006296:	372c      	adds	r7, #44	@ 0x2c
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d12c      	bne.n	8006316 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	db12      	blt.n	80062f4 <USB_EPSetStall+0x54>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00f      	beq.n	80062f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	e02b      	b.n	800636e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	db12      	blt.n	800634e <USB_EPSetStall+0xae>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006348:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800634c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006368:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800636c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d128      	bne.n	80063ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	791b      	ldrb	r3, [r3, #4]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d003      	beq.n	80063c8 <USB_EPClearStall+0x4c>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	791b      	ldrb	r3, [r3, #4]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d138      	bne.n	800643a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e027      	b.n	800643a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006404:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006408:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	791b      	ldrb	r3, [r3, #4]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d003      	beq.n	800641a <USB_EPClearStall+0x9e>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d10f      	bne.n	800643a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006438:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006466:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800646a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800647c:	68f9      	ldr	r1, [r7, #12]
 800647e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006482:	4313      	orrs	r3, r2
 8006484:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064ae:	f023 0303 	bic.w	r3, r3, #3
 80064b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064c2:	f023 0302 	bic.w	r3, r3, #2
 80064c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064f0:	f023 0303 	bic.w	r3, r3, #3
 80064f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006504:	f043 0302 	orr.w	r3, r3, #2
 8006508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4013      	ands	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	4013      	ands	r3, r2
 8006560:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	0c1b      	lsrs	r3, r3, #16
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	b29b      	uxth	r3, r3
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065d4:	68bb      	ldr	r3, [r7, #8]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b087      	sub	sp, #28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006604:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	fa22 f303 	lsr.w	r3, r2, r3
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	b2db      	uxtb	r3, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006630:	68bb      	ldr	r3, [r7, #8]
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0301 	and.w	r3, r3, #1
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006674:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006678:	f023 0307 	bic.w	r3, r3, #7
 800667c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800668c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	460b      	mov	r3, r1
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	333c      	adds	r3, #60	@ 0x3c
 80066b6:	3304      	adds	r3, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4a26      	ldr	r2, [pc, #152]	@ (8006758 <USB_EP0_OutStart+0xb8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d90a      	bls.n	80066da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d4:	d101      	bne.n	80066da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e037      	b.n	800674a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e0:	461a      	mov	r2, r3
 80066e2:	2300      	movs	r3, #0
 80066e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006708:	f043 0318 	orr.w	r3, r3, #24
 800670c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800671c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006720:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006722:	7afb      	ldrb	r3, [r7, #11]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10f      	bne.n	8006748 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006742:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	4f54300a 	.word	0x4f54300a

0800675c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3301      	adds	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006774:	d901      	bls.n	800677a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e01b      	b.n	80067b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	daf2      	bge.n	8006768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f043 0201 	orr.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3301      	adds	r3, #1
 8006796:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800679e:	d901      	bls.n	80067a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e006      	b.n	80067b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d0f0      	beq.n	8006792 <USB_CoreReset+0x36>

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
	...

080067c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80067d0:	f002 fc2e 	bl	8009030 <USBD_static_malloc>
 80067d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32b0      	adds	r2, #176	@ 0xb0
 80067e6:	2100      	movs	r1, #0
 80067e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80067ec:	2302      	movs	r3, #2
 80067ee:	e0d4      	b.n	800699a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80067f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80067f4:	2100      	movs	r1, #0
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f002 fc5e 	bl	80090b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32b0      	adds	r2, #176	@ 0xb0
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32b0      	adds	r2, #176	@ 0xb0
 8006816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	7c1b      	ldrb	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d138      	bne.n	800689a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006828:	4b5e      	ldr	r3, [pc, #376]	@ (80069a4 <USBD_CDC_Init+0x1e4>)
 800682a:	7819      	ldrb	r1, [r3, #0]
 800682c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006830:	2202      	movs	r2, #2
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fad9 	bl	8008dea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006838:	4b5a      	ldr	r3, [pc, #360]	@ (80069a4 <USBD_CDC_Init+0x1e4>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	3324      	adds	r3, #36	@ 0x24
 800684e:	2201      	movs	r2, #1
 8006850:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006852:	4b55      	ldr	r3, [pc, #340]	@ (80069a8 <USBD_CDC_Init+0x1e8>)
 8006854:	7819      	ldrb	r1, [r3, #0]
 8006856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800685a:	2202      	movs	r2, #2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f002 fac4 	bl	8008dea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006862:	4b51      	ldr	r3, [pc, #324]	@ (80069a8 <USBD_CDC_Init+0x1e8>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 020f 	and.w	r2, r3, #15
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800687a:	2201      	movs	r2, #1
 800687c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800687e:	4b4b      	ldr	r3, [pc, #300]	@ (80069ac <USBD_CDC_Init+0x1ec>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f003 020f 	and.w	r2, r3, #15
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	3326      	adds	r3, #38	@ 0x26
 8006894:	2210      	movs	r2, #16
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	e035      	b.n	8006906 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800689a:	4b42      	ldr	r3, [pc, #264]	@ (80069a4 <USBD_CDC_Init+0x1e4>)
 800689c:	7819      	ldrb	r1, [r3, #0]
 800689e:	2340      	movs	r3, #64	@ 0x40
 80068a0:	2202      	movs	r2, #2
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f002 faa1 	bl	8008dea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068a8:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <USBD_CDC_Init+0x1e4>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f003 020f 	and.w	r2, r3, #15
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	3324      	adds	r3, #36	@ 0x24
 80068be:	2201      	movs	r2, #1
 80068c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068c2:	4b39      	ldr	r3, [pc, #228]	@ (80069a8 <USBD_CDC_Init+0x1e8>)
 80068c4:	7819      	ldrb	r1, [r3, #0]
 80068c6:	2340      	movs	r3, #64	@ 0x40
 80068c8:	2202      	movs	r2, #2
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f002 fa8d 	bl	8008dea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068d0:	4b35      	ldr	r3, [pc, #212]	@ (80069a8 <USBD_CDC_Init+0x1e8>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 020f 	and.w	r2, r3, #15
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068e8:	2201      	movs	r2, #1
 80068ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068ec:	4b2f      	ldr	r3, [pc, #188]	@ (80069ac <USBD_CDC_Init+0x1ec>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	3326      	adds	r3, #38	@ 0x26
 8006902:	2210      	movs	r2, #16
 8006904:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006906:	4b29      	ldr	r3, [pc, #164]	@ (80069ac <USBD_CDC_Init+0x1ec>)
 8006908:	7819      	ldrb	r1, [r3, #0]
 800690a:	2308      	movs	r3, #8
 800690c:	2203      	movs	r2, #3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f002 fa6b 	bl	8008dea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006914:	4b25      	ldr	r3, [pc, #148]	@ (80069ac <USBD_CDC_Init+0x1ec>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f003 020f 	and.w	r2, r3, #15
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	3324      	adds	r3, #36	@ 0x24
 800692a:	2201      	movs	r2, #1
 800692c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	33b0      	adds	r3, #176	@ 0xb0
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006964:	2302      	movs	r3, #2
 8006966:	e018      	b.n	800699a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7c1b      	ldrb	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006970:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <USBD_CDC_Init+0x1e8>)
 8006972:	7819      	ldrb	r1, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800697a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f002 fb22 	bl	8008fc8 <USBD_LL_PrepareReceive>
 8006984:	e008      	b.n	8006998 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006986:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <USBD_CDC_Init+0x1e8>)
 8006988:	7819      	ldrb	r1, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006990:	2340      	movs	r3, #64	@ 0x40
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f002 fb18 	bl	8008fc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000093 	.word	0x20000093
 80069a8:	20000094 	.word	0x20000094
 80069ac:	20000095 	.word	0x20000095

080069b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80069bc:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa8 <USBD_CDC_DeInit+0xf8>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f002 fa37 	bl	8008e36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80069c8:	4b37      	ldr	r3, [pc, #220]	@ (8006aa8 <USBD_CDC_DeInit+0xf8>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 020f 	and.w	r2, r3, #15
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3324      	adds	r3, #36	@ 0x24
 80069de:	2200      	movs	r2, #0
 80069e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80069e2:	4b32      	ldr	r3, [pc, #200]	@ (8006aac <USBD_CDC_DeInit+0xfc>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f002 fa24 	bl	8008e36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80069ee:	4b2f      	ldr	r3, [pc, #188]	@ (8006aac <USBD_CDC_DeInit+0xfc>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f003 020f 	and.w	r2, r3, #15
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a06:	2200      	movs	r2, #0
 8006a08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a0a:	4b29      	ldr	r3, [pc, #164]	@ (8006ab0 <USBD_CDC_DeInit+0x100>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f002 fa10 	bl	8008e36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a16:	4b26      	ldr	r3, [pc, #152]	@ (8006ab0 <USBD_CDC_DeInit+0x100>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3324      	adds	r3, #36	@ 0x24
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a30:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab0 <USBD_CDC_DeInit+0x100>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 020f 	and.w	r2, r3, #15
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	3326      	adds	r3, #38	@ 0x26
 8006a46:	2200      	movs	r2, #0
 8006a48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	32b0      	adds	r2, #176	@ 0xb0
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01f      	beq.n	8006a9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	33b0      	adds	r3, #176	@ 0xb0
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	32b0      	adds	r2, #176	@ 0xb0
 8006a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f002 fae4 	bl	800904c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	32b0      	adds	r2, #176	@ 0xb0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000093 	.word	0x20000093
 8006aac:	20000094 	.word	0x20000094
 8006ab0:	20000095 	.word	0x20000095

08006ab4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	32b0      	adds	r2, #176	@ 0xb0
 8006ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006acc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e0bf      	b.n	8006c64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d050      	beq.n	8006b92 <USBD_CDC_Setup+0xde>
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	f040 80af 	bne.w	8006c54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	88db      	ldrh	r3, [r3, #6]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d03a      	beq.n	8006b74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	b25b      	sxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	da1b      	bge.n	8006b40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	33b0      	adds	r3, #176	@ 0xb0
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	88d2      	ldrh	r2, [r2, #6]
 8006b24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	88db      	ldrh	r3, [r3, #6]
 8006b2a:	2b07      	cmp	r3, #7
 8006b2c:	bf28      	it	cs
 8006b2e:	2307      	movcs	r3, #7
 8006b30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	89fa      	ldrh	r2, [r7, #14]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fd53 	bl	80085e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b3e:	e090      	b.n	8006c62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785a      	ldrb	r2, [r3, #1]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	88db      	ldrh	r3, [r3, #6]
 8006b4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b50:	d803      	bhi.n	8006b5a <USBD_CDC_Setup+0xa6>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	88db      	ldrh	r3, [r3, #6]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	e000      	b.n	8006b5c <USBD_CDC_Setup+0xa8>
 8006b5a:	2240      	movs	r2, #64	@ 0x40
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006b62:	6939      	ldr	r1, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fd65 	bl	800863c <USBD_CtlPrepareRx>
      break;
 8006b72:	e076      	b.n	8006c62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	33b0      	adds	r3, #176	@ 0xb0
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	7850      	ldrb	r0, [r2, #1]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	4798      	blx	r3
      break;
 8006b90:	e067      	b.n	8006c62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b0b      	cmp	r3, #11
 8006b98:	d851      	bhi.n	8006c3e <USBD_CDC_Setup+0x18a>
 8006b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <USBD_CDC_Setup+0xec>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bd1 	.word	0x08006bd1
 8006ba4:	08006c4d 	.word	0x08006c4d
 8006ba8:	08006c3f 	.word	0x08006c3f
 8006bac:	08006c3f 	.word	0x08006c3f
 8006bb0:	08006c3f 	.word	0x08006c3f
 8006bb4:	08006c3f 	.word	0x08006c3f
 8006bb8:	08006c3f 	.word	0x08006c3f
 8006bbc:	08006c3f 	.word	0x08006c3f
 8006bc0:	08006c3f 	.word	0x08006c3f
 8006bc4:	08006c3f 	.word	0x08006c3f
 8006bc8:	08006bfb 	.word	0x08006bfb
 8006bcc:	08006c25 	.word	0x08006c25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d107      	bne.n	8006bec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bdc:	f107 030a 	add.w	r3, r7, #10
 8006be0:	2202      	movs	r2, #2
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fcfd 	bl	80085e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bea:	e032      	b.n	8006c52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fc7b 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf8:	e02b      	b.n	8006c52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d107      	bne.n	8006c16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c06:	f107 030d 	add.w	r3, r7, #13
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 fce8 	bl	80085e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c14:	e01d      	b.n	8006c52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fc66 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	75fb      	strb	r3, [r7, #23]
          break;
 8006c22:	e016      	b.n	8006c52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d00f      	beq.n	8006c50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fc59 	bl	80084ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c3c:	e008      	b.n	8006c50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fc52 	bl	80084ea <USBD_CtlError>
          ret = USBD_FAIL;
 8006c46:	2303      	movs	r3, #3
 8006c48:	75fb      	strb	r3, [r7, #23]
          break;
 8006c4a:	e002      	b.n	8006c52 <USBD_CDC_Setup+0x19e>
          break;
 8006c4c:	bf00      	nop
 8006c4e:	e008      	b.n	8006c62 <USBD_CDC_Setup+0x1ae>
          break;
 8006c50:	bf00      	nop
      }
      break;
 8006c52:	e006      	b.n	8006c62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fc47 	bl	80084ea <USBD_CtlError>
      ret = USBD_FAIL;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c60:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	32b0      	adds	r2, #176	@ 0xb0
 8006c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e065      	b.n	8006d62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3318      	adds	r3, #24
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d02f      	beq.n	8006d20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	f003 020f 	and.w	r2, r3, #15
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	3318      	adds	r3, #24
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	f003 010f 	and.w	r1, r3, #15
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4403      	add	r3, r0
 8006ce8:	331c      	adds	r3, #28
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d112      	bne.n	8006d20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d12:	78f9      	ldrb	r1, [r7, #3]
 8006d14:	2300      	movs	r3, #0
 8006d16:	2200      	movs	r2, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f002 f934 	bl	8008f86 <USBD_LL_Transmit>
 8006d1e:	e01f      	b.n	8006d60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	33b0      	adds	r3, #176	@ 0xb0
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d010      	beq.n	8006d60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	33b0      	adds	r3, #176	@ 0xb0
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	32b0      	adds	r2, #176	@ 0xb0
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	32b0      	adds	r2, #176	@ 0xb0
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e01a      	b.n	8006dd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f002 f932 	bl	800900a <USBD_LL_GetRxDataSize>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	33b0      	adds	r3, #176	@ 0xb0
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	@ 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e024      	b.n	8006e46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	33b0      	adds	r3, #176	@ 0xb0
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d019      	beq.n	8006e44 <USBD_CDC_EP0_RxReady+0x6a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e16:	2bff      	cmp	r3, #255	@ 0xff
 8006e18:	d014      	beq.n	8006e44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	33b0      	adds	r3, #176	@ 0xb0
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	22ff      	movs	r2, #255	@ 0xff
 8006e40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e58:	2182      	movs	r1, #130	@ 0x82
 8006e5a:	4818      	ldr	r0, [pc, #96]	@ (8006ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e5c:	f000 fd0f 	bl	800787e <USBD_GetEpDesc>
 8006e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e62:	2101      	movs	r1, #1
 8006e64:	4815      	ldr	r0, [pc, #84]	@ (8006ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e66:	f000 fd0a 	bl	800787e <USBD_GetEpDesc>
 8006e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e6c:	2181      	movs	r1, #129	@ 0x81
 8006e6e:	4813      	ldr	r0, [pc, #76]	@ (8006ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e70:	f000 fd05 	bl	800787e <USBD_GetEpDesc>
 8006e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2210      	movs	r2, #16
 8006e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e90:	711a      	strb	r2, [r3, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d006      	beq.n	8006eaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ea4:	711a      	strb	r2, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2243      	movs	r2, #67	@ 0x43
 8006eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006eb0:	4b02      	ldr	r3, [pc, #8]	@ (8006ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000050 	.word	0x20000050

08006ec0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ec8:	2182      	movs	r1, #130	@ 0x82
 8006eca:	4818      	ldr	r0, [pc, #96]	@ (8006f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ecc:	f000 fcd7 	bl	800787e <USBD_GetEpDesc>
 8006ed0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	4815      	ldr	r0, [pc, #84]	@ (8006f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ed6:	f000 fcd2 	bl	800787e <USBD_GetEpDesc>
 8006eda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006edc:	2181      	movs	r1, #129	@ 0x81
 8006ede:	4813      	ldr	r0, [pc, #76]	@ (8006f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ee0:	f000 fccd 	bl	800787e <USBD_GetEpDesc>
 8006ee4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d006      	beq.n	8006f06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2200      	movs	r2, #0
 8006efc:	711a      	strb	r2, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f042 0202 	orr.w	r2, r2, #2
 8006f04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d006      	beq.n	8006f1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	711a      	strb	r2, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f042 0202 	orr.w	r2, r2, #2
 8006f18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2243      	movs	r2, #67	@ 0x43
 8006f1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f20:	4b02      	ldr	r3, [pc, #8]	@ (8006f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000050 	.word	0x20000050

08006f30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f38:	2182      	movs	r1, #130	@ 0x82
 8006f3a:	4818      	ldr	r0, [pc, #96]	@ (8006f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f3c:	f000 fc9f 	bl	800787e <USBD_GetEpDesc>
 8006f40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f42:	2101      	movs	r1, #1
 8006f44:	4815      	ldr	r0, [pc, #84]	@ (8006f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f46:	f000 fc9a 	bl	800787e <USBD_GetEpDesc>
 8006f4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f4c:	2181      	movs	r1, #129	@ 0x81
 8006f4e:	4813      	ldr	r0, [pc, #76]	@ (8006f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f50:	f000 fc95 	bl	800787e <USBD_GetEpDesc>
 8006f54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2210      	movs	r2, #16
 8006f60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f70:	711a      	strb	r2, [r3, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f84:	711a      	strb	r2, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2243      	movs	r2, #67	@ 0x43
 8006f8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f90:	4b02      	ldr	r3, [pc, #8]	@ (8006f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000050 	.word	0x20000050

08006fa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220a      	movs	r2, #10
 8006fac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fae:	4b03      	ldr	r3, [pc, #12]	@ (8006fbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000000c 	.word	0x2000000c

08006fc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e009      	b.n	8006fe8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	33b0      	adds	r3, #176	@ 0xb0
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	32b0      	adds	r2, #176	@ 0xb0
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007016:	2303      	movs	r3, #3
 8007018:	e008      	b.n	800702c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32b0      	adds	r2, #176	@ 0xb0
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	e004      	b.n	8007066 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	@ 0xb0
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32b0      	adds	r2, #176	@ 0xb0
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800709e:	2303      	movs	r3, #3
 80070a0:	e018      	b.n	80070d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7c1b      	ldrb	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070aa:	4b0c      	ldr	r3, [pc, #48]	@ (80070dc <USBD_CDC_ReceivePacket+0x68>)
 80070ac:	7819      	ldrb	r1, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 ff85 	bl	8008fc8 <USBD_LL_PrepareReceive>
 80070be:	e008      	b.n	80070d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070c0:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <USBD_CDC_ReceivePacket+0x68>)
 80070c2:	7819      	ldrb	r1, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070ca:	2340      	movs	r3, #64	@ 0x40
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 ff7b 	bl	8008fc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000094 	.word	0x20000094

080070e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e01f      	b.n	8007138 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	79fa      	ldrb	r2, [r7, #7]
 800712a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f001 fdf5 	bl	8008d1c <USBD_LL_Init>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	e025      	b.n	80071a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	32ae      	adds	r2, #174	@ 0xae
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00f      	beq.n	8007194 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32ae      	adds	r2, #174	@ 0xae
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	f107 020e 	add.w	r2, r7, #14
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	4602      	mov	r2, r0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fdfd 	bl	8008db4 <USBD_LL_Start>
 80071ba:	4603      	mov	r3, r0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	4611      	mov	r1, r2
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f001 f90c 	bl	8008476 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	2b02      	cmp	r3, #2
 8007280:	d01a      	beq.n	80072b8 <USBD_LL_SetupStage+0x72>
 8007282:	2b02      	cmp	r3, #2
 8007284:	d822      	bhi.n	80072cc <USBD_LL_SetupStage+0x86>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <USBD_LL_SetupStage+0x4a>
 800728a:	2b01      	cmp	r3, #1
 800728c:	d00a      	beq.n	80072a4 <USBD_LL_SetupStage+0x5e>
 800728e:	e01d      	b.n	80072cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb63 	bl	8007964 <USBD_StdDevReq>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]
      break;
 80072a2:	e020      	b.n	80072e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fbcb 	bl	8007a48 <USBD_StdItfReq>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
      break;
 80072b6:	e016      	b.n	80072e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc2d 	bl	8007b20 <USBD_StdEPReq>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ca:	e00c      	b.n	80072e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fdca 	bl	8008e74 <USBD_LL_StallEP>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
      break;
 80072e4:	bf00      	nop
  }

  return ret;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	460b      	mov	r3, r1
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d16e      	bne.n	80073e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800730e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007316:	2b03      	cmp	r3, #3
 8007318:	f040 8098 	bne.w	800744c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	429a      	cmp	r2, r3
 8007326:	d913      	bls.n	8007350 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	1ad2      	subs	r2, r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	4293      	cmp	r3, r2
 8007340:	bf28      	it	cs
 8007342:	4613      	movcs	r3, r2
 8007344:	461a      	mov	r2, r3
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 f994 	bl	8008676 <USBD_CtlContinueRx>
 800734e:	e07d      	b.n	800744c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2b02      	cmp	r3, #2
 800735c:	d014      	beq.n	8007388 <USBD_LL_DataOutStage+0x98>
 800735e:	2b02      	cmp	r3, #2
 8007360:	d81d      	bhi.n	800739e <USBD_LL_DataOutStage+0xae>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <USBD_LL_DataOutStage+0x7c>
 8007366:	2b01      	cmp	r3, #1
 8007368:	d003      	beq.n	8007372 <USBD_LL_DataOutStage+0x82>
 800736a:	e018      	b.n	800739e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	75bb      	strb	r3, [r7, #22]
            break;
 8007370:	e018      	b.n	80073a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fa64 	bl	800784a <USBD_CoreFindIF>
 8007382:	4603      	mov	r3, r0
 8007384:	75bb      	strb	r3, [r7, #22]
            break;
 8007386:	e00d      	b.n	80073a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fa66 	bl	8007864 <USBD_CoreFindEP>
 8007398:	4603      	mov	r3, r0
 800739a:	75bb      	strb	r3, [r7, #22]
            break;
 800739c:	e002      	b.n	80073a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	75bb      	strb	r3, [r7, #22]
            break;
 80073a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80073a4:	7dbb      	ldrb	r3, [r7, #22]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d119      	bne.n	80073de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d113      	bne.n	80073de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80073b6:	7dba      	ldrb	r2, [r7, #22]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	32ae      	adds	r2, #174	@ 0xae
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80073c6:	7dba      	ldrb	r2, [r7, #22]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80073ce:	7dba      	ldrb	r2, [r7, #22]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	32ae      	adds	r2, #174	@ 0xae
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f95a 	bl	8008698 <USBD_CtlSendStatus>
 80073e4:	e032      	b.n	800744c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fa37 	bl	8007864 <USBD_CoreFindEP>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fa:	7dbb      	ldrb	r3, [r7, #22]
 80073fc:	2bff      	cmp	r3, #255	@ 0xff
 80073fe:	d025      	beq.n	800744c <USBD_LL_DataOutStage+0x15c>
 8007400:	7dbb      	ldrb	r3, [r7, #22]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d122      	bne.n	800744c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d117      	bne.n	8007442 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007412:	7dba      	ldrb	r2, [r7, #22]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	32ae      	adds	r2, #174	@ 0xae
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00f      	beq.n	8007442 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007422:	7dba      	ldrb	r2, [r7, #22]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800742a:	7dba      	ldrb	r2, [r7, #22]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	32ae      	adds	r2, #174	@ 0xae
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	7afa      	ldrb	r2, [r7, #11]
 8007438:	4611      	mov	r1, r2
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	e000      	b.n	800744e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	460b      	mov	r3, r1
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d16f      	bne.n	800754a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3314      	adds	r3, #20
 800746e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007476:	2b02      	cmp	r3, #2
 8007478:	d15a      	bne.n	8007530 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d914      	bls.n	80074b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	461a      	mov	r2, r3
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f001 f8bc 	bl	800861a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a2:	2300      	movs	r3, #0
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fd8d 	bl	8008fc8 <USBD_LL_PrepareReceive>
 80074ae:	e03f      	b.n	8007530 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d11c      	bne.n	80074f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d316      	bcc.n	80074f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d20f      	bcs.n	80074f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 f89d 	bl	800861a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f001 fd6a 	bl	8008fc8 <USBD_LL_PrepareReceive>
 80074f4:	e01c      	b.n	8007530 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d10f      	bne.n	8007522 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007522:	2180      	movs	r1, #128	@ 0x80
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f001 fca5 	bl	8008e74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 f8c7 	bl	80086be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d03a      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fe42 	bl	80071c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007548:	e032      	b.n	80075b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007550:	b2db      	uxtb	r3, r3
 8007552:	4619      	mov	r1, r3
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f985 	bl	8007864 <USBD_CoreFindEP>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2bff      	cmp	r3, #255	@ 0xff
 8007562:	d025      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d122      	bne.n	80075b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d11c      	bne.n	80075b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007576:	7dfa      	ldrb	r2, [r7, #23]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	32ae      	adds	r2, #174	@ 0xae
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d014      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007586:	7dfa      	ldrb	r2, [r7, #23]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800758e:	7dfa      	ldrb	r2, [r7, #23]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	32ae      	adds	r2, #174	@ 0xae
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	7afa      	ldrb	r2, [r7, #11]
 800759c:	4611      	mov	r1, r2
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	4798      	blx	r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80075a6:	7dbb      	ldrb	r3, [r7, #22]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80075ac:	7dbb      	ldrb	r3, [r7, #22]
 80075ae:	e000      	b.n	80075b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d014      	beq.n	8007620 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00e      	beq.n	8007620 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6852      	ldr	r2, [r2, #4]
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	4611      	mov	r1, r2
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007620:	2340      	movs	r3, #64	@ 0x40
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fbdf 	bl	8008dea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2240      	movs	r2, #64	@ 0x40
 8007638:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800763c:	2340      	movs	r3, #64	@ 0x40
 800763e:	2200      	movs	r2, #0
 8007640:	2180      	movs	r1, #128	@ 0x80
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fbd1 	bl	8008dea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2240      	movs	r2, #64	@ 0x40
 8007652:	621a      	str	r2, [r3, #32]

  return ret;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b04      	cmp	r3, #4
 8007690:	d006      	beq.n	80076a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007698:	b2da      	uxtb	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2204      	movs	r2, #4
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d106      	bne.n	80076d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d110      	bne.n	800771c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	32ae      	adds	r2, #174	@ 0xae
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007744:	2303      	movs	r3, #3
 8007746:	e01c      	b.n	8007782 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d115      	bne.n	8007780 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	32ae      	adds	r2, #174	@ 0xae
 800775e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32ae      	adds	r2, #174	@ 0xae
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4611      	mov	r1, r2
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	32ae      	adds	r2, #174	@ 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e01c      	b.n	80077e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d115      	bne.n	80077e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32ae      	adds	r2, #174	@ 0xae
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32ae      	adds	r2, #174	@ 0xae
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	4611      	mov	r1, r2
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00e      	beq.n	8007840 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6852      	ldr	r2, [r2, #4]
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	4611      	mov	r1, r2
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007856:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007870:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	b29b      	uxth	r3, r3
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	7812      	ldrb	r2, [r2, #0]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d91f      	bls.n	80078e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80078aa:	e013      	b.n	80078d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80078ac:	f107 030a 	add.w	r3, r7, #10
 80078b0:	4619      	mov	r1, r3
 80078b2:	6978      	ldr	r0, [r7, #20]
 80078b4:	f000 f81b 	bl	80078ee <USBD_GetNextDesc>
 80078b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d108      	bne.n	80078d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	789b      	ldrb	r3, [r3, #2]
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d008      	beq.n	80078e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	897b      	ldrh	r3, [r7, #10]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d8e5      	bhi.n	80078ac <USBD_GetEpDesc+0x2e>
 80078e0:	e000      	b.n	80078e4 <USBD_GetEpDesc+0x66>
          break;
 80078e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80078e4:	693b      	ldr	r3, [r7, #16]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	7812      	ldrb	r2, [r2, #0]
 8007904:	4413      	add	r3, r2
 8007906:	b29a      	uxth	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4413      	add	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007918:	68fb      	ldr	r3, [r7, #12]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3301      	adds	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007944:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	b21a      	sxth	r2, r3
 800794c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007950:	4313      	orrs	r3, r2
 8007952:	b21b      	sxth	r3, r3
 8007954:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007956:	89fb      	ldrh	r3, [r7, #14]
}
 8007958:	4618      	mov	r0, r3
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800797a:	2b40      	cmp	r3, #64	@ 0x40
 800797c:	d005      	beq.n	800798a <USBD_StdDevReq+0x26>
 800797e:	2b40      	cmp	r3, #64	@ 0x40
 8007980:	d857      	bhi.n	8007a32 <USBD_StdDevReq+0xce>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00f      	beq.n	80079a6 <USBD_StdDevReq+0x42>
 8007986:	2b20      	cmp	r3, #32
 8007988:	d153      	bne.n	8007a32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	32ae      	adds	r2, #174	@ 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
      break;
 80079a4:	e04a      	b.n	8007a3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	d83b      	bhi.n	8007a26 <USBD_StdDevReq+0xc2>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <USBD_StdDevReq+0x50>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007a1d 	.word	0x08007a1d
 80079bc:	08007a27 	.word	0x08007a27
 80079c0:	08007a13 	.word	0x08007a13
 80079c4:	08007a27 	.word	0x08007a27
 80079c8:	080079e7 	.word	0x080079e7
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	08007a27 	.word	0x08007a27
 80079d4:	080079ff 	.word	0x080079ff
 80079d8:	080079f1 	.word	0x080079f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa3c 	bl	8007e5c <USBD_GetDescriptor>
          break;
 80079e4:	e024      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fba1 	bl	8008130 <USBD_SetAddress>
          break;
 80079ee:	e01f      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fbe0 	bl	80081b8 <USBD_SetConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
          break;
 80079fc:	e018      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc83 	bl	800830c <USBD_GetConfig>
          break;
 8007a06:	e013      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fcb4 	bl	8008378 <USBD_GetStatus>
          break;
 8007a10:	e00e      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fce3 	bl	80083e0 <USBD_SetFeature>
          break;
 8007a1a:	e009      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fd07 	bl	8008432 <USBD_ClrFeature>
          break;
 8007a24:	e004      	b.n	8007a30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fd5e 	bl	80084ea <USBD_CtlError>
          break;
 8007a2e:	bf00      	nop
      }
      break;
 8007a30:	e004      	b.n	8007a3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fd58 	bl	80084ea <USBD_CtlError>
      break;
 8007a3a:	bf00      	nop
  }

  return ret;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a5e:	2b40      	cmp	r3, #64	@ 0x40
 8007a60:	d005      	beq.n	8007a6e <USBD_StdItfReq+0x26>
 8007a62:	2b40      	cmp	r3, #64	@ 0x40
 8007a64:	d852      	bhi.n	8007b0c <USBD_StdItfReq+0xc4>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <USBD_StdItfReq+0x26>
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d14e      	bne.n	8007b0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d840      	bhi.n	8007afe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	889b      	ldrh	r3, [r3, #4]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d836      	bhi.n	8007af4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	889b      	ldrh	r3, [r3, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fedb 	bl	800784a <USBD_CoreFindIF>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2bff      	cmp	r3, #255	@ 0xff
 8007a9c:	d01d      	beq.n	8007ada <USBD_StdItfReq+0x92>
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11a      	bne.n	8007ada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007aa4:	7bba      	ldrb	r2, [r7, #14]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32ae      	adds	r2, #174	@ 0xae
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00f      	beq.n	8007ad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ab4:	7bba      	ldrb	r2, [r7, #14]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007abc:	7bba      	ldrb	r2, [r7, #14]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	@ 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ad2:	e004      	b.n	8007ade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ad8:	e001      	b.n	8007ade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88db      	ldrh	r3, [r3, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d110      	bne.n	8007b08 <USBD_StdItfReq+0xc0>
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fdd3 	bl	8008698 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007af2:	e009      	b.n	8007b08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fcf7 	bl	80084ea <USBD_CtlError>
          break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fcf2 	bl	80084ea <USBD_CtlError>
          break;
 8007b06:	e000      	b.n	8007b0a <USBD_StdItfReq+0xc2>
          break;
 8007b08:	bf00      	nop
      }
      break;
 8007b0a:	e004      	b.n	8007b16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fceb 	bl	80084ea <USBD_CtlError>
      break;
 8007b14:	bf00      	nop
  }

  return ret;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	889b      	ldrh	r3, [r3, #4]
 8007b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b3c:	2b40      	cmp	r3, #64	@ 0x40
 8007b3e:	d007      	beq.n	8007b50 <USBD_StdEPReq+0x30>
 8007b40:	2b40      	cmp	r3, #64	@ 0x40
 8007b42:	f200 817f 	bhi.w	8007e44 <USBD_StdEPReq+0x324>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d02a      	beq.n	8007ba0 <USBD_StdEPReq+0x80>
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	f040 817a 	bne.w	8007e44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fe85 	bl	8007864 <USBD_CoreFindEP>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	2bff      	cmp	r3, #255	@ 0xff
 8007b62:	f000 8174 	beq.w	8007e4e <USBD_StdEPReq+0x32e>
 8007b66:	7b7b      	ldrb	r3, [r7, #13]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8170 	bne.w	8007e4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007b6e:	7b7a      	ldrb	r2, [r7, #13]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b76:	7b7a      	ldrb	r2, [r7, #13]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	32ae      	adds	r2, #174	@ 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8163 	beq.w	8007e4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b88:	7b7a      	ldrb	r2, [r7, #13]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32ae      	adds	r2, #174	@ 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b9e:	e156      	b.n	8007e4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d008      	beq.n	8007bba <USBD_StdEPReq+0x9a>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	f300 8145 	bgt.w	8007e38 <USBD_StdEPReq+0x318>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 809b 	beq.w	8007cea <USBD_StdEPReq+0x1ca>
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d03c      	beq.n	8007c32 <USBD_StdEPReq+0x112>
 8007bb8:	e13e      	b.n	8007e38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d002      	beq.n	8007bcc <USBD_StdEPReq+0xac>
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d016      	beq.n	8007bf8 <USBD_StdEPReq+0xd8>
 8007bca:	e02c      	b.n	8007c26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <USBD_StdEPReq+0xce>
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b80      	cmp	r3, #128	@ 0x80
 8007bd6:	d00a      	beq.n	8007bee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f949 	bl	8008e74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f945 	bl	8008e74 <USBD_LL_StallEP>
 8007bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bec:	e020      	b.n	8007c30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fc7a 	bl	80084ea <USBD_CtlError>
              break;
 8007bf6:	e01b      	b.n	8007c30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10e      	bne.n	8007c1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <USBD_StdEPReq+0xfe>
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b80      	cmp	r3, #128	@ 0x80
 8007c0a:	d008      	beq.n	8007c1e <USBD_StdEPReq+0xfe>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	88db      	ldrh	r3, [r3, #6]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 f92b 	bl	8008e74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd3a 	bl	8008698 <USBD_CtlSendStatus>

              break;
 8007c24:	e004      	b.n	8007c30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc5e 	bl	80084ea <USBD_CtlError>
              break;
 8007c2e:	bf00      	nop
          }
          break;
 8007c30:	e107      	b.n	8007e42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d002      	beq.n	8007c44 <USBD_StdEPReq+0x124>
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d016      	beq.n	8007c70 <USBD_StdEPReq+0x150>
 8007c42:	e04b      	b.n	8007cdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <USBD_StdEPReq+0x146>
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b80      	cmp	r3, #128	@ 0x80
 8007c4e:	d00a      	beq.n	8007c66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f90d 	bl	8008e74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5a:	2180      	movs	r1, #128	@ 0x80
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 f909 	bl	8008e74 <USBD_LL_StallEP>
 8007c62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c64:	e040      	b.n	8007ce8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc3e 	bl	80084ea <USBD_CtlError>
              break;
 8007c6e:	e03b      	b.n	8007ce8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	885b      	ldrh	r3, [r3, #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d136      	bne.n	8007ce6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 f913 	bl	8008eb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fd03 	bl	8008698 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fde4 	bl	8007864 <USBD_CoreFindEP>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ca0:	7b7b      	ldrb	r3, [r7, #13]
 8007ca2:	2bff      	cmp	r3, #255	@ 0xff
 8007ca4:	d01f      	beq.n	8007ce6 <USBD_StdEPReq+0x1c6>
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d11c      	bne.n	8007ce6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007cac:	7b7a      	ldrb	r2, [r7, #13]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007cb4:	7b7a      	ldrb	r2, [r7, #13]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	32ae      	adds	r2, #174	@ 0xae
 8007cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d010      	beq.n	8007ce6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cc4:	7b7a      	ldrb	r2, [r7, #13]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	32ae      	adds	r2, #174	@ 0xae
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007cda:	e004      	b.n	8007ce6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fc03 	bl	80084ea <USBD_CtlError>
              break;
 8007ce4:	e000      	b.n	8007ce8 <USBD_StdEPReq+0x1c8>
              break;
 8007ce6:	bf00      	nop
          }
          break;
 8007ce8:	e0ab      	b.n	8007e42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d002      	beq.n	8007cfc <USBD_StdEPReq+0x1dc>
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d032      	beq.n	8007d60 <USBD_StdEPReq+0x240>
 8007cfa:	e097      	b.n	8007e2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <USBD_StdEPReq+0x1f2>
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b80      	cmp	r3, #128	@ 0x80
 8007d06:	d004      	beq.n	8007d12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fbed 	bl	80084ea <USBD_CtlError>
                break;
 8007d10:	e091      	b.n	8007e36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da0b      	bge.n	8007d32 <USBD_StdEPReq+0x212>
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	3310      	adds	r3, #16
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3304      	adds	r3, #4
 8007d30:	e00b      	b.n	8007d4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	4413      	add	r3, r2
 8007d48:	3304      	adds	r3, #4
 8007d4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2202      	movs	r2, #2
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fc43 	bl	80085e4 <USBD_CtlSendData>
              break;
 8007d5e:	e06a      	b.n	8007e36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da11      	bge.n	8007d8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	f003 020f 	and.w	r2, r3, #15
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	3324      	adds	r3, #36	@ 0x24
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d117      	bne.n	8007db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fbb0 	bl	80084ea <USBD_CtlError>
                  break;
 8007d8a:	e054      	b.n	8007e36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	f003 020f 	and.w	r2, r3, #15
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb9d 	bl	80084ea <USBD_CtlError>
                  break;
 8007db0:	e041      	b.n	8007e36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da0b      	bge.n	8007dd2 <USBD_StdEPReq+0x2b2>
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	3310      	adds	r3, #16
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	3304      	adds	r3, #4
 8007dd0:	e00b      	b.n	8007dea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	3304      	adds	r3, #4
 8007dea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <USBD_StdEPReq+0x2d8>
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b80      	cmp	r3, #128	@ 0x80
 8007df6:	d103      	bne.n	8007e00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e00e      	b.n	8007e1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f873 	bl	8008ef0 <USBD_LL_IsStallEP>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2202      	movs	r2, #2
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fbdd 	bl	80085e4 <USBD_CtlSendData>
              break;
 8007e2a:	e004      	b.n	8007e36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fb5b 	bl	80084ea <USBD_CtlError>
              break;
 8007e34:	bf00      	nop
          }
          break;
 8007e36:	e004      	b.n	8007e42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fb55 	bl	80084ea <USBD_CtlError>
          break;
 8007e40:	bf00      	nop
      }
      break;
 8007e42:	e005      	b.n	8007e50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fb4f 	bl	80084ea <USBD_CtlError>
      break;
 8007e4c:	e000      	b.n	8007e50 <USBD_StdEPReq+0x330>
      break;
 8007e4e:	bf00      	nop
  }

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	2b06      	cmp	r3, #6
 8007e7e:	f200 8128 	bhi.w	80080d2 <USBD_GetDescriptor+0x276>
 8007e82:	a201      	add	r2, pc, #4	@ (adr r2, 8007e88 <USBD_GetDescriptor+0x2c>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007ea5 	.word	0x08007ea5
 8007e8c:	08007ebd 	.word	0x08007ebd
 8007e90:	08007efd 	.word	0x08007efd
 8007e94:	080080d3 	.word	0x080080d3
 8007e98:	080080d3 	.word	0x080080d3
 8007e9c:	08008073 	.word	0x08008073
 8007ea0:	0800809f 	.word	0x0800809f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
      break;
 8007eba:	e112      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7c1b      	ldrb	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ecc:	f107 0208 	add.w	r2, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	2202      	movs	r2, #2
 8007edc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ede:	e100      	b.n	80080e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	f107 0208 	add.w	r2, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	701a      	strb	r2, [r3, #0]
      break;
 8007efa:	e0f2      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	f200 80ac 	bhi.w	8008060 <USBD_GetDescriptor+0x204>
 8007f08:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <USBD_GetDescriptor+0xb4>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f29 	.word	0x08007f29
 8007f14:	08007f5d 	.word	0x08007f5d
 8007f18:	08007f91 	.word	0x08007f91
 8007f1c:	08007fc5 	.word	0x08007fc5
 8007f20:	08007ff9 	.word	0x08007ff9
 8007f24:	0800802d 	.word	0x0800802d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7c12      	ldrb	r2, [r2, #16]
 8007f40:	f107 0108 	add.w	r1, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4a:	e091      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 facb 	bl	80084ea <USBD_CtlError>
            err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5a:	e089      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7c12      	ldrb	r2, [r2, #16]
 8007f74:	f107 0108 	add.w	r1, r7, #8
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7e:	e077      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fab1 	bl	80084ea <USBD_CtlError>
            err++;
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8e:	e06f      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	7c12      	ldrb	r2, [r2, #16]
 8007fa8:	f107 0108 	add.w	r1, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb2:	e05d      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa97 	bl	80084ea <USBD_CtlError>
            err++;
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc2:	e055      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	7c12      	ldrb	r2, [r2, #16]
 8007fdc:	f107 0108 	add.w	r1, r7, #8
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe6:	e043      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa7d 	bl	80084ea <USBD_CtlError>
            err++;
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff6:	e03b      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7c12      	ldrb	r2, [r2, #16]
 8008010:	f107 0108 	add.w	r1, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801a:	e029      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa63 	bl	80084ea <USBD_CtlError>
            err++;
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	3301      	adds	r3, #1
 8008028:	72fb      	strb	r3, [r7, #11]
          break;
 800802a:	e021      	b.n	8008070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804e:	e00f      	b.n	8008070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa49 	bl	80084ea <USBD_CtlError>
            err++;
 8008058:	7afb      	ldrb	r3, [r7, #11]
 800805a:	3301      	adds	r3, #1
 800805c:	72fb      	strb	r3, [r7, #11]
          break;
 800805e:	e007      	b.n	8008070 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa41 	bl	80084ea <USBD_CtlError>
          err++;
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	3301      	adds	r3, #1
 800806c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800806e:	bf00      	nop
      }
      break;
 8008070:	e037      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7c1b      	ldrb	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008082:	f107 0208 	add.w	r2, r7, #8
 8008086:	4610      	mov	r0, r2
 8008088:	4798      	blx	r3
 800808a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800808c:	e029      	b.n	80080e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa2a 	bl	80084ea <USBD_CtlError>
        err++;
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	3301      	adds	r3, #1
 800809a:	72fb      	strb	r3, [r7, #11]
      break;
 800809c:	e021      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7c1b      	ldrb	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10d      	bne.n	80080c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	f107 0208 	add.w	r2, r7, #8
 80080b2:	4610      	mov	r0, r2
 80080b4:	4798      	blx	r3
 80080b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	2207      	movs	r2, #7
 80080be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080c0:	e00f      	b.n	80080e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa10 	bl	80084ea <USBD_CtlError>
        err++;
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	3301      	adds	r3, #1
 80080ce:	72fb      	strb	r3, [r7, #11]
      break;
 80080d0:	e007      	b.n	80080e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa08 	bl	80084ea <USBD_CtlError>
      err++;
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	3301      	adds	r3, #1
 80080de:	72fb      	strb	r3, [r7, #11]
      break;
 80080e0:	bf00      	nop
  }

  if (err != 0U)
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11e      	bne.n	8008126 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	88db      	ldrh	r3, [r3, #6]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d016      	beq.n	800811e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080f0:	893b      	ldrh	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88da      	ldrh	r2, [r3, #6]
 80080fa:	893b      	ldrh	r3, [r7, #8]
 80080fc:	4293      	cmp	r3, r2
 80080fe:	bf28      	it	cs
 8008100:	4613      	movcs	r3, r2
 8008102:	b29b      	uxth	r3, r3
 8008104:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008106:	893b      	ldrh	r3, [r7, #8]
 8008108:	461a      	mov	r2, r3
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fa69 	bl	80085e4 <USBD_CtlSendData>
 8008112:	e009      	b.n	8008128 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9e7 	bl	80084ea <USBD_CtlError>
 800811c:	e004      	b.n	8008128 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 faba 	bl	8008698 <USBD_CtlSendStatus>
 8008124:	e000      	b.n	8008128 <USBD_GetDescriptor+0x2cc>
    return;
 8008126:	bf00      	nop
  }
}
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop

08008130 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	889b      	ldrh	r3, [r3, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d131      	bne.n	80081a6 <USBD_SetAddress+0x76>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12d      	bne.n	80081a6 <USBD_SetAddress+0x76>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008150:	d829      	bhi.n	80081a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b03      	cmp	r3, #3
 8008168:	d104      	bne.n	8008174 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9bc 	bl	80084ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008172:	e01d      	b.n	80081b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7bfa      	ldrb	r2, [r7, #15]
 8008178:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fee1 	bl	8008f48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa86 	bl	8008698 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819a:	e009      	b.n	80081b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a4:	e004      	b.n	80081b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f99e 	bl	80084ea <USBD_CtlError>
  }
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	885b      	ldrh	r3, [r3, #2]
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	4b4e      	ldr	r3, [pc, #312]	@ (8008308 <USBD_SetConfig+0x150>)
 80081ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008308 <USBD_SetConfig+0x150>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d905      	bls.n	80081e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f985 	bl	80084ea <USBD_CtlError>
    return USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e08c      	b.n	80082fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d002      	beq.n	80081f6 <USBD_SetConfig+0x3e>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d029      	beq.n	8008248 <USBD_SetConfig+0x90>
 80081f4:	e075      	b.n	80082e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081f6:	4b44      	ldr	r3, [pc, #272]	@ (8008308 <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d020      	beq.n	8008240 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80081fe:	4b42      	ldr	r3, [pc, #264]	@ (8008308 <USBD_SetConfig+0x150>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008208:	4b3f      	ldr	r3, [pc, #252]	@ (8008308 <USBD_SetConfig+0x150>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fe ffe3 	bl	80071da <USBD_SetClassConfig>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d008      	beq.n	8008230 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f962 	bl	80084ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800822e:	e065      	b.n	80082fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa31 	bl	8008698 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2203      	movs	r2, #3
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800823e:	e05d      	b.n	80082fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa29 	bl	8008698 <USBD_CtlSendStatus>
      break;
 8008246:	e059      	b.n	80082fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008248:	4b2f      	ldr	r3, [pc, #188]	@ (8008308 <USBD_SetConfig+0x150>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d112      	bne.n	8008276 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008258:	4b2b      	ldr	r3, [pc, #172]	@ (8008308 <USBD_SetConfig+0x150>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008262:	4b29      	ldr	r3, [pc, #164]	@ (8008308 <USBD_SetConfig+0x150>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fe ffd2 	bl	8007212 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa12 	bl	8008698 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008274:	e042      	b.n	80082fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008276:	4b24      	ldr	r3, [pc, #144]	@ (8008308 <USBD_SetConfig+0x150>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d02a      	beq.n	80082da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7fe ffc0 	bl	8007212 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008292:	4b1d      	ldr	r3, [pc, #116]	@ (8008308 <USBD_SetConfig+0x150>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800829c:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <USBD_SetConfig+0x150>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fe ff99 	bl	80071da <USBD_SetClassConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00f      	beq.n	80082d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f918 	bl	80084ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fe ffa5 	bl	8007212 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80082d0:	e014      	b.n	80082fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9e0 	bl	8008698 <USBD_CtlSendStatus>
      break;
 80082d8:	e010      	b.n	80082fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f9dc 	bl	8008698 <USBD_CtlSendStatus>
      break;
 80082e0:	e00c      	b.n	80082fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f900 	bl	80084ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082ea:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <USBD_SetConfig+0x150>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fe ff8e 	bl	8007212 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	73fb      	strb	r3, [r7, #15]
      break;
 80082fa:	bf00      	nop
  }

  return ret;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	2000034c 	.word	0x2000034c

0800830c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d004      	beq.n	8008328 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8e2 	bl	80084ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008326:	e023      	b.n	8008370 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	dc02      	bgt.n	800833a <USBD_GetConfig+0x2e>
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc03      	bgt.n	8008340 <USBD_GetConfig+0x34>
 8008338:	e015      	b.n	8008366 <USBD_GetConfig+0x5a>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d00b      	beq.n	8008356 <USBD_GetConfig+0x4a>
 800833e:	e012      	b.n	8008366 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3308      	adds	r3, #8
 800834a:	2201      	movs	r2, #1
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f948 	bl	80085e4 <USBD_CtlSendData>
        break;
 8008354:	e00c      	b.n	8008370 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	2201      	movs	r2, #1
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f940 	bl	80085e4 <USBD_CtlSendData>
        break;
 8008364:	e004      	b.n	8008370 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8be 	bl	80084ea <USBD_CtlError>
        break;
 800836e:	bf00      	nop
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	2b02      	cmp	r3, #2
 800838e:	d81e      	bhi.n	80083ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d004      	beq.n	80083a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8a5 	bl	80084ea <USBD_CtlError>
        break;
 80083a0:	e01a      	b.n	80083d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f043 0202 	orr.w	r2, r3, #2
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	330c      	adds	r3, #12
 80083c2:	2202      	movs	r2, #2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f90c 	bl	80085e4 <USBD_CtlSendData>
      break;
 80083cc:	e004      	b.n	80083d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f88a 	bl	80084ea <USBD_CtlError>
      break;
 80083d6:	bf00      	nop
  }
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d107      	bne.n	8008402 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f94c 	bl	8008698 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008400:	e013      	b.n	800842a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d10b      	bne.n	8008422 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	889b      	ldrh	r3, [r3, #4]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	b2da      	uxtb	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f93c 	bl	8008698 <USBD_CtlSendStatus>
}
 8008420:	e003      	b.n	800842a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f860 	bl	80084ea <USBD_CtlError>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008442:	b2db      	uxtb	r3, r3
 8008444:	3b01      	subs	r3, #1
 8008446:	2b02      	cmp	r3, #2
 8008448:	d80b      	bhi.n	8008462 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d10c      	bne.n	800846c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f91c 	bl	8008698 <USBD_CtlSendStatus>
      }
      break;
 8008460:	e004      	b.n	800846c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f840 	bl	80084ea <USBD_CtlError>
      break;
 800846a:	e000      	b.n	800846e <USBD_ClrFeature+0x3c>
      break;
 800846c:	bf00      	nop
  }
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3301      	adds	r3, #1
 800849e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff fa40 	bl	8007926 <SWAPBYTE>
 80084a6:	4603      	mov	r3, r0
 80084a8:	461a      	mov	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff fa33 	bl	8007926 <SWAPBYTE>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3301      	adds	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7ff fa26 	bl	8007926 <SWAPBYTE>
 80084da:	4603      	mov	r3, r0
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	80da      	strh	r2, [r3, #6]
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084f4:	2180      	movs	r1, #128	@ 0x80
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fcbc 	bl	8008e74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fcb8 	bl	8008e74 <USBD_LL_StallEP>
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d042      	beq.n	80085a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f000 f842 	bl	80085b0 <USBD_GetLen>
 800852c:	4603      	mov	r3, r0
 800852e:	3301      	adds	r3, #1
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008536:	d808      	bhi.n	800854a <USBD_GetString+0x3e>
 8008538:	6938      	ldr	r0, [r7, #16]
 800853a:	f000 f839 	bl	80085b0 <USBD_GetLen>
 800853e:	4603      	mov	r3, r0
 8008540:	3301      	adds	r3, #1
 8008542:	b29b      	uxth	r3, r3
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	e001      	b.n	800854e <USBD_GetString+0x42>
 800854a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	4413      	add	r3, r2
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	7812      	ldrb	r2, [r2, #0]
 800855c:	701a      	strb	r2, [r3, #0]
  idx++;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	3301      	adds	r3, #1
 8008562:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	2203      	movs	r2, #3
 800856c:	701a      	strb	r2, [r3, #0]
  idx++;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	3301      	adds	r3, #1
 8008572:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008574:	e013      	b.n	800859e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008576:	7dfb      	ldrb	r3, [r7, #23]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	4413      	add	r3, r2
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3301      	adds	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
    idx++;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	3301      	adds	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4413      	add	r3, r2
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
    idx++;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	3301      	adds	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e7      	bne.n	8008576 <USBD_GetString+0x6a>
 80085a6:	e000      	b.n	80085aa <USBD_GetString+0x9e>
    return;
 80085a8:	bf00      	nop
  }
}
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085c0:	e005      	b.n	80085ce <USBD_GetLen+0x1e>
  {
    len++;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	3301      	adds	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3301      	adds	r3, #1
 80085cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f5      	bne.n	80085c2 <USBD_GetLen+0x12>
  }

  return len;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	2100      	movs	r1, #0
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fcbb 	bl	8008f86 <USBD_LL_Transmit>

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	2100      	movs	r1, #0
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fcaa 	bl	8008f86 <USBD_LL_Transmit>

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2203      	movs	r2, #3
 800864c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	2100      	movs	r1, #0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fcae 	bl	8008fc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fc9d 	bl	8008fc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2204      	movs	r2, #4
 80086a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086a8:	2300      	movs	r3, #0
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fc69 	bl	8008f86 <USBD_LL_Transmit>

  return USBD_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2205      	movs	r2, #5
 80086ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ce:	2300      	movs	r3, #0
 80086d0:	2200      	movs	r2, #0
 80086d2:	2100      	movs	r1, #0
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fc77 	bl	8008fc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e8:	2200      	movs	r2, #0
 80086ea:	4912      	ldr	r1, [pc, #72]	@ (8008734 <MX_USB_DEVICE_Init+0x50>)
 80086ec:	4812      	ldr	r0, [pc, #72]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 80086ee:	f7fe fcf7 	bl	80070e0 <USBD_Init>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f8:	f7f8 fa66 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086fc:	490f      	ldr	r1, [pc, #60]	@ (800873c <MX_USB_DEVICE_Init+0x58>)
 80086fe:	480e      	ldr	r0, [pc, #56]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008700:	f7fe fd1e 	bl	8007140 <USBD_RegisterClass>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800870a:	f7f8 fa5d 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800870e:	490c      	ldr	r1, [pc, #48]	@ (8008740 <MX_USB_DEVICE_Init+0x5c>)
 8008710:	4809      	ldr	r0, [pc, #36]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008712:	f7fe fc55 	bl	8006fc0 <USBD_CDC_RegisterInterface>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800871c:	f7f8 fa54 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008720:	4805      	ldr	r0, [pc, #20]	@ (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008722:	f7fe fd43 	bl	80071ac <USBD_Start>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800872c:	f7f8 fa4c 	bl	8000bc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008730:	bf00      	nop
 8008732:	bd80      	pop	{r7, pc}
 8008734:	200000ac 	.word	0x200000ac
 8008738:	20000350 	.word	0x20000350
 800873c:	20000018 	.word	0x20000018
 8008740:	20000098 	.word	0x20000098

08008744 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008748:	2200      	movs	r2, #0
 800874a:	4905      	ldr	r1, [pc, #20]	@ (8008760 <CDC_Init_FS+0x1c>)
 800874c:	4805      	ldr	r0, [pc, #20]	@ (8008764 <CDC_Init_FS+0x20>)
 800874e:	f7fe fc51 	bl	8006ff4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008752:	4905      	ldr	r1, [pc, #20]	@ (8008768 <CDC_Init_FS+0x24>)
 8008754:	4803      	ldr	r0, [pc, #12]	@ (8008764 <CDC_Init_FS+0x20>)
 8008756:	f7fe fc6f 	bl	8007038 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800875a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800875c:	4618      	mov	r0, r3
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000e2c 	.word	0x20000e2c
 8008764:	20000350 	.word	0x20000350
 8008768:	2000062c 	.word	0x2000062c

0800876c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008770:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	4613      	mov	r3, r2
 800878a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b23      	cmp	r3, #35	@ 0x23
 8008790:	d84a      	bhi.n	8008828 <CDC_Control_FS+0xac>
 8008792:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <CDC_Control_FS+0x1c>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	08008829 	.word	0x08008829
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008829 	.word	0x08008829
 80087a4:	08008829 	.word	0x08008829
 80087a8:	08008829 	.word	0x08008829
 80087ac:	08008829 	.word	0x08008829
 80087b0:	08008829 	.word	0x08008829
 80087b4:	08008829 	.word	0x08008829
 80087b8:	08008829 	.word	0x08008829
 80087bc:	08008829 	.word	0x08008829
 80087c0:	08008829 	.word	0x08008829
 80087c4:	08008829 	.word	0x08008829
 80087c8:	08008829 	.word	0x08008829
 80087cc:	08008829 	.word	0x08008829
 80087d0:	08008829 	.word	0x08008829
 80087d4:	08008829 	.word	0x08008829
 80087d8:	08008829 	.word	0x08008829
 80087dc:	08008829 	.word	0x08008829
 80087e0:	08008829 	.word	0x08008829
 80087e4:	08008829 	.word	0x08008829
 80087e8:	08008829 	.word	0x08008829
 80087ec:	08008829 	.word	0x08008829
 80087f0:	08008829 	.word	0x08008829
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008829 	.word	0x08008829
 80087fc:	08008829 	.word	0x08008829
 8008800:	08008829 	.word	0x08008829
 8008804:	08008829 	.word	0x08008829
 8008808:	08008829 	.word	0x08008829
 800880c:	08008829 	.word	0x08008829
 8008810:	08008829 	.word	0x08008829
 8008814:	08008829 	.word	0x08008829
 8008818:	08008829 	.word	0x08008829
 800881c:	08008829 	.word	0x08008829
 8008820:	08008829 	.word	0x08008829
 8008824:	08008829 	.word	0x08008829
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008828:	bf00      	nop
  }

  return (USBD_OK);
 800882a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4805      	ldr	r0, [pc, #20]	@ (800885c <CDC_Receive_FS+0x24>)
 8008846:	f7fe fbf7 	bl	8007038 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800884a:	4804      	ldr	r0, [pc, #16]	@ (800885c <CDC_Receive_FS+0x24>)
 800884c:	f7fe fc12 	bl	8007074 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008850:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000350 	.word	0x20000350

08008860 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
	...

08008884 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2212      	movs	r2, #18
 8008894:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008896:	4b03      	ldr	r3, [pc, #12]	@ (80088a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	200000c8 	.word	0x200000c8

080088a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	6039      	str	r1, [r7, #0]
 80088b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2204      	movs	r2, #4
 80088b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088ba:	4b03      	ldr	r3, [pc, #12]	@ (80088c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	200000dc 	.word	0x200000dc

080088cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	6039      	str	r1, [r7, #0]
 80088d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d105      	bne.n	80088ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4907      	ldr	r1, [pc, #28]	@ (8008900 <USBD_FS_ProductStrDescriptor+0x34>)
 80088e2:	4808      	ldr	r0, [pc, #32]	@ (8008904 <USBD_FS_ProductStrDescriptor+0x38>)
 80088e4:	f7ff fe12 	bl	800850c <USBD_GetString>
 80088e8:	e004      	b.n	80088f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	4904      	ldr	r1, [pc, #16]	@ (8008900 <USBD_FS_ProductStrDescriptor+0x34>)
 80088ee:	4805      	ldr	r0, [pc, #20]	@ (8008904 <USBD_FS_ProductStrDescriptor+0x38>)
 80088f0:	f7ff fe0c 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 80088f4:	4b02      	ldr	r3, [pc, #8]	@ (8008900 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	2000162c 	.word	0x2000162c
 8008904:	08009150 	.word	0x08009150

08008908 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	6039      	str	r1, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	4904      	ldr	r1, [pc, #16]	@ (8008928 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008918:	4804      	ldr	r0, [pc, #16]	@ (800892c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800891a:	f7ff fdf7 	bl	800850c <USBD_GetString>
  return USBD_StrDesc;
 800891e:	4b02      	ldr	r3, [pc, #8]	@ (8008928 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	2000162c 	.word	0x2000162c
 800892c:	08009168 	.word	0x08009168

08008930 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	6039      	str	r1, [r7, #0]
 800893a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	221a      	movs	r2, #26
 8008940:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008942:	f000 f843 	bl	80089cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008946:	4b02      	ldr	r3, [pc, #8]	@ (8008950 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200000e0 	.word	0x200000e0

08008954 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	6039      	str	r1, [r7, #0]
 800895e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d105      	bne.n	8008972 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	4907      	ldr	r1, [pc, #28]	@ (8008988 <USBD_FS_ConfigStrDescriptor+0x34>)
 800896a:	4808      	ldr	r0, [pc, #32]	@ (800898c <USBD_FS_ConfigStrDescriptor+0x38>)
 800896c:	f7ff fdce 	bl	800850c <USBD_GetString>
 8008970:	e004      	b.n	800897c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4904      	ldr	r1, [pc, #16]	@ (8008988 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008976:	4805      	ldr	r0, [pc, #20]	@ (800898c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008978:	f7ff fdc8 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 800897c:	4b02      	ldr	r3, [pc, #8]	@ (8008988 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	2000162c 	.word	0x2000162c
 800898c:	0800917c 	.word	0x0800917c

08008990 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d105      	bne.n	80089ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4907      	ldr	r1, [pc, #28]	@ (80089c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089a6:	4808      	ldr	r0, [pc, #32]	@ (80089c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089a8:	f7ff fdb0 	bl	800850c <USBD_GetString>
 80089ac:	e004      	b.n	80089b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	4904      	ldr	r1, [pc, #16]	@ (80089c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089b2:	4805      	ldr	r0, [pc, #20]	@ (80089c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089b4:	f7ff fdaa 	bl	800850c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089b8:	4b02      	ldr	r3, [pc, #8]	@ (80089c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	2000162c 	.word	0x2000162c
 80089c8:	08009188 	.word	0x08009188

080089cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008a10 <Get_SerialNum+0x44>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <Get_SerialNum+0x48>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089de:	4b0e      	ldr	r3, [pc, #56]	@ (8008a18 <Get_SerialNum+0x4c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4413      	add	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089f2:	2208      	movs	r2, #8
 80089f4:	4909      	ldr	r1, [pc, #36]	@ (8008a1c <Get_SerialNum+0x50>)
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 f814 	bl	8008a24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089fc:	2204      	movs	r2, #4
 80089fe:	4908      	ldr	r1, [pc, #32]	@ (8008a20 <Get_SerialNum+0x54>)
 8008a00:	68b8      	ldr	r0, [r7, #8]
 8008a02:	f000 f80f 	bl	8008a24 <IntToUnicode>
  }
}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	1fff7a10 	.word	0x1fff7a10
 8008a14:	1fff7a14 	.word	0x1fff7a14
 8008a18:	1fff7a18 	.word	0x1fff7a18
 8008a1c:	200000e2 	.word	0x200000e2
 8008a20:	200000f2 	.word	0x200000f2

08008a24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]
 8008a3a:	e027      	b.n	8008a8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	0f1b      	lsrs	r3, r3, #28
 8008a40:	2b09      	cmp	r3, #9
 8008a42:	d80b      	bhi.n	8008a5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	0f1b      	lsrs	r3, r3, #28
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	440b      	add	r3, r1
 8008a54:	3230      	adds	r2, #48	@ 0x30
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	e00a      	b.n	8008a72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	0f1b      	lsrs	r3, r3, #28
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	4619      	mov	r1, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	440b      	add	r3, r1
 8008a6c:	3237      	adds	r2, #55	@ 0x37
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	4413      	add	r3, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	75fb      	strb	r3, [r7, #23]
 8008a8c:	7dfa      	ldrb	r2, [r7, #23]
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d3d3      	bcc.n	8008a3c <IntToUnicode+0x18>
  }
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08a      	sub	sp, #40	@ 0x28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aac:	f107 0314 	add.w	r3, r7, #20
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	609a      	str	r2, [r3, #8]
 8008ab8:	60da      	str	r2, [r3, #12]
 8008aba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ac4:	d13a      	bne.n	8008b3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	4b1e      	ldr	r3, [pc, #120]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	4a1d      	ldr	r2, [pc, #116]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008ad0:	f043 0301 	orr.w	r3, r3, #1
 8008ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008ae2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008af0:	2303      	movs	r3, #3
 8008af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008af4:	230a      	movs	r3, #10
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	4619      	mov	r1, r3
 8008afe:	4812      	ldr	r0, [pc, #72]	@ (8008b48 <HAL_PCD_MspInit+0xa4>)
 8008b00:	f7f9 fbb0 	bl	8002264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b04:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b08:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b18:	4a0a      	ldr	r2, [pc, #40]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008b1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b20:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <HAL_PCD_MspInit+0xa0>)
 8008b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2043      	movs	r0, #67	@ 0x43
 8008b32:	f7f9 fb60 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b36:	2043      	movs	r0, #67	@ 0x43
 8008b38:	f7f9 fb79 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b3c:	bf00      	nop
 8008b3e:	3728      	adds	r7, #40	@ 0x28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	40023800 	.word	0x40023800
 8008b48:	40020000 	.word	0x40020000

08008b4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b60:	4619      	mov	r1, r3
 8008b62:	4610      	mov	r0, r2
 8008b64:	f7fe fb6f 	bl	8007246 <USBD_LL_SetupStage>
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	4613      	mov	r3, r2
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	440b      	add	r3, r1
 8008b90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f7fe fba9 	bl	80072f0 <USBD_LL_DataOutStage>
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	3320      	adds	r3, #32
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	f7fe fc42 	bl	8007456 <USBD_LL_DataInStage>
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fd7c 	bl	80076e6 <USBD_LL_SOF>
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	79db      	ldrb	r3, [r3, #7]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d001      	beq.n	8008c0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c0a:	f7f7 ffdd 	bl	8000bc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c14:	7bfa      	ldrb	r2, [r7, #15]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fd20 	bl	800765e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe fcc8 	bl	80075ba <USBD_LL_Reset>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fd1b 	bl	800767e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7adb      	ldrb	r3, [r3, #11]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c68:	4b04      	ldr	r3, [pc, #16]	@ (8008c7c <HAL_PCD_SuspendCallback+0x48>)
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	4a03      	ldr	r2, [pc, #12]	@ (8008c7c <HAL_PCD_SuspendCallback+0x48>)
 8008c6e:	f043 0306 	orr.w	r3, r3, #6
 8008c72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	e000ed00 	.word	0xe000ed00

08008c80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fd11 	bl	80076b6 <USBD_LL_Resume>
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe fd69 	bl	800778a <USBD_LL_IsoOUTIncomplete>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fd25 	bl	8007726 <USBD_LL_IsoINIncomplete>
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe fd7b 	bl	80077ee <USBD_LL_DevConnected>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fd78 	bl	8007804 <USBD_LL_DevDisconnected>
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d13c      	bne.n	8008da6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d2c:	4a20      	ldr	r2, [pc, #128]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a1e      	ldr	r2, [pc, #120]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008d42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d44:	4b1a      	ldr	r3, [pc, #104]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d46:	2204      	movs	r2, #4
 8008d48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d4a:	4b19      	ldr	r3, [pc, #100]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d50:	4b17      	ldr	r3, [pc, #92]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d56:	4b16      	ldr	r3, [pc, #88]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d58:	2202      	movs	r2, #2
 8008d5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d5c:	4b14      	ldr	r3, [pc, #80]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d62:	4b13      	ldr	r3, [pc, #76]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d68:	4b11      	ldr	r3, [pc, #68]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d6e:	4b10      	ldr	r3, [pc, #64]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d74:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d7a:	480d      	ldr	r0, [pc, #52]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d7c:	f7f9 fc0f 	bl	800259e <HAL_PCD_Init>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d86:	f7f7 ff1f 	bl	8000bc8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d8a:	2180      	movs	r1, #128	@ 0x80
 8008d8c:	4808      	ldr	r0, [pc, #32]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d8e:	f7fa fe3c 	bl	8003a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d92:	2240      	movs	r2, #64	@ 0x40
 8008d94:	2100      	movs	r1, #0
 8008d96:	4806      	ldr	r0, [pc, #24]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008d98:	f7fa fdf0 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d9c:	2280      	movs	r2, #128	@ 0x80
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4803      	ldr	r0, [pc, #12]	@ (8008db0 <USBD_LL_Init+0x94>)
 8008da2:	f7fa fdeb 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	2000182c 	.word	0x2000182c

08008db4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7f9 fcf6 	bl	80027bc <HAL_PCD_Start>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f942 	bl	8009060 <USBD_Get_USB_Status>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	4608      	mov	r0, r1
 8008df4:	4611      	mov	r1, r2
 8008df6:	461a      	mov	r2, r3
 8008df8:	4603      	mov	r3, r0
 8008dfa:	70fb      	strb	r3, [r7, #3]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70bb      	strb	r3, [r7, #2]
 8008e00:	4613      	mov	r3, r2
 8008e02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e12:	78bb      	ldrb	r3, [r7, #2]
 8008e14:	883a      	ldrh	r2, [r7, #0]
 8008e16:	78f9      	ldrb	r1, [r7, #3]
 8008e18:	f7fa f9ca 	bl	80031b0 <HAL_PCD_EP_Open>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f91c 	bl	8009060 <USBD_Get_USB_Status>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fa fa15 	bl	8003284 <HAL_PCD_EP_Close>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f8fd 	bl	8009060 <USBD_Get_USB_Status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fa facd 	bl	8003432 <HAL_PCD_EP_SetStall>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f8de 	bl	8009060 <USBD_Get_USB_Status>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fa fb11 	bl	80034f8 <HAL_PCD_EP_ClrStall>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f8bf 	bl	8009060 <USBD_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	da0b      	bge.n	8008f24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3316      	adds	r3, #22
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	e00b      	b.n	8008f3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	440b      	add	r3, r1
 8008f36:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008f3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fa f8fe 	bl	8003168 <HAL_PCD_SetAddress>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f874 	bl	8009060 <USBD_Get_USB_Status>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b086      	sub	sp, #24
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	460b      	mov	r3, r1
 8008f94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fa4:	7af9      	ldrb	r1, [r7, #11]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	f7fa fa08 	bl	80033be <HAL_PCD_EP_Transmit>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 f853 	bl	8009060 <USBD_Get_USB_Status>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	607a      	str	r2, [r7, #4]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fe6:	7af9      	ldrb	r1, [r7, #11]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	f7fa f994 	bl	8003318 <HAL_PCD_EP_Receive>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f832 	bl	8009060 <USBD_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009000:	7dbb      	ldrb	r3, [r7, #22]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7fa f9b4 	bl	800338e <HAL_PCD_EP_GetRxCount>
 8009026:	4603      	mov	r3, r0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009038:	4b03      	ldr	r3, [pc, #12]	@ (8009048 <USBD_static_malloc+0x18>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20001d10 	.word	0x20001d10

0800904c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]

}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d817      	bhi.n	80090a4 <USBD_Get_USB_Status+0x44>
 8009074:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <USBD_Get_USB_Status+0x1c>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	0800908d 	.word	0x0800908d
 8009080:	08009093 	.word	0x08009093
 8009084:	08009099 	.word	0x08009099
 8009088:	0800909f 	.word	0x0800909f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	e00b      	b.n	80090aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009092:	2303      	movs	r3, #3
 8009094:	73fb      	strb	r3, [r7, #15]
    break;
 8009096:	e008      	b.n	80090aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
    break;
 800909c:	e005      	b.n	80090aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	73fb      	strb	r3, [r7, #15]
    break;
 80090a2:	e002      	b.n	80090aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	73fb      	strb	r3, [r7, #15]
    break;
 80090a8:	bf00      	nop
  }
  return usb_status;
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <memset>:
 80090b8:	4402      	add	r2, r0
 80090ba:	4603      	mov	r3, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <__libc_init_array>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009100 <__libc_init_array+0x38>)
 80090cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009104 <__libc_init_array+0x3c>)
 80090ce:	1b64      	subs	r4, r4, r5
 80090d0:	10a4      	asrs	r4, r4, #2
 80090d2:	2600      	movs	r6, #0
 80090d4:	42a6      	cmp	r6, r4
 80090d6:	d109      	bne.n	80090ec <__libc_init_array+0x24>
 80090d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009108 <__libc_init_array+0x40>)
 80090da:	4c0c      	ldr	r4, [pc, #48]	@ (800910c <__libc_init_array+0x44>)
 80090dc:	f000 f818 	bl	8009110 <_init>
 80090e0:	1b64      	subs	r4, r4, r5
 80090e2:	10a4      	asrs	r4, r4, #2
 80090e4:	2600      	movs	r6, #0
 80090e6:	42a6      	cmp	r6, r4
 80090e8:	d105      	bne.n	80090f6 <__libc_init_array+0x2e>
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f0:	4798      	blx	r3
 80090f2:	3601      	adds	r6, #1
 80090f4:	e7ee      	b.n	80090d4 <__libc_init_array+0xc>
 80090f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fa:	4798      	blx	r3
 80090fc:	3601      	adds	r6, #1
 80090fe:	e7f2      	b.n	80090e6 <__libc_init_array+0x1e>
 8009100:	080091c8 	.word	0x080091c8
 8009104:	080091c8 	.word	0x080091c8
 8009108:	080091c8 	.word	0x080091c8
 800910c:	080091cc 	.word	0x080091cc

08009110 <_init>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr

0800911c <_fini>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr
