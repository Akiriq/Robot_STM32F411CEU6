
Robot_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800986c  0800986c  0000a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009904  08009904  0000b0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009904  08009904  0000a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800990c  0800990c  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800990c  0800990c  0000a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009910  08009910  0000a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08009914  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e3c  200000fc  08009a10  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  08009a10  0000bf38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ef0  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1f  00000000  00000000  0002201c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00025b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001068  00000000  00000000  000270b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af6f  00000000  00000000  00028120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198d3  00000000  00000000  0004308f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e462  00000000  00000000  0005c962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fadc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ac  00000000  00000000  000fae08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001007b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009854 	.word	0x08009854

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08009854 	.word	0x08009854

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 fcc8 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f816 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fad6 	bl	8000ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000514:	f000 f87a 	bl	800060c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000518:	f000 f8ca 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800051c:	f008 fc84 	bl	8008e28 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000520:	f000 f8fc 	bl	800071c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f97e 	bl	8000824 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000528:	f000 f9d4 	bl	80008d4 <MX_TIM4_Init>
  MX_TIM10_Init();
 800052c:	f000 fa2c 	bl	8000988 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000530:	f000 fa78 	bl	8000a24 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  movement();
 8000534:	f000 fc7c 	bl	8000e30 <movement>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x34>

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f009 f956 	bl	80097fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a26      	ldr	r2, [pc, #152]	@ (8000604 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b24      	ldr	r3, [pc, #144]	@ (8000604 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <SystemClock_Config+0xcc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b0:	23c0      	movs	r3, #192	@ 0xc0
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fca7 	bl	8003f14 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 fb0a 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 ff09 	bl	8004404 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f8:	f000 faf4 	bl	8000be4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	@ 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x9c>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800064e:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800066e:	f001 fcab 	bl	8001fc8 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fab4 	bl	8000be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800068e:	f001 fcdf 	bl	8002050 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 faa4 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000118 	.word	0x20000118
 80006a8:	40012000 	.word	0x40012000
 80006ac:	0f000001 	.word	0x0f000001

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	@ (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f004 f837 	bl	8004774 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 fa6a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000160 	.word	0x20000160
 8000718:	40013000 	.word	0x40013000

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b092      	sub	sp, #72	@ 0x48
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f009 f858 	bl	80097fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_TIM1_Init+0x100>)
 800074e:	4a34      	ldr	r2, [pc, #208]	@ (8000820 <MX_TIM1_Init+0x104>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000752:	4b32      	ldr	r3, [pc, #200]	@ (800081c <MX_TIM1_Init+0x100>)
 8000754:	225f      	movs	r2, #95	@ 0x5f
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b30      	ldr	r3, [pc, #192]	@ (800081c <MX_TIM1_Init+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800075e:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_TIM1_Init+0x100>)
 8000760:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <MX_TIM1_Init+0x100>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <MX_TIM1_Init+0x100>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <MX_TIM1_Init+0x100>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000778:	4828      	ldr	r0, [pc, #160]	@ (800081c <MX_TIM1_Init+0x100>)
 800077a:	f004 fb58 	bl	8004e2e <HAL_TIM_PWM_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000784:	f000 fa2e 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000790:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000794:	4619      	mov	r1, r3
 8000796:	4821      	ldr	r0, [pc, #132]	@ (800081c <MX_TIM1_Init+0x100>)
 8000798:	f004 ffac 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 fa1f 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a6:	2360      	movs	r3, #96	@ 0x60
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_TIM1_Init+0x100>)
 80007cc:	f004 fc92 	bl	80050f4 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007d6:	f000 fa05 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <MX_TIM1_Init+0x100>)
 80007fe:	f004 ffe7 	bl	80057d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000808:	f000 f9ec 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_TIM1_Init+0x100>)
 800080e:	f001 f9f9 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3748      	adds	r7, #72	@ 0x48
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001b8 	.word	0x200001b8
 8000820:	40010000 	.word	0x40010000

08000824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000850:	225f      	movs	r2, #95	@ 0x5f
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800085c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <MX_TIM2_Init+0xac>)
 8000870:	f004 fadd 	bl	8004e2e <HAL_TIM_PWM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800087a:	f000 f9b3 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	4619      	mov	r1, r3
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <MX_TIM2_Init+0xac>)
 800088e:	f004 ff31 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000898:	f000 f9a4 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	@ 0x60
 800089e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_TIM2_Init+0xac>)
 80008b4:	f004 fc1e 	bl	80050f4 <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008be:	f000 f991 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <MX_TIM2_Init+0xac>)
 80008c4:	f001 f99e 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000200 	.word	0x20000200

080008d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f6:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_TIM4_Init+0xac>)
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <MX_TIM4_Init+0xb0>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_TIM4_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_TIM4_Init+0xac>)
 800090a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800090e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800091c:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_TIM4_Init+0xac>)
 800091e:	f004 fa86 	bl	8004e2e <HAL_TIM_PWM_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f95c 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_TIM4_Init+0xac>)
 800093c:	f004 feda 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000946:	f000 f94d 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	@ 0x60
 800094c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000962:	f004 fbc7 	bl	80050f4 <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800096c:	f000 f93a 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <MX_TIM4_Init+0xac>)
 8000972:	f001 f947 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000248 	.word	0x20000248
 8000984:	40000800 	.word	0x40000800

08000988 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <MX_TIM10_Init+0x98>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009c6:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009c8:	f004 f9e2 	bl	8004d90 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80009d2:	f000 f907 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009d8:	f004 fa29 	bl	8004e2e <HAL_TIM_PWM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80009e2:	f000 f8ff 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <MX_TIM10_Init+0x94>)
 80009fe:	f004 fb79 	bl	80050f4 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000a08:	f000 f8ec 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <MX_TIM10_Init+0x94>)
 8000a0e:	f001 f8f9 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000290 	.word	0x20000290
 8000a20:	40014400 	.word	0x40014400

08000a24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_TIM11_Init+0x98>)
 8000a40:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a44:	225f      	movs	r2, #95	@ 0x5f
 8000a46:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a50:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000a54:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a64:	f004 f994 	bl	8004d90 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000a6e:	f000 f8b9 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a74:	f004 f9db 	bl	8004e2e <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 f8b1 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	@ 0x60
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000a9a:	f004 fb2b 	bl	80050f4 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000aa4:	f000 f89e 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM11_Init+0x94>)
 8000aaa:	f001 f8ab 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002d8 	.word	0x200002d8
 8000abc:	40014800 	.word	0x40014800

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b38      	ldr	r3, [pc, #224]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a37      	ldr	r2, [pc, #220]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <MX_GPIO_Init+0x118>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4c:	4823      	ldr	r0, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0x11c>)
 8000b4e:	f001 ff5b 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b58:	4821      	ldr	r0, [pc, #132]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000b5a:	f001 ff55 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4819      	ldr	r0, [pc, #100]	@ (8000bdc <MX_GPIO_Init+0x11c>)
 8000b78:	f001 fdaa 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DSW_0_Pin DSW_1_Pin DSW_2_Pin DSW_3_Pin */
  GPIO_InitStruct.Pin = DSW_0_Pin|DSW_1_Pin|DSW_2_Pin|DSW_3_Pin;
 8000b7c:	f243 4304 	movw	r3, #13316	@ 0x3404
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4813      	ldr	r0, [pc, #76]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000b92:	f001 fd9d 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000b96:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000bb0:	f001 fd8e 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_GPIO_Init+0x120>)
 8000bca:	f001 fd81 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020400 	.word	0x40020400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <Error_Handler+0x8>

08000bf0 <nRF24_CE_L>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;


static inline void nRF24_CE_L() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfa:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <nRF24_CE_L+0x14>)
 8000bfc:	f001 ff04 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020400 	.word	0x40020400

08000c08 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c12:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <nRF24_CE_H+0x14>)
 8000c14:	f001 fef8 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020400 	.word	0x40020400

08000c20 <Toggle_LED>:
nRF24_RXResult pipe;

uint32_t i, j, k;

void Toggle_LED()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000c24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <Toggle_LED+0x14>)
 8000c2a:	f001 ff06 	bl	8002a3a <HAL_GPIO_TogglePin>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020800 	.word	0x40020800

08000c38 <nRF24_TransmitPacket>:
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <nRF24_TransmitPacket+0x80>)
 8000c46:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000c48:	f7ff ffd2 	bl	8000bf0 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 fe06 	bl	8001862 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000c56:	f7ff ffd7 	bl	8000c08 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8000c5a:	f000 fdca 	bl	80017f2 <nRF24_GetStatus>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1e5a      	subs	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f1      	bne.n	8000c5a <nRF24_TransmitPacket+0x22>
 8000c76:	e000      	b.n	8000c7a <nRF24_TransmitPacket+0x42>
			break;
 8000c78:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000c7a:	f7ff ffb9 	bl	8000bf0 <nRF24_CE_L>

	if (!wait) {
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8000c84:	2302      	movs	r3, #2
 8000c86:	e012      	b.n	8000cae <nRF24_TransmitPacket+0x76>
	}


	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8000c88:	f000 fdd6 	bl	8001838 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <nRF24_TransmitPacket+0x62>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e009      	b.n	8000cae <nRF24_TransmitPacket+0x76>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f003 0320 	and.w	r3, r3, #32
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <nRF24_TransmitPacket+0x70>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e002      	b.n	8000cae <nRF24_TransmitPacket+0x76>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8000ca8:	f000 fdb6 	bl	8001818 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	000fffff 	.word	0x000fffff

08000cbc <send_payload>:

void send_payload(uint8_t* payload, uint8_t length)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fc36 	bl	800153a <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000cce:	f000 fdb3 	bl	8001838 <nRF24_ClearIRQFlags>


	// Transmit a packet
	tx_res = nRF24_TransmitPacket(payload, length);
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffae 	bl	8000c38 <nRF24_TransmitPacket>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <send_payload+0x64>)
 8000ce2:	701a      	strb	r2, [r3, #0]
	switch (tx_res) {
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <send_payload+0x64>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d006      	beq.n	8000cfa <send_payload+0x3e>
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	dc06      	bgt.n	8000cfe <send_payload+0x42>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d006      	beq.n	8000d02 <send_payload+0x46>
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d006      	beq.n	8000d06 <send_payload+0x4a>
		case nRF24_TX_MAXRT:

			break;
		default:

			break;
 8000cf8:	e001      	b.n	8000cfe <send_payload+0x42>
			break;
 8000cfa:	bf00      	nop
 8000cfc:	e004      	b.n	8000d08 <send_payload+0x4c>
			break;
 8000cfe:	bf00      	nop
 8000d00:	e002      	b.n	8000d08 <send_payload+0x4c>
			break;
 8000d02:	bf00      	nop
 8000d04:	e000      	b.n	8000d08 <send_payload+0x4c>
			break;
 8000d06:	bf00      	nop
	}

	HAL_Delay(5);
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f001 f939 	bl	8001f80 <HAL_Delay>
    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fc13 	bl	800153a <nRF24_SetOperationalMode>


    // Put the transceiver to the RX mode
    nRF24_CE_H();
 8000d14:	f7ff ff78 	bl	8000c08 <nRF24_CE_H>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000034e 	.word	0x2000034e

08000d24 <channel>:

// this fonction check the dipswitch to select a channel when the robot start.
uint8_t channel(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	uint8_t channel = 115;
 8000d2a:	2373      	movs	r3, #115	@ 0x73
 8000d2c:	71fb      	strb	r3, [r7, #7]
	uint8_t set_channel = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71bb      	strb	r3, [r7, #6]
	//if(HAL_GPIO_ReadPin (DSW_0_GPIO_Port, DSW_0_Pin)) set_channel += 1;
	if(HAL_GPIO_ReadPin (DSW_1_GPIO_Port, DSW_1_Pin)) set_channel += 2;
 8000d32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d36:	483d      	ldr	r0, [pc, #244]	@ (8000e2c <channel+0x108>)
 8000d38:	f001 fe4e 	bl	80029d8 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <channel+0x24>
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	3302      	adds	r3, #2
 8000d46:	71bb      	strb	r3, [r7, #6]
	if(HAL_GPIO_ReadPin (DSW_2_GPIO_Port, DSW_2_Pin)) set_channel += 4;
 8000d48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4c:	4837      	ldr	r0, [pc, #220]	@ (8000e2c <channel+0x108>)
 8000d4e:	f001 fe43 	bl	80029d8 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <channel+0x3a>
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	71bb      	strb	r3, [r7, #6]
	if(HAL_GPIO_ReadPin (DSW_3_GPIO_Port, DSW_3_Pin)) set_channel += 8;
 8000d5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d62:	4832      	ldr	r0, [pc, #200]	@ (8000e2c <channel+0x108>)
 8000d64:	f001 fe38 	bl	80029d8 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <channel+0x50>
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	3308      	adds	r3, #8
 8000d72:	71bb      	strb	r3, [r7, #6]

	switch(set_channel)
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d852      	bhi.n	8000e20 <channel+0xfc>
 8000d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d80 <channel+0x5c>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dc7 	.word	0x08000dc7
 8000d88:	08000dcd 	.word	0x08000dcd
 8000d8c:	08000dd3 	.word	0x08000dd3
 8000d90:	08000dd9 	.word	0x08000dd9
 8000d94:	08000ddf 	.word	0x08000ddf
 8000d98:	08000de5 	.word	0x08000de5
 8000d9c:	08000deb 	.word	0x08000deb
 8000da0:	08000df1 	.word	0x08000df1
 8000da4:	08000df7 	.word	0x08000df7
 8000da8:	08000dfd 	.word	0x08000dfd
 8000dac:	08000e03 	.word	0x08000e03
 8000db0:	08000e09 	.word	0x08000e09
 8000db4:	08000e0f 	.word	0x08000e0f
 8000db8:	08000e15 	.word	0x08000e15
 8000dbc:	08000e1b 	.word	0x08000e1b
	{
	case 0 :
		channel = 115;
 8000dc0:	2373      	movs	r3, #115	@ 0x73
 8000dc2:	71fb      	strb	r3, [r7, #7]
		break;
 8000dc4:	e02c      	b.n	8000e20 <channel+0xfc>
	case 1 :
		channel = 10;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	71fb      	strb	r3, [r7, #7]
		break;
 8000dca:	e029      	b.n	8000e20 <channel+0xfc>
	case 2 :
		channel = 20;
 8000dcc:	2314      	movs	r3, #20
 8000dce:	71fb      	strb	r3, [r7, #7]
		break;
 8000dd0:	e026      	b.n	8000e20 <channel+0xfc>
	case 3 :
		channel = 30;
 8000dd2:	231e      	movs	r3, #30
 8000dd4:	71fb      	strb	r3, [r7, #7]
		break;
 8000dd6:	e023      	b.n	8000e20 <channel+0xfc>
	case 4 :
		channel = 40;
 8000dd8:	2328      	movs	r3, #40	@ 0x28
 8000dda:	71fb      	strb	r3, [r7, #7]
		break;
 8000ddc:	e020      	b.n	8000e20 <channel+0xfc>
	case 5 :
		channel = 50;
 8000dde:	2332      	movs	r3, #50	@ 0x32
 8000de0:	71fb      	strb	r3, [r7, #7]
		break;
 8000de2:	e01d      	b.n	8000e20 <channel+0xfc>
	case 6 :
		channel = 60;
 8000de4:	233c      	movs	r3, #60	@ 0x3c
 8000de6:	71fb      	strb	r3, [r7, #7]
		break;
 8000de8:	e01a      	b.n	8000e20 <channel+0xfc>
	case 7 :
		channel = 70;
 8000dea:	2346      	movs	r3, #70	@ 0x46
 8000dec:	71fb      	strb	r3, [r7, #7]
		break;
 8000dee:	e017      	b.n	8000e20 <channel+0xfc>
	case 8 :
		channel = 80;
 8000df0:	2350      	movs	r3, #80	@ 0x50
 8000df2:	71fb      	strb	r3, [r7, #7]
		break;
 8000df4:	e014      	b.n	8000e20 <channel+0xfc>
	case 9 :
		channel = 90;
 8000df6:	235a      	movs	r3, #90	@ 0x5a
 8000df8:	71fb      	strb	r3, [r7, #7]
		break;
 8000dfa:	e011      	b.n	8000e20 <channel+0xfc>
	case 10 :
		channel = 100;
 8000dfc:	2364      	movs	r3, #100	@ 0x64
 8000dfe:	71fb      	strb	r3, [r7, #7]
		break;
 8000e00:	e00e      	b.n	8000e20 <channel+0xfc>
	case 11 :
		channel = 110;
 8000e02:	236e      	movs	r3, #110	@ 0x6e
 8000e04:	71fb      	strb	r3, [r7, #7]
		break;
 8000e06:	e00b      	b.n	8000e20 <channel+0xfc>
	case 12 :
		channel = 120;
 8000e08:	2378      	movs	r3, #120	@ 0x78
 8000e0a:	71fb      	strb	r3, [r7, #7]
		break;
 8000e0c:	e008      	b.n	8000e20 <channel+0xfc>
	case 13 :
		channel = 125;
 8000e0e:	237d      	movs	r3, #125	@ 0x7d
 8000e10:	71fb      	strb	r3, [r7, #7]
		break;
 8000e12:	e005      	b.n	8000e20 <channel+0xfc>
	case 14 :
		channel = 127;
 8000e14:	237f      	movs	r3, #127	@ 0x7f
 8000e16:	71fb      	strb	r3, [r7, #7]
		break;
 8000e18:	e002      	b.n	8000e20 <channel+0xfc>
	case 15 :
		channel = 115;
 8000e1a:	2373      	movs	r3, #115	@ 0x73
 8000e1c:	71fb      	strb	r3, [r7, #7]
		break;
 8000e1e:	bf00      	nop
	}

	return channel;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40020400 	.word	0x40020400

08000e30 <movement>:

void movement(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	@ 0x38
 8000e34:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim1,TIM_CHANNEL_1 );
 8000e36:	2100      	movs	r1, #0
 8000e38:	48a5      	ldr	r0, [pc, #660]	@ (80010d0 <movement+0x2a0>)
 8000e3a:	f004 f847 	bl	8004ecc <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 8000e3e:	4ba4      	ldr	r3, [pc, #656]	@ (80010d0 <movement+0x2a0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e46:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start( &htim2,TIM_CHANNEL_1 );
 8000e48:	2100      	movs	r1, #0
 8000e4a:	48a2      	ldr	r0, [pc, #648]	@ (80010d4 <movement+0x2a4>)
 8000e4c:	f004 f83e 	bl	8004ecc <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,1500);
 8000e50:	4ba0      	ldr	r3, [pc, #640]	@ (80010d4 <movement+0x2a4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start( &htim11,TIM_CHANNEL_1 );
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	489e      	ldr	r0, [pc, #632]	@ (80010d8 <movement+0x2a8>)
 8000e5e:	f004 f835 	bl	8004ecc <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim11, TIM_CHANNEL_1,1500);
 8000e62:	4b9d      	ldr	r3, [pc, #628]	@ (80010d8 <movement+0x2a8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_Delay(500);
 8000e6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e70:	f001 f886 	bl	8001f80 <HAL_Delay>
	// RX/TX disabled
	nRF24_CE_L();
 8000e74:	f7ff febc 	bl	8000bf0 <nRF24_CE_L>

	// Configure the nRF24L01+

	HAL_Delay(500);
 8000e78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e7c:	f001 f880 	bl	8001f80 <HAL_Delay>
	if (!nRF24_Check())
 8000e80:	f000 fb0e 	bl	80014a0 <nRF24_Check>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10b      	bne.n	8000ea2 <movement+0x72>
	{

		while (1)
		{
			Toggle_LED();
 8000e8a:	f7ff fec9 	bl	8000c20 <Toggle_LED>
			HAL_Delay(100);
 8000e8e:	2064      	movs	r0, #100	@ 0x64
 8000e90:	f001 f876 	bl	8001f80 <HAL_Delay>
			if (nRF24_Check()) break;
 8000e94:	f000 fb04 	bl	80014a0 <nRF24_Check>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d100      	bne.n	8000ea0 <movement+0x70>
			Toggle_LED();
 8000e9e:	e7f4      	b.n	8000e8a <movement+0x5a>
			if (nRF24_Check()) break;
 8000ea0:	bf00      	nop




	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8000ea2:	f000 fab0 	bl	8001406 <nRF24_Init>
	//   - CRC scheme		: 2 byte

	// The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

	// Disable ShockBurst for all RX pipes
	nRF24_DisableAA(0xFF);
 8000ea6:	20ff      	movs	r0, #255	@ 0xff
 8000ea8:	f000 fc7c 	bl	80017a4 <nRF24_DisableAA>

	// Set RF channel
	nRF24_SetRFChannel(channel());
 8000eac:	f7ff ff3a 	bl	8000d24 <channel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fb83 	bl	80015be <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_250kbps);
 8000eb8:	2020      	movs	r0, #32
 8000eba:	f000 fc04 	bl	80016c6 <nRF24_SetDataRate>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f000 fb5c 	bl	800157c <nRF24_SetCRCScheme>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fb88 	bl	80015da <nRF24_SetAddrWidth>

	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR_Rx[] = { 0xE7, 0x1C, 0xE3 };
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_Rx); // program address for RX pipe #1
 8000eca:	4984      	ldr	r1, [pc, #528]	@ (80010dc <movement+0x2ac>)
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fb95 	bl	80015fc <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fc10 	bl	80016fc <nRF24_SetRXPipe>

	// Configure TX PIPE
	static const uint8_t nRF24_ADDR_Tx[] = { 0xE7, 0x1C, 0xE4 };
	nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR_Tx); // program TX address
 8000edc:	4980      	ldr	r1, [pc, #512]	@ (80010e0 <movement+0x2b0>)
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f000 fb8c 	bl	80015fc <nRF24_SetAddr>

	// Set TX power (maximum)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000ee4:	2006      	movs	r0, #6
 8000ee6:	f000 fbd3 	bl	8001690 <nRF24_SetTXPower>

	// Set operational mode (PRX == receiver)
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f000 fb25 	bl	800153a <nRF24_SetOperationalMode>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f000 fb03 	bl	80014fc <nRF24_SetPowerMode>

	// Put the transceiver to the RX mode
	nRF24_CE_H();
 8000ef6:	f7ff fe87 	bl	8000c08 <nRF24_CE_H>

	// The main loop
	while (1)
	{
		HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 f840 	bl	8001f80 <HAL_Delay>
		// watch dog to make hall motor break if no comunication for 100 cycles
		if (++wd > 100)
 8000f00:	4b78      	ldr	r3, [pc, #480]	@ (80010e4 <movement+0x2b4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a77      	ldr	r2, [pc, #476]	@ (80010e4 <movement+0x2b4>)
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b76      	ldr	r3, [pc, #472]	@ (80010e4 <movement+0x2b4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d918      	bls.n	8000f44 <movement+0x114>
		{
			// to make all motor break
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 8000f12:	4b6f      	ldr	r3, [pc, #444]	@ (80010d0 <movement+0x2a0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f1a:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,1500);
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80010d4 <movement+0x2a4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f24:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim11, TIM_CHANNEL_1,1510);
 8000f26:	4b6c      	ldr	r3, [pc, #432]	@ (80010d8 <movement+0x2a8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 8000f2e:	635a      	str	r2, [r3, #52]	@ 0x34

			HAL_Delay(100);
 8000f30:	2064      	movs	r0, #100	@ 0x64
 8000f32:	f001 f825 	bl	8001f80 <HAL_Delay>

			while (1)
			{
				Toggle_LED();
 8000f36:	f7ff fe73 	bl	8000c20 <Toggle_LED>
				HAL_Delay(100);
 8000f3a:	2064      	movs	r0, #100	@ 0x64
 8000f3c:	f001 f820 	bl	8001f80 <HAL_Delay>
				Toggle_LED();
 8000f40:	bf00      	nop
 8000f42:	e7f8      	b.n	8000f36 <movement+0x106>
		// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
		//
		// This is far from best solution, but it's ok for testing purposes
		// More smart way is to use the IRQ pin :)
		//
		if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8000f44:	f000 fc5d 	bl	8001802 <nRF24_GetStatus_RXFIFO>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d042      	beq.n	8000fd4 <movement+0x1a4>
		{

			wd = 0;
 8000f4e:	4b65      	ldr	r3, [pc, #404]	@ (80010e4 <movement+0x2b4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]

			if (++blink > 200)
 8000f54:	4b64      	ldr	r3, [pc, #400]	@ (80010e8 <movement+0x2b8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a63      	ldr	r2, [pc, #396]	@ (80010e8 <movement+0x2b8>)
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b62      	ldr	r3, [pc, #392]	@ (80010e8 <movement+0x2b8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f64:	d904      	bls.n	8000f70 <movement+0x140>
			{
				Toggle_LED();
 8000f66:	f7ff fe5b 	bl	8000c20 <Toggle_LED>
				blink = 0;
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <movement+0x2b8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
			}
			// Get a payload from the transceiver
			pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 8000f70:	495e      	ldr	r1, [pc, #376]	@ (80010ec <movement+0x2bc>)
 8000f72:	485f      	ldr	r0, [pc, #380]	@ (80010f0 <movement+0x2c0>)
 8000f74:	f000 fce2 	bl	800193c <nRF24_ReadPayload>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b5d      	ldr	r3, [pc, #372]	@ (80010f4 <movement+0x2c4>)
 8000f7e:	701a      	strb	r2, [r3, #0]

			// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 8000f80:	f000 fc5a 	bl	8001838 <nRF24_ClearIRQFlags>

			// Print a payload contents to UART


			HAL_Delay(2);
 8000f84:	2002      	movs	r0, #2
 8000f86:	f000 fffb 	bl	8001f80 <HAL_Delay>
			uint8_t message[32] = {0xaa,0x44,0x11,0x22,0x55};
 8000f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80010f8 <movement+0x2c8>)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f92:	6018      	str	r0, [r3, #0]
 8000f94:	3304      	adds	r3, #4
 8000f96:	8019      	strh	r1, [r3, #0]
 8000f98:	1dbb      	adds	r3, r7, #6
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	831a      	strh	r2, [r3, #24]
			send_payload(message, 5);
 8000faa:	463b      	mov	r3, r7
 8000fac:	2105      	movs	r1, #5
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe84 	bl	8000cbc <send_payload>
			//send_payload(nRF24_payload, payload_length);

			dir_R = nRF24_payload[0];
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80010f0 <movement+0x2c0>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b50      	ldr	r3, [pc, #320]	@ (80010fc <movement+0x2cc>)
 8000fba:	701a      	strb	r2, [r3, #0]
			val_S = nRF24_payload[1];
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80010f0 <movement+0x2c0>)
 8000fbe:	785a      	ldrb	r2, [r3, #1]
 8000fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001100 <movement+0x2d0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
			val_X = nRF24_payload[2];
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80010f0 <movement+0x2c0>)
 8000fc6:	789a      	ldrb	r2, [r3, #2]
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001104 <movement+0x2d4>)
 8000fca:	701a      	strb	r2, [r3, #0]
			val_Y = nRF24_payload[3];
 8000fcc:	4b48      	ldr	r3, [pc, #288]	@ (80010f0 <movement+0x2c0>)
 8000fce:	78da      	ldrb	r2, [r3, #3]
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001108 <movement+0x2d8>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		}

		if (dir_R == 0xaa)
 8000fd4:	4b49      	ldr	r3, [pc, #292]	@ (80010fc <movement+0x2cc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2baa      	cmp	r3, #170	@ 0xaa
 8000fda:	f040 8097 	bne.w	800110c <movement+0x2dc>
		{
			// speed of the drum
			uint32_t speed_D = 1510 + val_S*500/256;
 8000fde:	4b48      	ldr	r3, [pc, #288]	@ (8001100 <movement+0x2d0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da00      	bge.n	8000ff2 <movement+0x1c2>
 8000ff0:	33ff      	adds	r3, #255	@ 0xff
 8000ff2:	121b      	asrs	r3, r3, #8
 8000ff4:	f203 53e6 	addw	r3, r3, #1510	@ 0x5e6
 8000ff8:	637b      	str	r3, [r7, #52]	@ 0x34
			if (speed_D > 2000) speed_D = 2000;
 8000ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001000:	d902      	bls.n	8001008 <movement+0x1d8>
 8001002:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34

			//speed of the left wheel
			uint32_t speed_L = 1000 + val_Y*1000/256 - (128 - val_X)*500/128;
 8001008:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <movement+0x2d8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	da00      	bge.n	800101c <movement+0x1ec>
 800101a:	33ff      	adds	r3, #255	@ 0xff
 800101c:	121b      	asrs	r3, r3, #8
 800101e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001022:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <movement+0x2d4>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800102a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	da00      	bge.n	8001038 <movement+0x208>
 8001036:	337f      	adds	r3, #127	@ 0x7f
 8001038:	11db      	asrs	r3, r3, #7
 800103a:	425b      	negs	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (speed_L < 1000) speed_L = 1000;
 8001040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001046:	d203      	bcs.n	8001050 <movement+0x220>
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
 800104e:	e006      	b.n	800105e <movement+0x22e>
			else if (speed_L > 2000) speed_L = 2000;
 8001050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001052:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001056:	d902      	bls.n	800105e <movement+0x22e>
 8001058:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30

			//speed of the right wheel
			uint32_t speed_R = 2000 - val_Y*1000/256 - (128 - val_X)*500/128;
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <movement+0x2d8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	da00      	bge.n	8001072 <movement+0x242>
 8001070:	33ff      	adds	r3, #255	@ 0xff
 8001072:	121b      	asrs	r3, r3, #8
 8001074:	425b      	negs	r3, r3
 8001076:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 800107a:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <movement+0x2d4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001082:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001086:	fb01 f303 	mul.w	r3, r1, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	da00      	bge.n	8001090 <movement+0x260>
 800108e:	337f      	adds	r3, #127	@ 0x7f
 8001090:	11db      	asrs	r3, r3, #7
 8001092:	425b      	negs	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (speed_R < 1000) speed_R = 1000;
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800109e:	d203      	bcs.n	80010a8 <movement+0x278>
 80010a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010a6:	e006      	b.n	80010b6 <movement+0x286>
			else if (speed_R > 2000) speed_R =2000;
 80010a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010ae:	d902      	bls.n	80010b6 <movement+0x286>
 80010b0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			__HAL_TIM_SetCompare(&htim11, TIM_CHANNEL_1,speed_D);
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <movement+0x2a8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,speed_L);
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <movement+0x2a0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010c4:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,speed_R);
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <movement+0x2a4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ce:	e714      	b.n	8000efa <movement+0xca>
 80010d0:	200001b8 	.word	0x200001b8
 80010d4:	20000200 	.word	0x20000200
 80010d8:	200002d8 	.word	0x200002d8
 80010dc:	080098dc 	.word	0x080098dc
 80010e0:	080098e0 	.word	0x080098e0
 80010e4:	20000324 	.word	0x20000324
 80010e8:	20000328 	.word	0x20000328
 80010ec:	2000034d 	.word	0x2000034d
 80010f0:	2000032c 	.word	0x2000032c
 80010f4:	2000034c 	.word	0x2000034c
 80010f8:	0800986c 	.word	0x0800986c
 80010fc:	20000323 	.word	0x20000323
 8001100:	20000322 	.word	0x20000322
 8001104:	20000320 	.word	0x20000320
 8001108:	20000321 	.word	0x20000321
		}
		else if (dir_R == 0xbb)
 800110c:	4b52      	ldr	r3, [pc, #328]	@ (8001258 <movement+0x428>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2bbb      	cmp	r3, #187	@ 0xbb
 8001112:	d177      	bne.n	8001204 <movement+0x3d4>
		{
			// speed of the drum
			uint32_t speed_D = 1510 - val_S*500/256;
 8001114:	4b51      	ldr	r3, [pc, #324]	@ (800125c <movement+0x42c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	da00      	bge.n	8001128 <movement+0x2f8>
 8001126:	33ff      	adds	r3, #255	@ 0xff
 8001128:	121b      	asrs	r3, r3, #8
 800112a:	425b      	negs	r3, r3
 800112c:	f203 53e6 	addw	r3, r3, #1510	@ 0x5e6
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (speed_D < 1000) speed_D = 1000;
 8001132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001134:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001138:	d202      	bcs.n	8001140 <movement+0x310>
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28

			//speed of the left wheel
			uint32_t speed_L = 2000 - val_Y*1000/256 + (128 - val_X)*500/128;
 8001140:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <movement+0x430>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <movement+0x324>
 8001152:	33ff      	adds	r3, #255	@ 0xff
 8001154:	121b      	asrs	r3, r3, #8
 8001156:	425b      	negs	r3, r3
 8001158:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 800115c:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <movement+0x434>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001164:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001168:	fb01 f303 	mul.w	r3, r1, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	da00      	bge.n	8001172 <movement+0x342>
 8001170:	337f      	adds	r3, #127	@ 0x7f
 8001172:	11db      	asrs	r3, r3, #7
 8001174:	4413      	add	r3, r2
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
			if (speed_L < 1000) speed_L = 1000;
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800117e:	d203      	bcs.n	8001188 <movement+0x358>
 8001180:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
 8001186:	e006      	b.n	8001196 <movement+0x366>
			else if (speed_L > 2000) speed_L = 2000;
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800118e:	d902      	bls.n	8001196 <movement+0x366>
 8001190:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24

			//speed of the right wheel
			uint32_t speed_R = 1000 + val_Y*1000/256 + (128 - val_X)*500/128;
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <movement+0x430>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	da00      	bge.n	80011aa <movement+0x37a>
 80011a8:	33ff      	adds	r3, #255	@ 0xff
 80011aa:	121b      	asrs	r3, r3, #8
 80011ac:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80011b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <movement+0x434>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80011b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011bc:	fb01 f303 	mul.w	r3, r1, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da00      	bge.n	80011c6 <movement+0x396>
 80011c4:	337f      	adds	r3, #127	@ 0x7f
 80011c6:	11db      	asrs	r3, r3, #7
 80011c8:	4413      	add	r3, r2
 80011ca:	623b      	str	r3, [r7, #32]
			if (speed_R < 1000) speed_R = 1000;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d2:	d203      	bcs.n	80011dc <movement+0x3ac>
 80011d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	e006      	b.n	80011ea <movement+0x3ba>
			else if (speed_R > 2000) speed_R =2000;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011e2:	d902      	bls.n	80011ea <movement+0x3ba>
 80011e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011e8:	623b      	str	r3, [r7, #32]

			__HAL_TIM_SetCompare(&htim11, TIM_CHANNEL_1,speed_D);
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <movement+0x438>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011f0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,speed_L);
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <movement+0x43c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,speed_R);
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <movement+0x440>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a3a      	ldr	r2, [r7, #32]
 8001200:	635a      	str	r2, [r3, #52]	@ 0x34
 8001202:	e67a      	b.n	8000efa <movement+0xca>

		}
		else if (dir_R == 0xcc)
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <movement+0x428>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2bcc      	cmp	r3, #204	@ 0xcc
 800120a:	f47f ae76 	bne.w	8000efa <movement+0xca>
		{
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1,1500);
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <movement+0x43c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,1500);
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <movement+0x440>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim11, TIM_CHANNEL_1,1510);
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <movement+0x438>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 800122a:	635a      	str	r2, [r3, #52]	@ 0x34

			HAL_Delay(200);
 800122c:	20c8      	movs	r0, #200	@ 0xc8
 800122e:	f000 fea7 	bl	8001f80 <HAL_Delay>

			// to stop all PWM
			HAL_TIM_PWM_Stop( &htim1,TIM_CHANNEL_1 );
 8001232:	2100      	movs	r1, #0
 8001234:	480d      	ldr	r0, [pc, #52]	@ (800126c <movement+0x43c>)
 8001236:	f003 fef9 	bl	800502c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop( &htim2,TIM_CHANNEL_1 );
 800123a:	2100      	movs	r1, #0
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <movement+0x440>)
 800123e:	f003 fef5 	bl	800502c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop( &htim11,TIM_CHANNEL_1 );
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	@ (8001268 <movement+0x438>)
 8001246:	f003 fef1 	bl	800502c <HAL_TIM_PWM_Stop>
			while(1)
			{
				HAL_Delay(200);
 800124a:	20c8      	movs	r0, #200	@ 0xc8
 800124c:	f000 fe98 	bl	8001f80 <HAL_Delay>
				Toggle_LED();
 8001250:	f7ff fce6 	bl	8000c20 <Toggle_LED>
				HAL_Delay(200);
 8001254:	bf00      	nop
 8001256:	e7f8      	b.n	800124a <movement+0x41a>
 8001258:	20000323 	.word	0x20000323
 800125c:	20000322 	.word	0x20000322
 8001260:	20000321 	.word	0x20000321
 8001264:	20000320 	.word	0x20000320
 8001268:	200002d8 	.word	0x200002d8
 800126c:	200001b8 	.word	0x200001b8
 8001270:	20000200 	.word	0x20000200

08001274 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127e:	4802      	ldr	r0, [pc, #8]	@ (8001288 <nRF24_CSN_L+0x14>)
 8001280:	f001 fbc2 	bl	8002a08 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40020400 	.word	0x40020400

0800128c <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001296:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <nRF24_CSN_H+0x14>)
 8001298:	f001 fbb6 	bl	8002a08 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020400 	.word	0x40020400

080012a4 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 80012ae:	f107 020f 	add.w	r2, r7, #15
 80012b2:	1df9      	adds	r1, r7, #7
 80012b4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <nRF24_LL_RW+0x34>)
 80012be:	f003 fae2 	bl	8004886 <HAL_SPI_TransmitReceive>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <nRF24_LL_RW+0x28>
        Error_Handler();
 80012c8:	f7ff fc8c 	bl	8000be4 <Error_Handler>
    };
    return result;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000160 	.word	0x20000160

080012dc <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80012e6:	f7ff ffc5 	bl	8001274 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffd6 	bl	80012a4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80012f8:	20ff      	movs	r0, #255	@ 0xff
 80012fa:	f7ff ffd3 	bl	80012a4 <nRF24_LL_RW>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001302:	f7ff ffc3 	bl	800128c <nRF24_CSN_H>

	return value;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001320:	f7ff ffa8 	bl	8001274 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b1f      	cmp	r3, #31
 8001328:	d810      	bhi.n	800134c <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	b25b      	sxtb	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffb1 	bl	80012a4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ffad 	bl	80012a4 <nRF24_LL_RW>
 800134a:	e013      	b.n	8001374 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ffa8 	bl	80012a4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2be1      	cmp	r3, #225	@ 0xe1
 8001358:	d00c      	beq.n	8001374 <nRF24_WriteReg+0x64>
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2be2      	cmp	r3, #226	@ 0xe2
 800135e:	d009      	beq.n	8001374 <nRF24_WriteReg+0x64>
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2be3      	cmp	r3, #227	@ 0xe3
 8001364:	d006      	beq.n	8001374 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2bff      	cmp	r3, #255	@ 0xff
 800136a:	d003      	beq.n	8001374 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff98 	bl	80012a4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001374:	f7ff ff8a 	bl	800128c <nRF24_CSN_H>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001390:	f7ff ff70 	bl	8001274 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff84 	bl	80012a4 <nRF24_LL_RW>
	while (count--) {
 800139c:	e007      	b.n	80013ae <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800139e:	683c      	ldr	r4, [r7, #0]
 80013a0:	1c63      	adds	r3, r4, #1
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	20ff      	movs	r0, #255	@ 0xff
 80013a6:	f7ff ff7d 	bl	80012a4 <nRF24_LL_RW>
 80013aa:	4603      	mov	r3, r0
 80013ac:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	71ba      	strb	r2, [r7, #6]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80013b8:	f7ff ff68 	bl	800128c <nRF24_CSN_H>
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}

080013c4 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80013d4:	f7ff ff4e 	bl	8001274 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff62 	bl	80012a4 <nRF24_LL_RW>
	while (count--) {
 80013e0:	e006      	b.n	80013f0 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	603a      	str	r2, [r7, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff5a 	bl	80012a4 <nRF24_LL_RW>
	while (count--) {
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	1e5a      	subs	r2, r3, #1
 80013f4:	71ba      	strb	r2, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f3      	bne.n	80013e2 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80013fa:	f7ff ff47 	bl	800128c <nRF24_CSN_H>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800140a:	2108      	movs	r1, #8
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff7f 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8001412:	213f      	movs	r1, #63	@ 0x3f
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ff7b 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800141a:	2103      	movs	r1, #3
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff ff77 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8001422:	2103      	movs	r1, #3
 8001424:	2003      	movs	r0, #3
 8001426:	f7ff ff73 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800142a:	2103      	movs	r1, #3
 800142c:	2004      	movs	r0, #4
 800142e:	f7ff ff6f 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001432:	2102      	movs	r1, #2
 8001434:	2005      	movs	r0, #5
 8001436:	f7ff ff6b 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800143a:	210e      	movs	r1, #14
 800143c:	2006      	movs	r0, #6
 800143e:	f7ff ff67 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001442:	2100      	movs	r1, #0
 8001444:	2007      	movs	r0, #7
 8001446:	f7ff ff63 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800144a:	2100      	movs	r1, #0
 800144c:	2011      	movs	r0, #17
 800144e:	f7ff ff5f 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8001452:	2100      	movs	r1, #0
 8001454:	2012      	movs	r0, #18
 8001456:	f7ff ff5b 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800145a:	2100      	movs	r1, #0
 800145c:	2013      	movs	r0, #19
 800145e:	f7ff ff57 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8001462:	2100      	movs	r1, #0
 8001464:	2014      	movs	r0, #20
 8001466:	f7ff ff53 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800146a:	2100      	movs	r1, #0
 800146c:	2015      	movs	r0, #21
 800146e:	f7ff ff4f 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001472:	2100      	movs	r1, #0
 8001474:	2016      	movs	r0, #22
 8001476:	f7ff ff4b 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800147a:	2100      	movs	r1, #0
 800147c:	201c      	movs	r0, #28
 800147e:	f7ff ff47 	bl	8001310 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8001482:	2100      	movs	r1, #0
 8001484:	201d      	movs	r0, #29
 8001486:	f7ff ff43 	bl	8001310 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800148a:	f000 f9cd 	bl	8001828 <nRF24_FlushRX>
	nRF24_FlushTX();
 800148e:	f000 f9c3 	bl	8001818 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8001492:	f000 f9d1 	bl	8001838 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8001496:	f7ff fef9 	bl	800128c <nRF24_CSN_H>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <nRF24_Check+0x58>)
 80014a8:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80014aa:	2205      	movs	r2, #5
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	2030      	movs	r0, #48	@ 0x30
 80014b0:	f7ff ff88 	bl	80013c4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80014b4:	463b      	mov	r3, r7
 80014b6:	2205      	movs	r2, #5
 80014b8:	4619      	mov	r1, r3
 80014ba:	2010      	movs	r0, #16
 80014bc:	f7ff ff60 	bl	8001380 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e00f      	b.n	80014e6 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	3310      	adds	r3, #16
 80014ca:	443b      	add	r3, r7
 80014cc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <nRF24_Check+0x40>
 80014dc:	2300      	movs	r3, #0
 80014de:	e006      	b.n	80014ee <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	3301      	adds	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d9ec      	bls.n	80014c6 <nRF24_Check+0x26>
	}

	return 1;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	0800988c 	.word	0x0800988c

080014fc <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fee8 	bl	80012dc <nRF24_ReadReg>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d104      	bne.n	8001520 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e003      	b.n	8001528 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f023 0302 	bic.w	r3, r3, #2
 8001526:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4619      	mov	r1, r3
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff feef 	bl	8001310 <nRF24_WriteReg>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fec9 	bl	80012dc <nRF24_ReadReg>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	4619      	mov	r1, r3
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fece 	bl	8001310 <nRF24_WriteReg>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fea8 	bl	80012dc <nRF24_ReadReg>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	f023 030c 	bic.w	r3, r3, #12
 8001596:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	4619      	mov	r1, r3
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fead 	bl	8001310 <nRF24_WriteReg>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4619      	mov	r1, r3
 80015cc:	2005      	movs	r0, #5
 80015ce:	f7ff fe9f 	bl	8001310 <nRF24_WriteReg>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	3b02      	subs	r3, #2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff fe8f 	bl	8001310 <nRF24_WriteReg>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b06      	cmp	r3, #6
 800160c:	d00a      	beq.n	8001624 <nRF24_SetAddr+0x28>
 800160e:	2b06      	cmp	r3, #6
 8001610:	dc36      	bgt.n	8001680 <nRF24_SetAddr+0x84>
 8001612:	2b01      	cmp	r3, #1
 8001614:	dc02      	bgt.n	800161c <nRF24_SetAddr+0x20>
 8001616:	2b00      	cmp	r3, #0
 8001618:	da04      	bge.n	8001624 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800161a:	e031      	b.n	8001680 <nRF24_SetAddr+0x84>
 800161c:	3b02      	subs	r3, #2
	switch (pipe) {
 800161e:	2b03      	cmp	r3, #3
 8001620:	d82e      	bhi.n	8001680 <nRF24_SetAddr+0x84>
 8001622:	e023      	b.n	800166c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8001624:	2003      	movs	r0, #3
 8001626:	f7ff fe59 	bl	80012dc <nRF24_ReadReg>
 800162a:	4603      	mov	r3, r0
 800162c:	3301      	adds	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4413      	add	r3, r2
 8001636:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8001638:	f7ff fe1c 	bl	8001274 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <nRF24_SetAddr+0x90>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fe2b 	bl	80012a4 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	603a      	str	r2, [r7, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fe24 	bl	80012a4 <nRF24_LL_RW>
			} while (addr_width--);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	73fa      	strb	r2, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f3      	bne.n	800164e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8001666:	f7ff fe11 	bl	800128c <nRF24_CSN_H>
			break;
 800166a:	e00a      	b.n	8001682 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a07      	ldr	r2, [pc, #28]	@ (800168c <nRF24_SetAddr+0x90>)
 8001670:	5cd2      	ldrb	r2, [r2, r3]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4610      	mov	r0, r2
 800167a:	f7ff fe49 	bl	8001310 <nRF24_WriteReg>
			break;
 800167e:	e000      	b.n	8001682 <nRF24_SetAddr+0x86>
			break;
 8001680:	bf00      	nop
	}
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	080098ec 	.word	0x080098ec

08001690 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800169a:	2006      	movs	r0, #6
 800169c:	f7ff fe1e 	bl	80012dc <nRF24_ReadReg>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	f023 0306 	bic.w	r3, r3, #6
 80016aa:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4619      	mov	r1, r3
 80016b8:	2006      	movs	r0, #6
 80016ba:	f7ff fe29 	bl	8001310 <nRF24_WriteReg>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80016d0:	2006      	movs	r0, #6
 80016d2:	f7ff fe03 	bl	80012dc <nRF24_ReadReg>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80016e0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	4619      	mov	r1, r3
 80016ee:	2006      	movs	r0, #6
 80016f0:	f7ff fe0e 	bl	8001310 <nRF24_WriteReg>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	460b      	mov	r3, r1
 8001708:	71bb      	strb	r3, [r7, #6]
 800170a:	4613      	mov	r3, r2
 800170c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff fde4 	bl	80012dc <nRF24_ReadReg>
 8001714:	4603      	mov	r3, r0
 8001716:	b25a      	sxtb	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	b25b      	sxtb	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b25b      	sxtb	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800172c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4619      	mov	r1, r3
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff fdec 	bl	8001310 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <nRF24_SetRXPipe+0xa4>)
 800173c:	5cd2      	ldrb	r2, [r2, r3]
 800173e:	797b      	ldrb	r3, [r7, #5]
 8001740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4619      	mov	r1, r3
 8001748:	4610      	mov	r0, r2
 800174a:	f7ff fde1 	bl	8001310 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff fdc4 	bl	80012dc <nRF24_ReadReg>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10a      	bne.n	8001774 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2201      	movs	r2, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	b25a      	sxtb	r2, r3
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	4313      	orrs	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e00b      	b.n	800178c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2201      	movs	r2, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	b25a      	sxtb	r2, r3
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4013      	ands	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	4619      	mov	r1, r3
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fdbd 	bl	8001310 <nRF24_WriteReg>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	080098e4 	.word	0x080098e4

080017a4 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d904      	bls.n	80017be <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80017b4:	2100      	movs	r1, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fdaa 	bl	8001310 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80017bc:	e015      	b.n	80017ea <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fd8c 	bl	80012dc <nRF24_ReadReg>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2201      	movs	r2, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4013      	ands	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	4619      	mov	r1, r3
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fd93 	bl	8001310 <nRF24_WriteReg>
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80017f6:	2007      	movs	r0, #7
 80017f8:	f7ff fd70 	bl	80012dc <nRF24_ReadReg>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}

08001802 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001806:	2017      	movs	r0, #23
 8001808:	f7ff fd68 	bl	80012dc <nRF24_ReadReg>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}

08001818 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800181c:	21ff      	movs	r1, #255	@ 0xff
 800181e:	20e1      	movs	r0, #225	@ 0xe1
 8001820:	f7ff fd76 	bl	8001310 <nRF24_WriteReg>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800182c:	21ff      	movs	r1, #255	@ 0xff
 800182e:	20e2      	movs	r0, #226	@ 0xe2
 8001830:	f7ff fd6e 	bl	8001310 <nRF24_WriteReg>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800183e:	2007      	movs	r0, #7
 8001840:	f7ff fd4c 	bl	80012dc <nRF24_ReadReg>
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800184e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4619      	mov	r1, r3
 8001854:	2007      	movs	r0, #7
 8001856:	f7ff fd5b 	bl	8001310 <nRF24_WriteReg>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	461a      	mov	r2, r3
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	20a0      	movs	r0, #160	@ 0xa0
 8001876:	f7ff fda5 	bl	80013c4 <nRF24_WriteMBReg>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8001888:	f7ff fcf4 	bl	8001274 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800188c:	2060      	movs	r0, #96	@ 0x60
 800188e:	f7ff fd09 	bl	80012a4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001892:	20ff      	movs	r0, #255	@ 0xff
 8001894:	f7ff fd06 	bl	80012a4 <nRF24_LL_RW>
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800189c:	f7ff fcf6 	bl	800128c <nRF24_CSN_H>

	return value;
 80018a0:	79fb      	ldrb	r3, [r7, #7]

}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80018ba:	2007      	movs	r0, #7
 80018bc:	f7ff fd0e 	bl	80012dc <nRF24_ReadReg>
 80018c0:	4603      	mov	r3, r0
 80018c2:	105b      	asrs	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d829      	bhi.n	8001926 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00f      	beq.n	80018f8 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 80018d8:	f7ff ffd3 	bl	8001882 <nRF24_GetRxDplPayloadWidth>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d90f      	bls.n	800190c <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80018f2:	f7ff ff99 	bl	8001828 <nRF24_FlushRX>
 80018f6:	e009      	b.n	800190c <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001938 <nRF24_ReadPayloadGeneric+0x8c>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fcec 	bl	80012dc <nRF24_ReadReg>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	2061      	movs	r0, #97	@ 0x61
 800191e:	f7ff fd2f 	bl	8001380 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	e003      	b.n	800192e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800192c:	23ff      	movs	r3, #255	@ 0xff
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	080098e4 	.word	0x080098e4

0800193c <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8001946:	2200      	movs	r2, #0
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffae 	bl	80018ac <nRF24_ReadPayloadGeneric>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <HAL_MspInit+0x4c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a24      	ldr	r2, [pc, #144]	@ (8001a5c <HAL_ADC_MspInit+0xb0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d141      	bne.n	8001a52 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_ADC_MspInit+0xb4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a22:	23ff      	movs	r3, #255	@ 0xff
 8001a24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a26:	2303      	movs	r3, #3
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <HAL_ADC_MspInit+0xb8>)
 8001a36:	f000 fe4b 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <HAL_ADC_MspInit+0xbc>)
 8001a4e:	f000 fe3f 	bl	80026d0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	@ 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012000 	.word	0x40012000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400

08001a6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	@ (8001af0 <HAL_SPI_MspInit+0x84>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d12b      	bne.n	8001ae6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <HAL_SPI_MspInit+0x88>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_SPI_MspInit+0x88>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_SPI_MspInit+0x88>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_SPI_MspInit+0x88>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <HAL_SPI_MspInit+0x88>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_SPI_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ac6:	2338      	movs	r3, #56	@ 0x38
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <HAL_SPI_MspInit+0x8c>)
 8001ae2:	f000 fdf5 	bl	80026d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40013000 	.word	0x40013000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400

08001afc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10e      	bne.n	8001b2c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a1d      	ldr	r2, [pc, #116]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b2a:	e026      	b.n	8001b7a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
}
 8001b52:	e012      	b.n	8001b7a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <HAL_TIM_PWM_MspInit+0x94>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10d      	bne.n	8001b7a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40000800 	.word	0x40000800

08001b94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a15      	ldr	r2, [pc, #84]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x64>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bc2:	e012      	b.n	8001bea <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <HAL_TIM_Base_MspInit+0x6c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10d      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40014400 	.word	0x40014400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40014800 	.word	0x40014800

08001c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5c      	ldr	r2, [pc, #368]	@ (8001d94 <HAL_TIM_MspPostInit+0x190>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d11f      	bne.n	8001c66 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b58      	ldr	r3, [pc, #352]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_B_Pin;
 8001c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c48:	2312      	movs	r3, #18
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	484f      	ldr	r0, [pc, #316]	@ (8001d9c <HAL_TIM_MspPostInit+0x198>)
 8001c60:	f000 fd36 	bl	80026d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001c64:	e091      	b.n	8001d8a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c80:	4b45      	ldr	r3, [pc, #276]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_M_Pin;
 8001c8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_M_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483c      	ldr	r0, [pc, #240]	@ (8001d9c <HAL_TIM_MspPostInit+0x198>)
 8001caa:	f000 fd11 	bl	80026d0 <HAL_GPIO_Init>
}
 8001cae:	e06c      	b.n	8001d8a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <HAL_TIM_MspPostInit+0x19c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d11e      	bne.n	8001cf8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b36      	ldr	r3, [pc, #216]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cd6:	2340      	movs	r3, #64	@ 0x40
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	482c      	ldr	r0, [pc, #176]	@ (8001da4 <HAL_TIM_MspPostInit+0x1a0>)
 8001cf2:	f000 fced 	bl	80026d0 <HAL_GPIO_Init>
}
 8001cf6:	e048      	b.n	8001d8a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001da8 <HAL_TIM_MspPostInit+0x1a4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d11f      	bne.n	8001d42 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d30:	2303      	movs	r3, #3
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481a      	ldr	r0, [pc, #104]	@ (8001da4 <HAL_TIM_MspPostInit+0x1a0>)
 8001d3c:	f000 fcc8 	bl	80026d0 <HAL_GPIO_Init>
}
 8001d40:	e023      	b.n	8001d8a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_TIM_MspPostInit+0x1a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d11e      	bne.n	8001d8a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_TIM_MspPostInit+0x194>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_H_Pin;
 8001d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6e:	2312      	movs	r3, #18
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_H_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4807      	ldr	r0, [pc, #28]	@ (8001da4 <HAL_TIM_MspPostInit+0x1a0>)
 8001d86:	f000 fca3 	bl	80026d0 <HAL_GPIO_Init>
}
 8001d8a:	bf00      	nop
 8001d8c:	3730      	adds	r7, #48	@ 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <NMI_Handler+0x4>

08001db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e06:	f000 f89b 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <OTG_FS_IRQHandler+0x10>)
 8001e16:	f000 ff6e 	bl	8002cf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20001834 	.word	0x20001834

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4c:	f7ff ffea 	bl	8001e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e52:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e68:	4c0a      	ldr	r4, [pc, #40]	@ (8001e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e76:	f007 fcc9 	bl	800980c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7fe fb43 	bl	8000504 <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001e8c:	08009914 	.word	0x08009914
  ldr r2, =_sbss
 8001e90:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001e94:	20001f38 	.word	0x20001f38

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_Init+0x40>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <HAL_Init+0x40>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_Init+0x40>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 fbc1 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	200f      	movs	r0, #15
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fd44 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fbd9 	bl	80026b6 <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 fba1 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000350 	.word	0x20000350

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000350 	.word	0x20000350

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffde 	bl	8001f68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e033      	b.n	8002046 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fce0 	bl	80019ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800200e:	f023 0302 	bic.w	r3, r3, #2
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f94a 	bl	80022b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
 8002036:	e001      	b.n	800203c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e113      	b.n	8002294 <HAL_ADC_ConfigChannel+0x244>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d925      	bls.n	80020c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1e      	subs	r3, #30
 8002092:	2207      	movs	r2, #7
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43da      	mvns	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	400a      	ands	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4403      	add	r3, r0
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	409a      	lsls	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	e022      	b.n	800210e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	2207      	movs	r2, #7
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4403      	add	r3, r0
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d824      	bhi.n	8002160 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b05      	subs	r3, #5
 8002128:	221f      	movs	r2, #31
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b05      	subs	r3, #5
 8002152:	fa00 f203 	lsl.w	r2, r0, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34
 800215e:	e04c      	b.n	80021fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d824      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	3b23      	subs	r3, #35	@ 0x23
 800217a:	221f      	movs	r2, #31
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b23      	subs	r3, #35	@ 0x23
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b0:	e023      	b.n	80021fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b41      	subs	r3, #65	@ 0x41
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b41      	subs	r3, #65	@ 0x41
 80021ee:	fa00 f203 	lsl.w	r2, r0, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fa:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <HAL_ADC_ConfigChannel+0x250>)
 80021fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_ADC_ConfigChannel+0x254>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d10f      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d8>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b12      	cmp	r3, #18
 800220e:	d10b      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_ADC_ConfigChannel+0x254>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <HAL_ADC_ConfigChannel+0x258>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x1f4>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b11      	cmp	r3, #17
 8002242:	d122      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	@ (80022a8 <HAL_ADC_ConfigChannel+0x258>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d111      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_ADC_ConfigChannel+0x25c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <HAL_ADC_ConfigChannel+0x260>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0c9a      	lsrs	r2, r3, #18
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800227c:	e002      	b.n	8002284 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3b01      	subs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40012300 	.word	0x40012300
 80022a4:	40012000 	.word	0x40012000
 80022a8:	10000012 	.word	0x10000012
 80022ac:	20000000 	.word	0x20000000
 80022b0:	431bde83 	.word	0x431bde83

080022b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022bc:	4b79      	ldr	r3, [pc, #484]	@ (80024a4 <ADC_Init+0x1f0>)
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800232e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <ADC_Init+0x1f4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800235a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800237c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e00f      	b.n	80023b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0202 	bic.w	r2, r2, #2
 80023c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7e1b      	ldrb	r3, [r3, #24]
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	3b01      	subs	r3, #1
 800240c:	035a      	lsls	r2, r3, #13
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	e007      	b.n	8002428 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002426:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	3b01      	subs	r3, #1
 8002444:	051a      	lsls	r2, r3, #20
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800246a:	025a      	lsls	r2, r3, #9
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	029a      	lsls	r2, r3, #10
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40012300 	.word	0x40012300
 80024a8:	0f000001 	.word	0x0f000001

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	@ (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	@ (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	@ (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	@ 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff29 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff3e 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff31 	bl	8002510 <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ffa2 	bl	8002608 <SysTick_Config>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e159      	b.n	80029a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	f040 8148 	bne.w	800299a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d005      	beq.n	8002722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	2b02      	cmp	r3, #2
 8002720:	d130      	bne.n	8002784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b03      	cmp	r3, #3
 800278e:	d017      	beq.n	80027c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a2 	beq.w	800299a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b57      	ldr	r3, [pc, #348]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a56      	ldr	r2, [pc, #344]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b54      	ldr	r3, [pc, #336]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002872:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_GPIO_Init+0x2ec>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <HAL_GPIO_Init+0x2f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x202>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a48      	ldr	r2, [pc, #288]	@ (80029c4 <HAL_GPIO_Init+0x2f4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x1fe>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a47      	ldr	r2, [pc, #284]	@ (80029c8 <HAL_GPIO_Init+0x2f8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <HAL_GPIO_Init+0x2fc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x1f6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a45      	ldr	r2, [pc, #276]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x1f2>
 80028be:	2304      	movs	r3, #4
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028c2:	2307      	movs	r3, #7
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	@ (80029bc <HAL_GPIO_Init+0x2ec>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002916:	4a2f      	ldr	r2, [pc, #188]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002940:	4a24      	ldr	r2, [pc, #144]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002946:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800296a:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002970:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002994:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f aea2 	bls.w	80026ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	@ 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e001      	b.n	80029fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a24:	e003      	b.n	8002a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	619a      	str	r2, [r3, #24]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a4c:	887a      	ldrh	r2, [r7, #2]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	041a      	lsls	r2, r3, #16
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43d9      	mvns	r1, r3
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	619a      	str	r2, [r3, #24]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af02      	add	r7, sp, #8
 8002a74:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e101      	b.n	8002c84 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fba4 	bl	80091e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aae:	d102      	bne.n	8002ab6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 fff1 	bl	8005aa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7c1a      	ldrb	r2, [r3, #16]
 8002ac8:	f88d 2000 	strb.w	r2, [sp]
 8002acc:	3304      	adds	r3, #4
 8002ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad0:	f002 fed0 	bl	8005874 <USB_CoreInit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0ce      	b.n	8002c84 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 ffe9 	bl	8005ac4 <USB_SetCurrentMode>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0bf      	b.n	8002c84 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e04a      	b.n	8002ba0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3315      	adds	r3, #21
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3314      	adds	r3, #20
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	b298      	uxth	r0, r3
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	332e      	adds	r3, #46	@ 0x2e
 8002b46:	4602      	mov	r2, r0
 8002b48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3318      	adds	r3, #24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	331c      	adds	r3, #28
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3320      	adds	r3, #32
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3324      	adds	r3, #36	@ 0x24
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3af      	bcc.n	8002b0a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e044      	b.n	8002c3a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	3301      	adds	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3b5      	bcc.n	8002bb0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7c1a      	ldrb	r2, [r3, #16]
 8002c4c:	f88d 2000 	strb.w	r2, [sp]
 8002c50:	3304      	adds	r3, #4
 8002c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c54:	f002 ff82 	bl	8005b5c <USB_DevInit>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 ffcc 	bl	8006c1a <USB_DevDisconnect>

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_PCD_Start+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e022      	b.n	8002cee <HAL_PCD_Start+0x62>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fed3 	bl	8005a80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 ff7a 	bl	8006bd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b08d      	sub	sp, #52	@ 0x34
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 f838 	bl	8006d82 <USB_GetMode>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f040 848c 	bne.w	8003632 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 ff9c 	bl	8006c5c <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8482 	beq.w	8003630 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 ff89 	bl	8006c5c <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d107      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 0202 	and.w	r2, r2, #2
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 ff77 	bl	8006c5c <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d161      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0210 	bic.w	r2, r2, #16
 8002d86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002db2:	d124      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d035      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a38      	ldr	r0, [r7, #32]
 8002dd4:	f003 fdae 	bl	8006934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de4:	441a      	add	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df6:	441a      	add	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	e016      	b.n	8002e2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e04:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e08:	d110      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e10:	2208      	movs	r2, #8
 8002e12:	4619      	mov	r1, r3
 8002e14:	6a38      	ldr	r0, [r7, #32]
 8002e16:	f003 fd8d 	bl	8006934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e26:	441a      	add	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0210 	orr.w	r2, r2, #16
 8002e3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 ff0b 	bl	8006c5c <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e50:	f040 80a7 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 ff10 	bl	8006c82 <USB_ReadDevAllOutEpInterrupt>
 8002e62:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002e64:	e099      	b.n	8002f9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 808e 	beq.w	8002f8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 ff34 	bl	8006cea <USB_ReadDevOutEPInterrupt>
 8002e82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fea4 	bl	8003bf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ec4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ff7a 	bl	8003dc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d030      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b80      	cmp	r3, #128	@ 0x80
 8002efc:	d109      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	78db      	ldrb	r3, [r3, #3]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d108      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f006 fa4f 	bl	80093e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2302      	movs	r3, #2
 8002f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af62 	bne.w	8002e66 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fe58 	bl	8006c5c <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fb6:	f040 80db 	bne.w	8003170 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fe79 	bl	8006cb6 <USB_ReadDevAllInEpInterrupt>
 8002fc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002fca:	e0cd      	b.n	8003168 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80c2 	beq.w	800315c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fe9f 	bl	8006d26 <USB_ReadDevInEPInterrupt>
 8002fe8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d057      	beq.n	80030a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43db      	mvns	r3, r3
 800300e:	69f9      	ldr	r1, [r7, #28]
 8003010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003014:	4013      	ands	r3, r2
 8003016:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003024:	461a      	mov	r2, r3
 8003026:	2301      	movs	r3, #1
 8003028:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	799b      	ldrb	r3, [r3, #6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d132      	bne.n	8003098 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3320      	adds	r3, #32
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4403      	add	r3, r0
 8003052:	331c      	adds	r3, #28
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4419      	add	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4403      	add	r3, r0
 8003066:	3320      	adds	r3, #32
 8003068:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d113      	bne.n	8003098 <HAL_PCD_IRQHandler+0x3a2>
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3324      	adds	r3, #36	@ 0x24
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003090:	461a      	mov	r2, r3
 8003092:	2101      	movs	r1, #1
 8003094:	f003 fea6 	bl	8006de4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f006 f923 	bl	80092ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ba:	461a      	mov	r2, r3
 80030bc:	2308      	movs	r3, #8
 80030be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d6:	461a      	mov	r2, r3
 80030d8:	2310      	movs	r3, #16
 80030da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f2:	461a      	mov	r2, r3
 80030f4:	2340      	movs	r3, #64	@ 0x40
 80030f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d023      	beq.n	800314a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003102:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003104:	6a38      	ldr	r0, [r7, #32]
 8003106:	f002 fe8d 	bl	8005e24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3310      	adds	r3, #16
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	78db      	ldrb	r3, [r3, #3]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d108      	bne.n	8003138 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f006 f966 	bl	8009404 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003144:	461a      	mov	r2, r3
 8003146:	2302      	movs	r3, #2
 8003148:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fcbd 	bl	8003ad6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	3301      	adds	r3, #1
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	f47f af2e 	bne.w	8002fcc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fd71 	bl	8006c5c <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003180:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003184:	d122      	bne.n	80031cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d108      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031ac:	2100      	movs	r1, #0
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fea4 	bl	8003efc <HAL_PCDEx_LPM_Callback>
 80031b4:	e002      	b.n	80031bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f006 f904 	bl	80093c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80031ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 fd43 	bl	8006c5c <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e0:	d112      	bne.n	8003208 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f006 f8c0 	bl	8009378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003206:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fd25 	bl	8006c5c <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800321c:	f040 80b7 	bne.w	800338e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2110      	movs	r1, #16
 800323a:	4618      	mov	r0, r3
 800323c:	f002 fdf2 	bl	8005e24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003244:	e046      	b.n	80032d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003252:	461a      	mov	r2, r3
 8003254:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003258:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800325a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	440a      	add	r2, r1
 8003270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003274:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003286:	461a      	mov	r2, r3
 8003288:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800328c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800329e:	0151      	lsls	r1, r2, #5
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	440a      	add	r2, r1
 80032a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	3301      	adds	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	461a      	mov	r2, r3
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	4293      	cmp	r3, r2
 80032de:	d3b2      	bcc.n	8003246 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032ee:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80032f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7bdb      	ldrb	r3, [r3, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800330c:	f043 030b 	orr.w	r3, r3, #11
 8003310:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003322:	f043 030b 	orr.w	r3, r3, #11
 8003326:	6453      	str	r3, [r2, #68]	@ 0x44
 8003328:	e015      	b.n	8003356 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800333c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003340:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003350:	f043 030b 	orr.w	r3, r3, #11
 8003354:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003364:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003368:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003378:	461a      	mov	r2, r3
 800337a:	f003 fd33 	bl	8006de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800338c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fc62 	bl	8006c5c <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a2:	d123      	bne.n	80033ec <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fcf8 	bl	8006d9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f002 fdaf 	bl	8005f16 <USB_GetDevSpeed>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681c      	ldr	r4, [r3, #0]
 80033c4:	f001 f9ca 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ce:	461a      	mov	r2, r3
 80033d0:	4620      	mov	r0, r4
 80033d2:	f002 fab3 	bl	800593c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f005 ffaf 	bl	800933a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80033ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fc33 	bl	8006c5c <USB_ReadInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d10a      	bne.n	8003416 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f005 ff8c 	bl	800931e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 0208 	and.w	r2, r2, #8
 8003414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fc1e 	bl	8006c5c <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	2b80      	cmp	r3, #128	@ 0x80
 8003428:	d123      	bne.n	8003472 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003436:	2301      	movs	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
 800343a:	e014      	b.n	8003466 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	b2db      	uxtb	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb0a 	bl	8003a74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	3301      	adds	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	791b      	ldrb	r3, [r3, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	4293      	cmp	r3, r2
 8003470:	d3e4      	bcc.n	800343c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fbf0 	bl	8006c5c <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003486:	d13c      	bne.n	8003502 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
 800348c:	e02b      	b.n	80034e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3318      	adds	r3, #24
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d115      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da12      	bge.n	80034e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3317      	adds	r3, #23
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 faca 	bl	8003a74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	3301      	adds	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	791b      	ldrb	r3, [r3, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d3cd      	bcc.n	800348e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fba8 	bl	8006c5c <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003516:	d156      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	e045      	b.n	80035aa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12e      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003546:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	da2b      	bge.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003558:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800355c:	429a      	cmp	r2, r3
 800355e:	d121      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800359c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035a0:	6053      	str	r3, [r2, #4]
            break;
 80035a2:	e008      	b.n	80035b6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	3301      	adds	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	791b      	ldrb	r3, [r3, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d3b3      	bcc.n	800351e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80035c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fb46 	bl	8006c5c <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035da:	d10a      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f005 ff23 	bl	8009428 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 fb30 	bl	8006c5c <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d115      	bne.n	8003632 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f005 ff13 	bl	8009444 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e000      	b.n	8003632 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003630:	bf00      	nop
    }
  }
}
 8003632:	3734      	adds	r7, #52	@ 0x34
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_PCD_SetAddress+0x1a>
 800364e:	2302      	movs	r3, #2
 8003650:	e012      	b.n	8003678 <HAL_PCD_SetAddress+0x40>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f003 fa8f 	bl	8006b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	70fb      	strb	r3, [r7, #3]
 8003692:	460b      	mov	r3, r1
 8003694:	803b      	strh	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800369e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da0f      	bge.n	80036c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3310      	adds	r3, #16
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	705a      	strb	r2, [r3, #1]
 80036c4:	e00f      	b.n	80036e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80036f2:	883b      	ldrh	r3, [r7, #0]
 80036f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	78ba      	ldrb	r2, [r7, #2]
 8003700:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003714:	78bb      	ldrb	r3, [r7, #2]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d102      	bne.n	8003720 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_PCD_EP_Open+0xae>
 800372a:	2302      	movs	r3, #2
 800372c:	e00e      	b.n	800374c <HAL_PCD_EP_Open+0xcc>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68f9      	ldr	r1, [r7, #12]
 800373c:	4618      	mov	r0, r3
 800373e:	f002 fc0f 	bl	8005f60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800374a:	7afb      	ldrb	r3, [r7, #11]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003764:	2b00      	cmp	r3, #0
 8003766:	da0f      	bge.n	8003788 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	3310      	adds	r3, #16
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	3304      	adds	r3, #4
 800377e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	705a      	strb	r2, [r3, #1]
 8003786:	e00f      	b.n	80037a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_PCD_EP_Close+0x6e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e00e      	b.n	80037e0 <HAL_PCD_EP_Close+0x8c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f002 fc4d 	bl	8006070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	460b      	mov	r3, r1
 80037f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800382a:	7afb      	ldrb	r3, [r7, #11]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	b2da      	uxtb	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	799b      	ldrb	r3, [r3, #6]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	799b      	ldrb	r3, [r3, #6]
 800384c:	461a      	mov	r2, r3
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	f002 fcea 	bl	8006228 <USB_EPStartXfer>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003880:	681b      	ldr	r3, [r3, #0]
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	460b      	mov	r3, r1
 800389c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3310      	adds	r3, #16
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2201      	movs	r2, #1
 80038cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ce:	7afb      	ldrb	r3, [r7, #11]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	799b      	ldrb	r3, [r3, #6]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	799b      	ldrb	r3, [r3, #6]
 80038f0:	461a      	mov	r2, r3
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	f002 fc98 	bl	8006228 <USB_EPStartXfer>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	7912      	ldrb	r2, [r2, #4]
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e04f      	b.n	80039c0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	da0f      	bge.n	8003948 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	3310      	adds	r3, #16
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	705a      	strb	r2, [r3, #1]
 8003946:	e00d      	b.n	8003964 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	3304      	adds	r3, #4
 800395c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_PCD_EP_SetStall+0x82>
 8003980:	2302      	movs	r3, #2
 8003982:	e01d      	b.n	80039c0 <HAL_PCD_EP_SetStall+0xbe>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 f826 	bl	80069e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7999      	ldrb	r1, [r3, #6]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039b0:	461a      	mov	r2, r3
 80039b2:	f003 fa17 	bl	8006de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	7912      	ldrb	r2, [r2, #4]
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e042      	b.n	8003a6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da0f      	bge.n	8003a0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3310      	adds	r3, #16
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	705a      	strb	r2, [r3, #1]
 8003a0c:	e00f      	b.n	8003a2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_PCD_EP_ClrStall+0x86>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e00e      	b.n	8003a6c <HAL_PCD_EP_ClrStall+0xa4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 f82f 	bl	8006ac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da0c      	bge.n	8003aa2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	3310      	adds	r3, #16
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e00c      	b.n	8003abc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fe4e 	bl	8006764 <USB_EPStopXfer>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003acc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b08a      	sub	sp, #40	@ 0x28
 8003ada:	af02      	add	r7, sp, #8
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	3310      	adds	r3, #16
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	3304      	adds	r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d901      	bls.n	8003b0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06b      	b.n	8003be6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d902      	bls.n	8003b2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3303      	adds	r3, #3
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b32:	e02a      	b.n	8003b8a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d902      	bls.n	8003b50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3303      	adds	r3, #3
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68d9      	ldr	r1, [r3, #12]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f002 fea3 	bl	80068b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d809      	bhi.n	8003bb4 <PCD_WriteEmptyTxFifo+0xde>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d203      	bcs.n	8003bb4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1bf      	bne.n	8003b34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d811      	bhi.n	8003be4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	333c      	adds	r3, #60	@ 0x3c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	799b      	ldrb	r3, [r3, #6]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d17b      	bne.n	8003d1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4a61      	ldr	r2, [pc, #388]	@ (8003db8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	f240 80b9 	bls.w	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80b3 	beq.w	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c52:	461a      	mov	r2, r3
 8003c54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c58:	6093      	str	r3, [r2, #8]
 8003c5a:	e0a7      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	2320      	movs	r3, #32
 8003c76:	6093      	str	r3, [r2, #8]
 8003c78:	e098      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 8093 	bne.w	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4a4b      	ldr	r2, [pc, #300]	@ (8003db8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d90f      	bls.n	8003cae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003caa:	6093      	str	r3, [r2, #8]
 8003cac:	e07e      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	440b      	add	r3, r1
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	1ad2      	subs	r2, r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	f003 f872 	bl	8006de4 <USB_EP0_OutStart>
 8003d00:	e006      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f005 facc 	bl	80092b4 <HAL_PCD_DataOutStageCallback>
 8003d1c:	e046      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a26      	ldr	r2, [pc, #152]	@ (8003dbc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d124      	bne.n	8003d70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d42:	6093      	str	r3, [r2, #8]
 8003d44:	e032      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2320      	movs	r3, #32
 8003d60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f005 faa3 	bl	80092b4 <HAL_PCD_DataOutStageCallback>
 8003d6e:	e01d      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d114      	bne.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f003 f822 	bl	8006de4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f005 fa84 	bl	80092b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	4f54300a 	.word	0x4f54300a
 8003dbc:	4f54310a 	.word	0x4f54310a

08003dc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	333c      	adds	r3, #60	@ 0x3c
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a15      	ldr	r2, [pc, #84]	@ (8003e48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d90e      	bls.n	8003e14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f005 fa3b 	bl	8009290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d90c      	bls.n	8003e3c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	799b      	ldrb	r3, [r3, #6]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d108      	bne.n	8003e3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e34:	461a      	mov	r2, r3
 8003e36:	2101      	movs	r1, #1
 8003e38:	f002 ffd4 	bl	8006de4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	4f54300a 	.word	0x4f54300a

08003e4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e6a:	883b      	ldrh	r3, [r7, #0]
 8003e6c:	0419      	lsls	r1, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e78:	e028      	b.n	8003ecc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4413      	add	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e00d      	b.n	8003eaa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	3340      	adds	r3, #64	@ 0x40
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3ec      	bcc.n	8003e8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003eb4:	883b      	ldrh	r3, [r7, #0]
 8003eb6:	0418      	lsls	r0, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	4302      	orrs	r2, r0
 8003ec4:	3340      	adds	r3, #64	@ 0x40
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e267      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d075      	beq.n	800401e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f32:	4b88      	ldr	r3, [pc, #544]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d00c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b85      	ldr	r3, [pc, #532]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d112      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	4b82      	ldr	r3, [pc, #520]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	4b7e      	ldr	r3, [pc, #504]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05b      	beq.n	800401c <HAL_RCC_OscConfig+0x108>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d157      	bne.n	800401c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e242      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x74>
 8003f7a:	4b76      	ldr	r3, [pc, #472]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e01d      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b70      	ldr	r3, [pc, #448]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6f      	ldr	r2, [pc, #444]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6c      	ldr	r2, [pc, #432]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003fac:	4b69      	ldr	r3, [pc, #420]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a68      	ldr	r2, [pc, #416]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b66      	ldr	r3, [pc, #408]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a65      	ldr	r2, [pc, #404]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd ffcc 	bl	8001f68 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fd ffc8 	bl	8001f68 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	@ 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e207      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xc0>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd ffb8 	bl	8001f68 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd ffb4 	bl	8001f68 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	@ 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1f3      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	4b51      	ldr	r3, [pc, #324]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0xe8>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d063      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800402a:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800403e:	2b08      	cmp	r3, #8
 8004040:	d11c      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b44      	ldr	r3, [pc, #272]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d116      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1c7      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b3b      	ldr	r3, [pc, #236]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4937      	ldr	r1, [pc, #220]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	e03a      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b34      	ldr	r3, [pc, #208]	@ (8004158 <HAL_RCC_OscConfig+0x244>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd ff6d 	bl	8001f68 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd ff69 	bl	8001f68 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1a8      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4925      	ldr	r1, [pc, #148]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b24      	ldr	r3, [pc, #144]	@ (8004158 <HAL_RCC_OscConfig+0x244>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd ff4c 	bl	8001f68 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fd ff48 	bl	8001f68 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e187      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d036      	beq.n	800416c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b15      	ldr	r3, [pc, #84]	@ (800415c <HAL_RCC_OscConfig+0x248>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd ff2c 	bl	8001f68 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd ff28 	bl	8001f68 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e167      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCC_OscConfig+0x240>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x200>
 8004132:	e01b      	b.n	800416c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b09      	ldr	r3, [pc, #36]	@ (800415c <HAL_RCC_OscConfig+0x248>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413a:	f7fd ff15 	bl	8001f68 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	e00e      	b.n	8004160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004142:	f7fd ff11 	bl	8001f68 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d907      	bls.n	8004160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e150      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
 8004154:	40023800 	.word	0x40023800
 8004158:	42470000 	.word	0x42470000
 800415c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	4b88      	ldr	r3, [pc, #544]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ea      	bne.n	8004142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8097 	beq.w	80042a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b81      	ldr	r3, [pc, #516]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b7d      	ldr	r3, [pc, #500]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	4a7c      	ldr	r2, [pc, #496]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004198:	6413      	str	r3, [r2, #64]	@ 0x40
 800419a:	4b7a      	ldr	r3, [pc, #488]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b77      	ldr	r3, [pc, #476]	@ (8004388 <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d118      	bne.n	80041e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4b74      	ldr	r3, [pc, #464]	@ (8004388 <HAL_RCC_OscConfig+0x474>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a73      	ldr	r2, [pc, #460]	@ (8004388 <HAL_RCC_OscConfig+0x474>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c2:	f7fd fed1 	bl	8001f68 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ca:	f7fd fecd 	bl	8001f68 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e10c      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004388 <HAL_RCC_OscConfig+0x474>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x2ea>
 80041f0:	4b64      	ldr	r3, [pc, #400]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	4a63      	ldr	r2, [pc, #396]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fc:	e01c      	b.n	8004238 <HAL_RCC_OscConfig+0x324>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x30c>
 8004206:	4b5f      	ldr	r3, [pc, #380]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	4a5e      	ldr	r2, [pc, #376]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	6713      	str	r3, [r2, #112]	@ 0x70
 8004212:	4b5c      	ldr	r3, [pc, #368]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	4a5b      	ldr	r2, [pc, #364]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	@ 0x70
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0x324>
 8004220:	4b58      	ldr	r3, [pc, #352]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004224:	4a57      	ldr	r2, [pc, #348]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	@ 0x70
 800422c:	4b55      	ldr	r3, [pc, #340]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004230:	4a54      	ldr	r2, [pc, #336]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004232:	f023 0304 	bic.w	r3, r3, #4
 8004236:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fd fe92 	bl	8001f68 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd fe8e 	bl	8001f68 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e0cb      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	4b49      	ldr	r3, [pc, #292]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ee      	beq.n	8004248 <HAL_RCC_OscConfig+0x334>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426c:	f7fd fe7c 	bl	8001f68 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fe78 	bl	8001f68 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0b5      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428a:	4b3e      	ldr	r3, [pc, #248]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ee      	bne.n	8004274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4b39      	ldr	r3, [pc, #228]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	4a38      	ldr	r2, [pc, #224]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80a1 	beq.w	80043f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b2:	4b34      	ldr	r3, [pc, #208]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d05c      	beq.n	8004378 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d141      	bne.n	800434a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b31      	ldr	r3, [pc, #196]	@ (800438c <HAL_RCC_OscConfig+0x478>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd fe4c 	bl	8001f68 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fd fe48 	bl	8001f68 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e087      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	4b27      	ldr	r3, [pc, #156]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	491b      	ldr	r1, [pc, #108]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <HAL_RCC_OscConfig+0x478>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fd fe21 	bl	8001f68 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432a:	f7fd fe1d 	bl	8001f68 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e05c      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x416>
 8004348:	e054      	b.n	80043f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b10      	ldr	r3, [pc, #64]	@ (800438c <HAL_RCC_OscConfig+0x478>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fd fe0a 	bl	8001f68 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fe06 	bl	8001f68 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e045      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <HAL_RCC_OscConfig+0x470>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x444>
 8004376:	e03d      	b.n	80043f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e038      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
 8004384:	40023800 	.word	0x40023800
 8004388:	40007000 	.word	0x40007000
 800438c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004390:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCC_OscConfig+0x4ec>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d028      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d121      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d11a      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	3b01      	subs	r3, #1
 80043da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800

08004404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0cc      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004418:	4b68      	ldr	r3, [pc, #416]	@ (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d90c      	bls.n	8004440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b65      	ldr	r3, [pc, #404]	@ (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b63      	ldr	r3, [pc, #396]	@ (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0b8      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004458:	4b59      	ldr	r3, [pc, #356]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a58      	ldr	r2, [pc, #352]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004462:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004470:	4b53      	ldr	r3, [pc, #332]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a52      	ldr	r2, [pc, #328]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800447a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b50      	ldr	r3, [pc, #320]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	494d      	ldr	r1, [pc, #308]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d044      	beq.n	8004524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b47      	ldr	r3, [pc, #284]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d119      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c2:	4b3f      	ldr	r3, [pc, #252]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e06f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d2:	4b3b      	ldr	r3, [pc, #236]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e067      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e2:	4b37      	ldr	r3, [pc, #220]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4934      	ldr	r1, [pc, #208]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f4:	f7fd fd38 	bl	8001f68 <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fc:	f7fd fd34 	bl	8001f68 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e04f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004512:	4b2b      	ldr	r3, [pc, #172]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 020c 	and.w	r2, r3, #12
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	429a      	cmp	r2, r3
 8004522:	d1eb      	bne.n	80044fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004524:	4b25      	ldr	r3, [pc, #148]	@ (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d20c      	bcs.n	800454c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b20      	ldr	r3, [pc, #128]	@ (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e032      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4916      	ldr	r1, [pc, #88]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	490e      	ldr	r1, [pc, #56]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800458a:	f000 f821 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800458e:	4602      	mov	r2, r0
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	490a      	ldr	r1, [pc, #40]	@ (80045c4 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	5ccb      	ldrb	r3, [r1, r3]
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	4a09      	ldr	r2, [pc, #36]	@ (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045a6:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fc98 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023c00 	.word	0x40023c00
 80045c0:	40023800 	.word	0x40023800
 80045c4:	080098f4 	.word	0x080098f4
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000004 	.word	0x20000004

080045d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d4:	b090      	sub	sp, #64	@ 0x40
 80045d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e8:	4b59      	ldr	r3, [pc, #356]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d00d      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x40>
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x16c>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x34>
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d003      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x3a>
 8004602:	e09b      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004604:	4b53      	ldr	r3, [pc, #332]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x184>)
 8004606:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004608:	e09b      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800460a:	4b53      	ldr	r3, [pc, #332]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x188>)
 800460c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800460e:	e098      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004610:	4b4f      	ldr	r3, [pc, #316]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800461a:	4b4d      	ldr	r3, [pc, #308]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d028      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004626:	4b4a      	ldr	r3, [pc, #296]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	2200      	movs	r2, #0
 800462e:	623b      	str	r3, [r7, #32]
 8004630:	627a      	str	r2, [r7, #36]	@ 0x24
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004638:	2100      	movs	r1, #0
 800463a:	4b47      	ldr	r3, [pc, #284]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x188>)
 800463c:	fb03 f201 	mul.w	r2, r3, r1
 8004640:	2300      	movs	r3, #0
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	4413      	add	r3, r2
 8004648:	4a43      	ldr	r2, [pc, #268]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x188>)
 800464a:	fba0 1202 	umull	r1, r2, r0, r2
 800464e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004650:	460a      	mov	r2, r1
 8004652:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004656:	4413      	add	r3, r2
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800465a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465c:	2200      	movs	r2, #0
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	61fa      	str	r2, [r7, #28]
 8004662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800466a:	f7fb fdb5 	bl	80001d8 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4613      	mov	r3, r2
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004676:	e053      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004678:	4b35      	ldr	r3, [pc, #212]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	099b      	lsrs	r3, r3, #6
 800467e:	2200      	movs	r2, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	617a      	str	r2, [r7, #20]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800468a:	f04f 0b00 	mov.w	fp, #0
 800468e:	4652      	mov	r2, sl
 8004690:	465b      	mov	r3, fp
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	0159      	lsls	r1, r3, #5
 800469c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a0:	0150      	lsls	r0, r2, #5
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	ebb2 080a 	subs.w	r8, r2, sl
 80046aa:	eb63 090b 	sbc.w	r9, r3, fp
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046c2:	ebb2 0408 	subs.w	r4, r2, r8
 80046c6:	eb63 0509 	sbc.w	r5, r3, r9
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	00eb      	lsls	r3, r5, #3
 80046d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d8:	00e2      	lsls	r2, r4, #3
 80046da:	4614      	mov	r4, r2
 80046dc:	461d      	mov	r5, r3
 80046de:	eb14 030a 	adds.w	r3, r4, sl
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	eb45 030b 	adc.w	r3, r5, fp
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046f6:	4629      	mov	r1, r5
 80046f8:	028b      	lsls	r3, r1, #10
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004700:	4621      	mov	r1, r4
 8004702:	028a      	lsls	r2, r1, #10
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	2200      	movs	r2, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	60fa      	str	r2, [r7, #12]
 8004710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004714:	f7fb fd60 	bl	80001d8 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4613      	mov	r3, r2
 800471e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004730:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800473a:	e002      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x184>)
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004744:	4618      	mov	r0, r3
 8004746:	3740      	adds	r7, #64	@ 0x40
 8004748:	46bd      	mov	sp, r7
 800474a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	00f42400 	.word	0x00f42400
 8004758:	017d7840 	.word	0x017d7840

0800475c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <HAL_RCC_GetHCLKFreq+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000000 	.word	0x20000000

08004774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07b      	b.n	800487e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d108      	bne.n	80047a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004796:	d009      	beq.n	80047ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	61da      	str	r2, [r3, #28]
 800479e:	e005      	b.n	80047ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd f950 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004830:	ea42 0103 	orr.w	r1, r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0104 	and.w	r1, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	f003 0210 	and.w	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800486c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b08a      	sub	sp, #40	@ 0x28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004894:	2301      	movs	r3, #1
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004898:	f7fd fb66 	bl	8001f68 <HAL_GetTick>
 800489c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048b0:	7ffb      	ldrb	r3, [r7, #31]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d00c      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x4a>
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x46>
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d001      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80048cc:	2302      	movs	r3, #2
 80048ce:	e17f      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x5c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x5c>
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e174      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x6e>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e16d      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b04      	cmp	r3, #4
 8004906:	d003      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2205      	movs	r2, #5
 800490c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	887a      	ldrh	r2, [r7, #2]
 8004920:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	887a      	ldrh	r2, [r7, #2]
 8004926:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	887a      	ldrh	r2, [r7, #2]
 8004932:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b40      	cmp	r3, #64	@ 0x40
 8004952:	d007      	beq.n	8004964 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496c:	d17e      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_TransmitReceive+0xf6>
 8004976:	8afb      	ldrh	r3, [r7, #22]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d16c      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a0:	e059      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d11b      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x162>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x162>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d113      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	881a      	ldrh	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	1c9a      	adds	r2, r3, #2
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d119      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x1a4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d014      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	1c9a      	adds	r2, r3, #2
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a26:	2301      	movs	r3, #1
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a2a:	f7fd fa9d 	bl	8001f68 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d80d      	bhi.n	8004a56 <HAL_SPI_TransmitReceive+0x1d0>
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d009      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0bc      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1a0      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x11c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d19b      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x11c>
 8004a6a:	e082      	b.n	8004b72 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x1f4>
 8004a74:	8afb      	ldrh	r3, [r7, #22]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d171      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa0:	e05d      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d11c      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x264>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d017      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x264>
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d114      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	7812      	ldrb	r2, [r2, #0]
 8004acc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d119      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x2a6>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d014      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b2c:	f7fd fa1c 	bl	8001f68 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d803      	bhi.n	8004b44 <HAL_SPI_TransmitReceive+0x2be>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d102      	bne.n	8004b4a <HAL_SPI_TransmitReceive+0x2c4>
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e038      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d19c      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x21c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d197      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f8b6 	bl	8004ce8 <SPI_EndRxTxTransaction>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e01d      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3728      	adds	r7, #40	@ 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004be8:	f7fd f9be 	bl	8001f68 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bf8:	f7fd f9b6 	bl	8001f68 <HAL_GetTick>
 8004bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bfe:	4b39      	ldr	r3, [pc, #228]	@ (8004ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	015b      	lsls	r3, r3, #5
 8004c04:	0d1b      	lsrs	r3, r3, #20
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0e:	e054      	b.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d050      	beq.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c18:	f7fd f9a6 	bl	8001f68 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d902      	bls.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d13d      	bne.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c46:	d111      	bne.n	8004c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d004      	beq.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5a:	d107      	bne.n	8004c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d10f      	bne.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e017      	b.n	8004cda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d19b      	bne.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000000 	.word	0x20000000

08004ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ff6a 	bl	8004bd8 <SPI_WaitFlagStateUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e032      	b.n	8004d80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <SPI_EndRxTxTransaction+0xa0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <SPI_EndRxTxTransaction+0xa4>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	0d5b      	lsrs	r3, r3, #21
 8004d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d38:	d112      	bne.n	8004d60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	@ 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff ff47 	bl	8004bd8 <SPI_WaitFlagStateUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e00f      	b.n	8004d80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b80      	cmp	r3, #128	@ 0x80
 8004d78:	d0f2      	beq.n	8004d60 <SPI_EndRxTxTransaction+0x78>
 8004d7a:	e000      	b.n	8004d7e <SPI_EndRxTxTransaction+0x96>
        break;
 8004d7c:	bf00      	nop
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	165e9f81 	.word	0x165e9f81

08004d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e041      	b.n	8004e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc feec 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fa52 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e041      	b.n	8004ec4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fc fe51 	bl	8001afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 fa03 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_TIM_PWM_Start+0x24>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e022      	b.n	8004f36 <HAL_TIM_PWM_Start+0x6a>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d109      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x3e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e015      	b.n	8004f36 <HAL_TIM_PWM_Start+0x6a>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d109      	bne.n	8004f24 <HAL_TIM_PWM_Start+0x58>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e008      	b.n	8004f36 <HAL_TIM_PWM_Start+0x6a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e068      	b.n	8005010 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x82>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4c:	e013      	b.n	8004f76 <HAL_TIM_PWM_Start+0xaa>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0x92>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f5c:	e00b      	b.n	8004f76 <HAL_TIM_PWM_Start+0xaa>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f6c:	e003      	b.n	8004f76 <HAL_TIM_PWM_Start+0xaa>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb92 	bl	80056a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a23      	ldr	r2, [pc, #140]	@ (8005018 <HAL_TIM_PWM_Start+0x14c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8005018 <HAL_TIM_PWM_Start+0x14c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_TIM_PWM_Start+0x10e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb0:	d013      	beq.n	8004fda <HAL_TIM_PWM_Start+0x10e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a19      	ldr	r2, [pc, #100]	@ (800501c <HAL_TIM_PWM_Start+0x150>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_TIM_PWM_Start+0x10e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <HAL_TIM_PWM_Start+0x154>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_TIM_PWM_Start+0x10e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a16      	ldr	r2, [pc, #88]	@ (8005024 <HAL_TIM_PWM_Start+0x158>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_TIM_PWM_Start+0x10e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <HAL_TIM_PWM_Start+0x15c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d111      	bne.n	8004ffe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b06      	cmp	r3, #6
 8004fea:	d010      	beq.n	800500e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	e007      	b.n	800500e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40010000 	.word	0x40010000
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40014000 	.word	0x40014000

0800502c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fb32 	bl	80056a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a29      	ldr	r2, [pc, #164]	@ (80050f0 <HAL_TIM_PWM_Stop+0xc4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d117      	bne.n	800507e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <HAL_TIM_PWM_Stop+0x52>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	f240 4344 	movw	r3, #1092	@ 0x444
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d107      	bne.n	800507e <HAL_TIM_PWM_Stop+0x52>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <HAL_TIM_PWM_Stop+0x82>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a1a      	ldr	r2, [r3, #32]
 8005094:	f240 4344 	movw	r3, #1092	@ 0x444
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <HAL_TIM_PWM_Stop+0x82>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Stop+0x92>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050bc:	e013      	b.n	80050e6 <HAL_TIM_PWM_Stop+0xba>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Stop+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050cc:	e00b      	b.n	80050e6 <HAL_TIM_PWM_Stop+0xba>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Stop+0xb2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050dc:	e003      	b.n	80050e6 <HAL_TIM_PWM_Stop+0xba>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40010000 	.word	0x40010000

080050f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800510e:	2302      	movs	r3, #2
 8005110:	e0ae      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	f200 809f 	bhi.w	8005260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005122:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800515d 	.word	0x0800515d
 800512c:	08005261 	.word	0x08005261
 8005130:	08005261 	.word	0x08005261
 8005134:	08005261 	.word	0x08005261
 8005138:	0800519d 	.word	0x0800519d
 800513c:	08005261 	.word	0x08005261
 8005140:	08005261 	.word	0x08005261
 8005144:	08005261 	.word	0x08005261
 8005148:	080051df 	.word	0x080051df
 800514c:	08005261 	.word	0x08005261
 8005150:	08005261 	.word	0x08005261
 8005154:	08005261 	.word	0x08005261
 8005158:	0800521f 	.word	0x0800521f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f914 	bl	8005390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0204 	bic.w	r2, r2, #4
 8005186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6999      	ldr	r1, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
      break;
 800519a:	e064      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f95a 	bl	800545c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	619a      	str	r2, [r3, #24]
      break;
 80051dc:	e043      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f9a5 	bl	8005534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0208 	orr.w	r2, r2, #8
 80051f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0204 	bic.w	r2, r2, #4
 8005208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69d9      	ldr	r1, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]
      break;
 800521c:	e023      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f9ef 	bl	8005608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69d9      	ldr	r1, [r3, #28]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	021a      	lsls	r2, r3, #8
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	61da      	str	r2, [r3, #28]
      break;
 800525e:	e002      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3a      	ldr	r2, [pc, #232]	@ (8005374 <TIM_Base_SetConfig+0xfc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0x38>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0x38>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a37      	ldr	r2, [pc, #220]	@ (8005378 <TIM_Base_SetConfig+0x100>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0x38>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a36      	ldr	r2, [pc, #216]	@ (800537c <TIM_Base_SetConfig+0x104>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0x38>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a35      	ldr	r2, [pc, #212]	@ (8005380 <TIM_Base_SetConfig+0x108>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d108      	bne.n	80052c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005374 <TIM_Base_SetConfig+0xfc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01b      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d0:	d017      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a28      	ldr	r2, [pc, #160]	@ (8005378 <TIM_Base_SetConfig+0x100>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a27      	ldr	r2, [pc, #156]	@ (800537c <TIM_Base_SetConfig+0x104>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a26      	ldr	r2, [pc, #152]	@ (8005380 <TIM_Base_SetConfig+0x108>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a25      	ldr	r2, [pc, #148]	@ (8005384 <TIM_Base_SetConfig+0x10c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a24      	ldr	r2, [pc, #144]	@ (8005388 <TIM_Base_SetConfig+0x110>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a23      	ldr	r2, [pc, #140]	@ (800538c <TIM_Base_SetConfig+0x114>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0e      	ldr	r2, [pc, #56]	@ (8005374 <TIM_Base_SetConfig+0xfc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]
  }
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800

08005390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f023 0201 	bic.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 0302 	bic.w	r3, r3, #2
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <TIM_OC1_SetConfig+0xc8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <TIM_OC1_SetConfig+0xc8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d111      	bne.n	8005432 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40010000 	.word	0x40010000

0800545c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f023 0210 	bic.w	r2, r3, #16
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0320 	bic.w	r3, r3, #32
 80054a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005530 <TIM_OC2_SetConfig+0xd4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d10d      	bne.n	80054d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a15      	ldr	r2, [pc, #84]	@ (8005530 <TIM_OC2_SetConfig+0xd4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d113      	bne.n	8005508 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000

08005534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800557c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a1d      	ldr	r2, [pc, #116]	@ (8005604 <TIM_OC3_SetConfig+0xd0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d10d      	bne.n	80055ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a14      	ldr	r2, [pc, #80]	@ (8005604 <TIM_OC3_SetConfig+0xd0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d113      	bne.n	80055de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40010000 	.word	0x40010000

08005608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a10      	ldr	r2, [pc, #64]	@ (80056a4 <TIM_OC4_SetConfig+0x9c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800566e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000

080056a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2201      	movs	r2, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	401a      	ands	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e050      	b.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1c      	ldr	r2, [pc, #112]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005758:	d013      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a18      	ldr	r2, [pc, #96]	@ (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a16      	ldr	r2, [pc, #88]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a15      	ldr	r2, [pc, #84]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a13      	ldr	r2, [pc, #76]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4313      	orrs	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40014000 	.word	0x40014000

080057d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e03d      	b.n	8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005874:	b084      	sub	sp, #16
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	f107 001c 	add.w	r0, r7, #28
 8005882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005886:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800588a:	2b01      	cmp	r3, #1
 800588c:	d123      	bne.n	80058d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005892:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80058a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 fae8 	bl	8006ea0 <USB_CoreReset>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e01b      	b.n	800590e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fadc 	bl	8006ea0 <USB_CoreReset>
 80058e8:	4603      	mov	r3, r0
 80058ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005900:	e005      	b.n	800590e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800590e:	7fbb      	ldrb	r3, [r7, #30]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d10b      	bne.n	800592c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f043 0206 	orr.w	r2, r3, #6
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005938:	b004      	add	sp, #16
 800593a:	4770      	bx	lr

0800593c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d165      	bne.n	8005a1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a41      	ldr	r2, [pc, #260]	@ (8005a58 <USB_SetTurnaroundTime+0x11c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d906      	bls.n	8005966 <USB_SetTurnaroundTime+0x2a>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4a40      	ldr	r2, [pc, #256]	@ (8005a5c <USB_SetTurnaroundTime+0x120>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d202      	bcs.n	8005966 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005960:	230f      	movs	r3, #15
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e062      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a3c      	ldr	r2, [pc, #240]	@ (8005a5c <USB_SetTurnaroundTime+0x120>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d306      	bcc.n	800597c <USB_SetTurnaroundTime+0x40>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4a3b      	ldr	r2, [pc, #236]	@ (8005a60 <USB_SetTurnaroundTime+0x124>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d202      	bcs.n	800597c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005976:	230e      	movs	r3, #14
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e057      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4a38      	ldr	r2, [pc, #224]	@ (8005a60 <USB_SetTurnaroundTime+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d306      	bcc.n	8005992 <USB_SetTurnaroundTime+0x56>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4a37      	ldr	r2, [pc, #220]	@ (8005a64 <USB_SetTurnaroundTime+0x128>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d202      	bcs.n	8005992 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800598c:	230d      	movs	r3, #13
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e04c      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4a33      	ldr	r2, [pc, #204]	@ (8005a64 <USB_SetTurnaroundTime+0x128>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d306      	bcc.n	80059a8 <USB_SetTurnaroundTime+0x6c>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4a32      	ldr	r2, [pc, #200]	@ (8005a68 <USB_SetTurnaroundTime+0x12c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d802      	bhi.n	80059a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059a2:	230c      	movs	r3, #12
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	e041      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005a68 <USB_SetTurnaroundTime+0x12c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d906      	bls.n	80059be <USB_SetTurnaroundTime+0x82>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a6c <USB_SetTurnaroundTime+0x130>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d802      	bhi.n	80059be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059b8:	230b      	movs	r3, #11
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e036      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a6c <USB_SetTurnaroundTime+0x130>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d906      	bls.n	80059d4 <USB_SetTurnaroundTime+0x98>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4a29      	ldr	r2, [pc, #164]	@ (8005a70 <USB_SetTurnaroundTime+0x134>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d802      	bhi.n	80059d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059ce:	230a      	movs	r3, #10
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e02b      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4a26      	ldr	r2, [pc, #152]	@ (8005a70 <USB_SetTurnaroundTime+0x134>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d906      	bls.n	80059ea <USB_SetTurnaroundTime+0xae>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4a25      	ldr	r2, [pc, #148]	@ (8005a74 <USB_SetTurnaroundTime+0x138>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d202      	bcs.n	80059ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059e4:	2309      	movs	r3, #9
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e020      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4a21      	ldr	r2, [pc, #132]	@ (8005a74 <USB_SetTurnaroundTime+0x138>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d306      	bcc.n	8005a00 <USB_SetTurnaroundTime+0xc4>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4a20      	ldr	r2, [pc, #128]	@ (8005a78 <USB_SetTurnaroundTime+0x13c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d802      	bhi.n	8005a00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059fa:	2308      	movs	r3, #8
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e015      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <USB_SetTurnaroundTime+0x13c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d906      	bls.n	8005a16 <USB_SetTurnaroundTime+0xda>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <USB_SetTurnaroundTime+0x140>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d202      	bcs.n	8005a16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a10:	2307      	movs	r3, #7
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e00a      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a16:	2306      	movs	r3, #6
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e007      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a22:	2309      	movs	r3, #9
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e001      	b.n	8005a2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a28:	2309      	movs	r3, #9
 8005a2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	00d8acbf 	.word	0x00d8acbf
 8005a5c:	00e4e1c0 	.word	0x00e4e1c0
 8005a60:	00f42400 	.word	0x00f42400
 8005a64:	01067380 	.word	0x01067380
 8005a68:	011a499f 	.word	0x011a499f
 8005a6c:	01312cff 	.word	0x01312cff
 8005a70:	014ca43f 	.word	0x014ca43f
 8005a74:	016e3600 	.word	0x016e3600
 8005a78:	01a6ab1f 	.word	0x01a6ab1f
 8005a7c:	01e84800 	.word	0x01e84800

08005a80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f043 0201 	orr.w	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d115      	bne.n	8005b12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005af2:	200a      	movs	r0, #10
 8005af4:	f7fc fa44 	bl	8001f80 <HAL_Delay>
      ms += 10U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	330a      	adds	r3, #10
 8005afc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 f93f 	bl	8006d82 <USB_GetMode>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d01e      	beq.n	8005b48 <USB_SetCurrentMode+0x84>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b0e:	d9f0      	bls.n	8005af2 <USB_SetCurrentMode+0x2e>
 8005b10:	e01a      	b.n	8005b48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d115      	bne.n	8005b44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b24:	200a      	movs	r0, #10
 8005b26:	f7fc fa2b 	bl	8001f80 <HAL_Delay>
      ms += 10U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	330a      	adds	r3, #10
 8005b2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 f926 	bl	8006d82 <USB_GetMode>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <USB_SetCurrentMode+0x84>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b40:	d9f0      	bls.n	8005b24 <USB_SetCurrentMode+0x60>
 8005b42:	e001      	b.n	8005b48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e005      	b.n	8005b54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b4c:	d101      	bne.n	8005b52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b086      	sub	sp, #24
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	e009      	b.n	8005b90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3340      	adds	r3, #64	@ 0x40
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	2200      	movs	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b0e      	cmp	r3, #14
 8005b94:	d9f2      	bls.n	8005b7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11c      	bne.n	8005bd8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bd6:	e00b      	b.n	8005bf0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bdc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bfc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10d      	bne.n	8005c20 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f968 	bl	8005ee4 <USB_SetDevSpeed>
 8005c14:	e008      	b.n	8005c28 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c16:	2101      	movs	r1, #1
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f963 	bl	8005ee4 <USB_SetDevSpeed>
 8005c1e:	e003      	b.n	8005c28 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c20:	2103      	movs	r1, #3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f95e 	bl	8005ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c28:	2110      	movs	r1, #16
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8fa 	bl	8005e24 <USB_FlushTxFifo>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f924 	bl	8005e88 <USB_FlushRxFifo>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c50:	461a      	mov	r2, r3
 8005c52:	2300      	movs	r3, #0
 8005c54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e043      	b.n	8005cfc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c8a:	d118      	bne.n	8005cbe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e013      	b.n	8005cd0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e008      	b.n	8005cd0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d00:	461a      	mov	r2, r3
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d3b5      	bcc.n	8005c74 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	e043      	b.n	8005d96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d24:	d118      	bne.n	8005d58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e013      	b.n	8005d6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e008      	b.n	8005d6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d64:	461a      	mov	r2, r3
 8005d66:	2300      	movs	r3, #0
 8005d68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3301      	adds	r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d3b5      	bcc.n	8005d0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005db4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005dc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f043 0210 	orr.w	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	4b10      	ldr	r3, [pc, #64]	@ (8005e20 <USB_DevInit+0x2c4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005de4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f043 0208 	orr.w	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005df8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e08:	f043 0304 	orr.w	r3, r3, #4
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e1c:	b004      	add	sp, #16
 8005e1e:	4770      	bx	lr
 8005e20:	803c3800 	.word	0x803c3800

08005e24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e3e:	d901      	bls.n	8005e44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e01b      	b.n	8005e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	daf2      	bge.n	8005e32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	019b      	lsls	r3, r3, #6
 8005e54:	f043 0220 	orr.w	r2, r3, #32
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e68:	d901      	bls.n	8005e6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e006      	b.n	8005e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d0f0      	beq.n	8005e5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ea0:	d901      	bls.n	8005ea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e018      	b.n	8005ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	daf2      	bge.n	8005e94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ec4:	d901      	bls.n	8005eca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e006      	b.n	8005ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d0f0      	beq.n	8005eb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0306 	and.w	r3, r3, #6
 8005f2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]
 8005f3a:	e00a      	b.n	8005f52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d002      	beq.n	8005f48 <USB_GetDevSpeed+0x32>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	d102      	bne.n	8005f4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	75fb      	strb	r3, [r7, #23]
 8005f4c:	e001      	b.n	8005f52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f4e:	230f      	movs	r3, #15
 8005f50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d13a      	bne.n	8005ff2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	68f9      	ldr	r1, [r7, #12]
 8005f96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d155      	bne.n	8006060 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	791b      	ldrb	r3, [r3, #4]
 8005fce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	059b      	lsls	r3, r3, #22
 8005fd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e036      	b.n	8006060 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff8:	69da      	ldr	r2, [r3, #28]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	2101      	movs	r1, #1
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006010:	4313      	orrs	r3, r2
 8006012:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d11a      	bne.n	8006060 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	791b      	ldrb	r3, [r3, #4]
 8006044:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006046:	430b      	orrs	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d161      	bne.n	8006150 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800609e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a2:	d11f      	bne.n	80060e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	2101      	movs	r1, #1
 80060f6:	fa01 f303 	lsl.w	r3, r1, r3
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006104:	4013      	ands	r3, r2
 8006106:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	2101      	movs	r1, #1
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006128:	4013      	ands	r3, r2
 800612a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	0159      	lsls	r1, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	440b      	add	r3, r1
 8006142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006146:	4619      	mov	r1, r3
 8006148:	4b35      	ldr	r3, [pc, #212]	@ (8006220 <USB_DeactivateEndpoint+0x1b0>)
 800614a:	4013      	ands	r3, r2
 800614c:	600b      	str	r3, [r1, #0]
 800614e:	e060      	b.n	8006212 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006166:	d11f      	bne.n	80061a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006182:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006186:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	2101      	movs	r1, #1
 80061ba:	fa01 f303 	lsl.w	r3, r1, r3
 80061be:	041b      	lsls	r3, r3, #16
 80061c0:	43db      	mvns	r3, r3
 80061c2:	68f9      	ldr	r1, [r7, #12]
 80061c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061c8:	4013      	ands	r3, r2
 80061ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	43db      	mvns	r3, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061ec:	4013      	ands	r3, r2
 80061ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	0159      	lsls	r1, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	440b      	add	r3, r1
 8006206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620a:	4619      	mov	r1, r3
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <USB_DeactivateEndpoint+0x1b4>)
 800620e:	4013      	ands	r3, r2
 8006210:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	ec337800 	.word	0xec337800
 8006224:	eff37800 	.word	0xeff37800

08006228 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	4613      	mov	r3, r2
 8006234:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	f040 817f 	bne.w	8006548 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d132      	bne.n	80062b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800626c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006270:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006290:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b0:	0cdb      	lsrs	r3, r3, #19
 80062b2:	04db      	lsls	r3, r3, #19
 80062b4:	6113      	str	r3, [r2, #16]
 80062b6:	e097      	b.n	80063e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d2:	0cdb      	lsrs	r3, r3, #19
 80062d4:	04db      	lsls	r3, r3, #19
 80062d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11a      	bne.n	8006338 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d903      	bls.n	8006316 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006330:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006334:	6113      	str	r3, [r2, #16]
 8006336:	e044      	b.n	80063c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4413      	add	r3, r2
 8006342:	1e5a      	subs	r2, r3, #1
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	8afb      	ldrh	r3, [r7, #22]
 800635e:	04d9      	lsls	r1, r3, #19
 8006360:	4ba4      	ldr	r3, [pc, #656]	@ (80065f4 <USB_EPStartXfer+0x3cc>)
 8006362:	400b      	ands	r3, r1
 8006364:	69b9      	ldr	r1, [r7, #24]
 8006366:	0148      	lsls	r0, r1, #5
 8006368:	69f9      	ldr	r1, [r7, #28]
 800636a:	4401      	add	r1, r0
 800636c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006370:	4313      	orrs	r3, r2
 8006372:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	791b      	ldrb	r3, [r3, #4]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d122      	bne.n	80063c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006396:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800639a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	8afb      	ldrh	r3, [r7, #22]
 80063ac:	075b      	lsls	r3, r3, #29
 80063ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	0148      	lsls	r0, r1, #5
 80063b6:	69f9      	ldr	r1, [r7, #28]
 80063b8:	4401      	add	r1, r0
 80063ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d8:	69b9      	ldr	r1, [r7, #24]
 80063da:	0148      	lsls	r0, r1, #5
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	4401      	add	r1, r0
 80063e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063e4:	4313      	orrs	r3, r2
 80063e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d14b      	bne.n	8006486 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	791b      	ldrb	r3, [r3, #4]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d128      	bne.n	8006464 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d110      	bne.n	8006444 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e00f      	b.n	8006464 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006462:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800647e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e166      	b.n	8006754 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d015      	beq.n	80064da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 814e 	beq.w	8006754 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	2101      	movs	r1, #1
 80064ca:	fa01 f303 	lsl.w	r3, r1, r3
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064d4:	4313      	orrs	r3, r2
 80064d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80064d8:	e13c      	b.n	8006754 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d110      	bne.n	800650c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006504:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e00f      	b.n	800652c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	68d9      	ldr	r1, [r3, #12]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	b298      	uxth	r0, r3
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	4603      	mov	r3, r0
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f9b9 	bl	80068b8 <USB_WritePacket>
 8006546:	e105      	b.n	8006754 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	440a      	add	r2, r1
 800655e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006562:	0cdb      	lsrs	r3, r3, #19
 8006564:	04db      	lsls	r3, r3, #19
 8006566:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006582:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006586:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800658a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d132      	bne.n	80065f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	0148      	lsls	r0, r1, #5
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	4401      	add	r1, r0
 80065c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065ee:	6113      	str	r3, [r2, #16]
 80065f0:	e062      	b.n	80066b8 <USB_EPStartXfer+0x490>
 80065f2:	bf00      	nop
 80065f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d123      	bne.n	8006648 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	0148      	lsls	r0, r1, #5
 800661a:	69f9      	ldr	r1, [r7, #28]
 800661c:	4401      	add	r1, r0
 800661e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006622:	4313      	orrs	r3, r2
 8006624:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006644:	6113      	str	r3, [r2, #16]
 8006646:	e037      	b.n	80066b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	4413      	add	r3, r2
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	8afa      	ldrh	r2, [r7, #22]
 8006664:	fb03 f202 	mul.w	r2, r3, r2
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	8afb      	ldrh	r3, [r7, #22]
 800667c:	04d9      	lsls	r1, r3, #19
 800667e:	4b38      	ldr	r3, [pc, #224]	@ (8006760 <USB_EPStartXfer+0x538>)
 8006680:	400b      	ands	r3, r1
 8006682:	69b9      	ldr	r1, [r7, #24]
 8006684:	0148      	lsls	r0, r1, #5
 8006686:	69f9      	ldr	r1, [r7, #28]
 8006688:	4401      	add	r1, r0
 800668a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800668e:	4313      	orrs	r3, r2
 8006690:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	69b9      	ldr	r1, [r7, #24]
 80066aa:	0148      	lsls	r0, r1, #5
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	4401      	add	r1, r0
 80066b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066b4:	4313      	orrs	r3, r2
 80066b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10d      	bne.n	80066da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	68d9      	ldr	r1, [r3, #12]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	460a      	mov	r2, r1
 80066d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d128      	bne.n	8006734 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d110      	bne.n	8006714 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800670c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e00f      	b.n	8006734 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006732:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	1ff80000 	.word	0x1ff80000

08006764 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d14a      	bne.n	8006818 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800679a:	f040 8086 	bne.w	80068aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d902      	bls.n	80067fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
          break;
 80067fa:	e056      	b.n	80068aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006814:	d0e7      	beq.n	80067e6 <USB_EPStopXfer+0x82>
 8006816:	e048      	b.n	80068aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800682c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006830:	d13b      	bne.n	80068aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006850:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006854:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006874:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006878:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006886:	4293      	cmp	r3, r2
 8006888:	d902      	bls.n	8006890 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]
          break;
 800688e:	e00c      	b.n	80068aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a8:	d0e7      	beq.n	800687a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b089      	sub	sp, #36	@ 0x24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	460b      	mov	r3, r1
 80068c8:	71fb      	strb	r3, [r7, #7]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d123      	bne.n	8006926 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068de:	88bb      	ldrh	r3, [r7, #4]
 80068e0:	3303      	adds	r3, #3
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e018      	b.n	800691e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	031a      	lsls	r2, r3, #12
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f8:	461a      	mov	r2, r3
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	3301      	adds	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3301      	adds	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	3301      	adds	r3, #1
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d3e2      	bcc.n	80068ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3724      	adds	r7, #36	@ 0x24
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006934:	b480      	push	{r7}
 8006936:	b08b      	sub	sp, #44	@ 0x2c
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	089b      	lsrs	r3, r3, #2
 800694e:	b29b      	uxth	r3, r3
 8006950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	e014      	b.n	800698a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	601a      	str	r2, [r3, #0]
    pDest++;
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	3301      	adds	r3, #1
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	3301      	adds	r3, #1
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	3301      	adds	r3, #1
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	3301      	adds	r3, #1
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	3301      	adds	r3, #1
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	429a      	cmp	r2, r3
 8006990:	d3e6      	bcc.n	8006960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006992:	8bfb      	ldrh	r3, [r7, #30]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01e      	beq.n	80069d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a2:	461a      	mov	r2, r3
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	701a      	strb	r2, [r3, #0]
      i++;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	3301      	adds	r3, #1
 80069c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	3301      	adds	r3, #1
 80069c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80069ca:	8bfb      	ldrh	r3, [r7, #30]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069d0:	8bfb      	ldrh	r3, [r7, #30]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1ea      	bne.n	80069ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069d8:	4618      	mov	r0, r3
 80069da:	372c      	adds	r7, #44	@ 0x2c
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d12c      	bne.n	8006a5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db12      	blt.n	8006a38 <USB_EPSetStall+0x54>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00f      	beq.n	8006a38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e02b      	b.n	8006ab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db12      	blt.n	8006a92 <USB_EPSetStall+0xae>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00f      	beq.n	8006a92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d128      	bne.n	8006b2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006afa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d003      	beq.n	8006b0c <USB_EPClearStall+0x4c>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	791b      	ldrb	r3, [r3, #4]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d138      	bne.n	8006b7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	e027      	b.n	8006b7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d003      	beq.n	8006b5e <USB_EPClearStall+0x9e>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	791b      	ldrb	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d10f      	bne.n	8006b7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006baa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006bae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006bc0:	68f9      	ldr	r1, [r7, #12]
 8006bc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c06:	f023 0302 	bic.w	r3, r3, #2
 8006c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c34:	f023 0303 	bic.w	r3, r3, #3
 8006c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c48:	f043 0302 	orr.w	r3, r3, #2
 8006c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c74:	68fb      	ldr	r3, [r7, #12]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0c1b      	lsrs	r3, r3, #16
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	b29b      	uxth	r3, r3
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d18:	68bb      	ldr	r3, [r7, #8]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4013      	ands	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d74:	68bb      	ldr	r3, [r7, #8]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006dbc:	f023 0307 	bic.w	r3, r3, #7
 8006dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	460b      	mov	r3, r1
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	333c      	adds	r3, #60	@ 0x3c
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4a26      	ldr	r2, [pc, #152]	@ (8006e9c <USB_EP0_OutStart+0xb8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d90a      	bls.n	8006e1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e18:	d101      	bne.n	8006e1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e037      	b.n	8006e8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e24:	461a      	mov	r2, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e4c:	f043 0318 	orr.w	r3, r3, #24
 8006e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e66:	7afb      	ldrb	r3, [r7, #11]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d10f      	bne.n	8006e8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	4f54300a 	.word	0x4f54300a

08006ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb8:	d901      	bls.n	8006ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e01b      	b.n	8006ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	daf2      	bge.n	8006eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f043 0201 	orr.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ee2:	d901      	bls.n	8006ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e006      	b.n	8006ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d0f0      	beq.n	8006ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f14:	f002 fc2e 	bl	8009774 <USBD_static_malloc>
 8006f18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32b0      	adds	r2, #176	@ 0xb0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f30:	2302      	movs	r3, #2
 8006f32:	e0d4      	b.n	80070de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006f38:	2100      	movs	r1, #0
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f002 fc5e 	bl	80097fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	32b0      	adds	r2, #176	@ 0xb0
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32b0      	adds	r2, #176	@ 0xb0
 8006f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7c1b      	ldrb	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d138      	bne.n	8006fde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006f6e:	7819      	ldrb	r1, [r3, #0]
 8006f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f74:	2202      	movs	r2, #2
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f002 fad9 	bl	800952e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 020f 	and.w	r2, r3, #15
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3324      	adds	r3, #36	@ 0x24
 8006f92:	2201      	movs	r2, #1
 8006f94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f96:	4b55      	ldr	r3, [pc, #340]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8006f98:	7819      	ldrb	r1, [r3, #0]
 8006f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f002 fac4 	bl	800952e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fa6:	4b51      	ldr	r3, [pc, #324]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	f003 020f 	and.w	r2, r3, #15
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	3326      	adds	r3, #38	@ 0x26
 8006fd8:	2210      	movs	r2, #16
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e035      	b.n	800704a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fde:	4b42      	ldr	r3, [pc, #264]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006fe0:	7819      	ldrb	r1, [r3, #0]
 8006fe2:	2340      	movs	r3, #64	@ 0x40
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f002 faa1 	bl	800952e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fec:	4b3e      	ldr	r3, [pc, #248]	@ (80070e8 <USBD_CDC_Init+0x1e4>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 020f 	and.w	r2, r3, #15
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	3324      	adds	r3, #36	@ 0x24
 8007002:	2201      	movs	r2, #1
 8007004:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007006:	4b39      	ldr	r3, [pc, #228]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8007008:	7819      	ldrb	r1, [r3, #0]
 800700a:	2340      	movs	r3, #64	@ 0x40
 800700c:	2202      	movs	r2, #2
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 fa8d 	bl	800952e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007014:	4b35      	ldr	r3, [pc, #212]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800702c:	2201      	movs	r2, #1
 800702e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007030:	4b2f      	ldr	r3, [pc, #188]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3326      	adds	r3, #38	@ 0x26
 8007046:	2210      	movs	r2, #16
 8007048:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800704a:	4b29      	ldr	r3, [pc, #164]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 800704c:	7819      	ldrb	r1, [r3, #0]
 800704e:	2308      	movs	r3, #8
 8007050:	2203      	movs	r2, #3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f002 fa6b 	bl	800952e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007058:	4b25      	ldr	r3, [pc, #148]	@ (80070f0 <USBD_CDC_Init+0x1ec>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 020f 	and.w	r2, r3, #15
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	3324      	adds	r3, #36	@ 0x24
 800706e:	2201      	movs	r2, #1
 8007070:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	33b0      	adds	r3, #176	@ 0xb0
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e018      	b.n	80070de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070b4:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 80070b6:	7819      	ldrb	r1, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f002 fb22 	bl	800970c <USBD_LL_PrepareReceive>
 80070c8:	e008      	b.n	80070dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070ca:	4b08      	ldr	r3, [pc, #32]	@ (80070ec <USBD_CDC_Init+0x1e8>)
 80070cc:	7819      	ldrb	r1, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070d4:	2340      	movs	r3, #64	@ 0x40
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f002 fb18 	bl	800970c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000093 	.word	0x20000093
 80070ec:	20000094 	.word	0x20000094
 80070f0:	20000095 	.word	0x20000095

080070f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007100:	4b3a      	ldr	r3, [pc, #232]	@ (80071ec <USBD_CDC_DeInit+0xf8>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f002 fa37 	bl	800957a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800710c:	4b37      	ldr	r3, [pc, #220]	@ (80071ec <USBD_CDC_DeInit+0xf8>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 020f 	and.w	r2, r3, #15
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	3324      	adds	r3, #36	@ 0x24
 8007122:	2200      	movs	r2, #0
 8007124:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007126:	4b32      	ldr	r3, [pc, #200]	@ (80071f0 <USBD_CDC_DeInit+0xfc>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f002 fa24 	bl	800957a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007132:	4b2f      	ldr	r3, [pc, #188]	@ (80071f0 <USBD_CDC_DeInit+0xfc>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 020f 	and.w	r2, r3, #15
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800714a:	2200      	movs	r2, #0
 800714c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800714e:	4b29      	ldr	r3, [pc, #164]	@ (80071f4 <USBD_CDC_DeInit+0x100>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f002 fa10 	bl	800957a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800715a:	4b26      	ldr	r3, [pc, #152]	@ (80071f4 <USBD_CDC_DeInit+0x100>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f003 020f 	and.w	r2, r3, #15
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	3324      	adds	r3, #36	@ 0x24
 8007170:	2200      	movs	r2, #0
 8007172:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007174:	4b1f      	ldr	r3, [pc, #124]	@ (80071f4 <USBD_CDC_DeInit+0x100>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 020f 	and.w	r2, r3, #15
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3326      	adds	r3, #38	@ 0x26
 800718a:	2200      	movs	r2, #0
 800718c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	32b0      	adds	r2, #176	@ 0xb0
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01f      	beq.n	80071e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	33b0      	adds	r3, #176	@ 0xb0
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	32b0      	adds	r2, #176	@ 0xb0
 80071be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 fae4 	bl	8009790 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32b0      	adds	r2, #176	@ 0xb0
 80071d2:	2100      	movs	r1, #0
 80071d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000093 	.word	0x20000093
 80071f0:	20000094 	.word	0x20000094
 80071f4:	20000095 	.word	0x20000095

080071f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32b0      	adds	r2, #176	@ 0xb0
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	e0bf      	b.n	80073a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007230:	2b00      	cmp	r3, #0
 8007232:	d050      	beq.n	80072d6 <USBD_CDC_Setup+0xde>
 8007234:	2b20      	cmp	r3, #32
 8007236:	f040 80af 	bne.w	8007398 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	88db      	ldrh	r3, [r3, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d03a      	beq.n	80072b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b25b      	sxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	da1b      	bge.n	8007284 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	33b0      	adds	r3, #176	@ 0xb0
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007262:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	88d2      	ldrh	r2, [r2, #6]
 8007268:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88db      	ldrh	r3, [r3, #6]
 800726e:	2b07      	cmp	r3, #7
 8007270:	bf28      	it	cs
 8007272:	2307      	movcs	r3, #7
 8007274:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	89fa      	ldrh	r2, [r7, #14]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fd53 	bl	8008d28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007282:	e090      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785a      	ldrb	r2, [r3, #1]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	2b3f      	cmp	r3, #63	@ 0x3f
 8007294:	d803      	bhi.n	800729e <USBD_CDC_Setup+0xa6>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88db      	ldrh	r3, [r3, #6]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	e000      	b.n	80072a0 <USBD_CDC_Setup+0xa8>
 800729e:	2240      	movs	r2, #64	@ 0x40
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80072a6:	6939      	ldr	r1, [r7, #16]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80072ae:	461a      	mov	r2, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fd65 	bl	8008d80 <USBD_CtlPrepareRx>
      break;
 80072b6:	e076      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	33b0      	adds	r3, #176	@ 0xb0
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	7850      	ldrb	r0, [r2, #1]
 80072ce:	2200      	movs	r2, #0
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	4798      	blx	r3
      break;
 80072d4:	e067      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b0b      	cmp	r3, #11
 80072dc:	d851      	bhi.n	8007382 <USBD_CDC_Setup+0x18a>
 80072de:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <USBD_CDC_Setup+0xec>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007315 	.word	0x08007315
 80072e8:	08007391 	.word	0x08007391
 80072ec:	08007383 	.word	0x08007383
 80072f0:	08007383 	.word	0x08007383
 80072f4:	08007383 	.word	0x08007383
 80072f8:	08007383 	.word	0x08007383
 80072fc:	08007383 	.word	0x08007383
 8007300:	08007383 	.word	0x08007383
 8007304:	08007383 	.word	0x08007383
 8007308:	08007383 	.word	0x08007383
 800730c:	0800733f 	.word	0x0800733f
 8007310:	08007369 	.word	0x08007369
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b03      	cmp	r3, #3
 800731e:	d107      	bne.n	8007330 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007320:	f107 030a 	add.w	r3, r7, #10
 8007324:	2202      	movs	r2, #2
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fcfd 	bl	8008d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800732e:	e032      	b.n	8007396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fc7b 	bl	8008c2e <USBD_CtlError>
            ret = USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	75fb      	strb	r3, [r7, #23]
          break;
 800733c:	e02b      	b.n	8007396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d107      	bne.n	800735a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800734a:	f107 030d 	add.w	r3, r7, #13
 800734e:	2201      	movs	r2, #1
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fce8 	bl	8008d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007358:	e01d      	b.n	8007396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fc66 	bl	8008c2e <USBD_CtlError>
            ret = USBD_FAIL;
 8007362:	2303      	movs	r3, #3
 8007364:	75fb      	strb	r3, [r7, #23]
          break;
 8007366:	e016      	b.n	8007396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b03      	cmp	r3, #3
 8007372:	d00f      	beq.n	8007394 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fc59 	bl	8008c2e <USBD_CtlError>
            ret = USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007380:	e008      	b.n	8007394 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fc52 	bl	8008c2e <USBD_CtlError>
          ret = USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	75fb      	strb	r3, [r7, #23]
          break;
 800738e:	e002      	b.n	8007396 <USBD_CDC_Setup+0x19e>
          break;
 8007390:	bf00      	nop
 8007392:	e008      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>
          break;
 8007394:	bf00      	nop
      }
      break;
 8007396:	e006      	b.n	80073a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fc47 	bl	8008c2e <USBD_CtlError>
      ret = USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	75fb      	strb	r3, [r7, #23]
      break;
 80073a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32b0      	adds	r2, #176	@ 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e065      	b.n	80074a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	32b0      	adds	r2, #176	@ 0xb0
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	f003 020f 	and.w	r2, r3, #15
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3318      	adds	r3, #24
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02f      	beq.n	8007464 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	3318      	adds	r3, #24
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	f003 010f 	and.w	r1, r3, #15
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	460b      	mov	r3, r1
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4403      	add	r3, r0
 800742c:	331c      	adds	r3, #28
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	fbb2 f1f3 	udiv	r1, r2, r3
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800743a:	2b00      	cmp	r3, #0
 800743c:	d112      	bne.n	8007464 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	3318      	adds	r3, #24
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007456:	78f9      	ldrb	r1, [r7, #3]
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 f934 	bl	80096ca <USBD_LL_Transmit>
 8007462:	e01f      	b.n	80074a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	33b0      	adds	r3, #176	@ 0xb0
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d010      	beq.n	80074a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	33b0      	adds	r3, #176	@ 0xb0
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	32b0      	adds	r2, #176	@ 0xb0
 80074c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	32b0      	adds	r2, #176	@ 0xb0
 80074d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e01a      	b.n	8007516 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 f932 	bl	800974e <USBD_LL_GetRxDataSize>
 80074ea:	4602      	mov	r2, r0
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	33b0      	adds	r3, #176	@ 0xb0
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007510:	4611      	mov	r1, r2
 8007512:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	32b0      	adds	r2, #176	@ 0xb0
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e024      	b.n	800758a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	33b0      	adds	r3, #176	@ 0xb0
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d019      	beq.n	8007588 <USBD_CDC_EP0_RxReady+0x6a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800755a:	2bff      	cmp	r3, #255	@ 0xff
 800755c:	d014      	beq.n	8007588 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	33b0      	adds	r3, #176	@ 0xb0
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007576:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800757e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	22ff      	movs	r2, #255	@ 0xff
 8007584:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800759c:	2182      	movs	r1, #130	@ 0x82
 800759e:	4818      	ldr	r0, [pc, #96]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075a0:	f000 fd0f 	bl	8007fc2 <USBD_GetEpDesc>
 80075a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075a6:	2101      	movs	r1, #1
 80075a8:	4815      	ldr	r0, [pc, #84]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075aa:	f000 fd0a 	bl	8007fc2 <USBD_GetEpDesc>
 80075ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075b0:	2181      	movs	r1, #129	@ 0x81
 80075b2:	4813      	ldr	r0, [pc, #76]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075b4:	f000 fd05 	bl	8007fc2 <USBD_GetEpDesc>
 80075b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2210      	movs	r2, #16
 80075c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075d4:	711a      	strb	r2, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075e8:	711a      	strb	r2, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2243      	movs	r2, #67	@ 0x43
 80075f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075f4:	4b02      	ldr	r3, [pc, #8]	@ (8007600 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000050 	.word	0x20000050

08007604 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800760c:	2182      	movs	r1, #130	@ 0x82
 800760e:	4818      	ldr	r0, [pc, #96]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007610:	f000 fcd7 	bl	8007fc2 <USBD_GetEpDesc>
 8007614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007616:	2101      	movs	r1, #1
 8007618:	4815      	ldr	r0, [pc, #84]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800761a:	f000 fcd2 	bl	8007fc2 <USBD_GetEpDesc>
 800761e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007620:	2181      	movs	r1, #129	@ 0x81
 8007622:	4813      	ldr	r0, [pc, #76]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007624:	f000 fccd 	bl	8007fc2 <USBD_GetEpDesc>
 8007628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2210      	movs	r2, #16
 8007634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2200      	movs	r2, #0
 8007640:	711a      	strb	r2, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f042 0202 	orr.w	r2, r2, #2
 8007648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	711a      	strb	r2, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f042 0202 	orr.w	r2, r2, #2
 800765c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2243      	movs	r2, #67	@ 0x43
 8007662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007664:	4b02      	ldr	r3, [pc, #8]	@ (8007670 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000050 	.word	0x20000050

08007674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800767c:	2182      	movs	r1, #130	@ 0x82
 800767e:	4818      	ldr	r0, [pc, #96]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007680:	f000 fc9f 	bl	8007fc2 <USBD_GetEpDesc>
 8007684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007686:	2101      	movs	r1, #1
 8007688:	4815      	ldr	r0, [pc, #84]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800768a:	f000 fc9a 	bl	8007fc2 <USBD_GetEpDesc>
 800768e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007690:	2181      	movs	r1, #129	@ 0x81
 8007692:	4813      	ldr	r0, [pc, #76]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007694:	f000 fc95 	bl	8007fc2 <USBD_GetEpDesc>
 8007698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2210      	movs	r2, #16
 80076a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076b4:	711a      	strb	r2, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c8:	711a      	strb	r2, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2243      	movs	r2, #67	@ 0x43
 80076d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076d4:	4b02      	ldr	r3, [pc, #8]	@ (80076e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000050 	.word	0x20000050

080076e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	220a      	movs	r2, #10
 80076f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076f2:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	2000000c 	.word	0x2000000c

08007704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	e009      	b.n	800772c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	33b0      	adds	r3, #176	@ 0xb0
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	32b0      	adds	r2, #176	@ 0xb0
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800775a:	2303      	movs	r3, #3
 800775c:	e008      	b.n	8007770 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	32b0      	adds	r2, #176	@ 0xb0
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	e004      	b.n	80077aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	32b0      	adds	r2, #176	@ 0xb0
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32b0      	adds	r2, #176	@ 0xb0
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e018      	b.n	8007818 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7c1b      	ldrb	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <USBD_CDC_ReceivePacket+0x68>)
 80077f0:	7819      	ldrb	r1, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 ff85 	bl	800970c <USBD_LL_PrepareReceive>
 8007802:	e008      	b.n	8007816 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007804:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <USBD_CDC_ReceivePacket+0x68>)
 8007806:	7819      	ldrb	r1, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800780e:	2340      	movs	r3, #64	@ 0x40
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 ff7b 	bl	800970c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000094 	.word	0x20000094

08007824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	e01f      	b.n	800787c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	79fa      	ldrb	r2, [r7, #7]
 800786e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f001 fdf5 	bl	8009460 <USBD_LL_Init>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e025      	b.n	80078e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	32ae      	adds	r2, #174	@ 0xae
 80078ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00f      	beq.n	80078d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	32ae      	adds	r2, #174	@ 0xae
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	f107 020e 	add.w	r2, r7, #14
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	4602      	mov	r2, r0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fdfd 	bl	80094f8 <USBD_LL_Start>
 80078fe:	4603      	mov	r3, r0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	4611      	mov	r1, r2
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	4611      	mov	r1, r2
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f001 f90c 	bl	8008bba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d01a      	beq.n	80079fc <USBD_LL_SetupStage+0x72>
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d822      	bhi.n	8007a10 <USBD_LL_SetupStage+0x86>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <USBD_LL_SetupStage+0x4a>
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d00a      	beq.n	80079e8 <USBD_LL_SetupStage+0x5e>
 80079d2:	e01d      	b.n	8007a10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fb63 	bl	80080a8 <USBD_StdDevReq>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
      break;
 80079e6:	e020      	b.n	8007a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fbcb 	bl	800818c <USBD_StdItfReq>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
      break;
 80079fa:	e016      	b.n	8007a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fc2d 	bl	8008264 <USBD_StdEPReq>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0e:	e00c      	b.n	8007a2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fdca 	bl	80095b8 <USBD_LL_StallEP>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]
      break;
 8007a28:	bf00      	nop
  }

  return ret;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d16e      	bne.n	8007b2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	f040 8098 	bne.w	8007b90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d913      	bls.n	8007a94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	1ad2      	subs	r2, r2, r3
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	4293      	cmp	r3, r2
 8007a84:	bf28      	it	cs
 8007a86:	4613      	movcs	r3, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 f994 	bl	8008dba <USBD_CtlContinueRx>
 8007a92:	e07d      	b.n	8007b90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d014      	beq.n	8007acc <USBD_LL_DataOutStage+0x98>
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d81d      	bhi.n	8007ae2 <USBD_LL_DataOutStage+0xae>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <USBD_LL_DataOutStage+0x7c>
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d003      	beq.n	8007ab6 <USBD_LL_DataOutStage+0x82>
 8007aae:	e018      	b.n	8007ae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ab4:	e018      	b.n	8007ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fa64 	bl	8007f8e <USBD_CoreFindIF>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8007aca:	e00d      	b.n	8007ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fa66 	bl	8007fa8 <USBD_CoreFindEP>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75bb      	strb	r3, [r7, #22]
            break;
 8007ae0:	e002      	b.n	8007ae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ae8:	7dbb      	ldrb	r3, [r7, #22]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d119      	bne.n	8007b22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d113      	bne.n	8007b22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007afa:	7dba      	ldrb	r2, [r7, #22]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	32ae      	adds	r2, #174	@ 0xae
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b0a:	7dba      	ldrb	r2, [r7, #22]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b12:	7dba      	ldrb	r2, [r7, #22]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	32ae      	adds	r2, #174	@ 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f001 f95a 	bl	8008ddc <USBD_CtlSendStatus>
 8007b28:	e032      	b.n	8007b90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fa37 	bl	8007fa8 <USBD_CoreFindEP>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b3e:	7dbb      	ldrb	r3, [r7, #22]
 8007b40:	2bff      	cmp	r3, #255	@ 0xff
 8007b42:	d025      	beq.n	8007b90 <USBD_LL_DataOutStage+0x15c>
 8007b44:	7dbb      	ldrb	r3, [r7, #22]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d122      	bne.n	8007b90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d117      	bne.n	8007b86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b56:	7dba      	ldrb	r2, [r7, #22]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	32ae      	adds	r2, #174	@ 0xae
 8007b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00f      	beq.n	8007b86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b66:	7dba      	ldrb	r2, [r7, #22]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b6e:	7dba      	ldrb	r2, [r7, #22]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	32ae      	adds	r2, #174	@ 0xae
 8007b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	7afa      	ldrb	r2, [r7, #11]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	4798      	blx	r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	e000      	b.n	8007b92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d16f      	bne.n	8007c8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d15a      	bne.n	8007c74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d914      	bls.n	8007bf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f001 f8bc 	bl	8008d5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007be6:	2300      	movs	r3, #0
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f001 fd8d 	bl	800970c <USBD_LL_PrepareReceive>
 8007bf2:	e03f      	b.n	8007c74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d11c      	bne.n	8007c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d316      	bcc.n	8007c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d20f      	bcs.n	8007c3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f001 f89d 	bl	8008d5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f001 fd6a 	bl	800970c <USBD_LL_PrepareReceive>
 8007c38:	e01c      	b.n	8007c74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d10f      	bne.n	8007c66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c66:	2180      	movs	r1, #128	@ 0x80
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f001 fca5 	bl	80095b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f001 f8c7 	bl	8008e02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d03a      	beq.n	8007cf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fe42 	bl	8007908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007c8c:	e032      	b.n	8007cf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	4619      	mov	r1, r3
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f985 	bl	8007fa8 <USBD_CoreFindEP>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2bff      	cmp	r3, #255	@ 0xff
 8007ca6:	d025      	beq.n	8007cf4 <USBD_LL_DataInStage+0x15a>
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d122      	bne.n	8007cf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d11c      	bne.n	8007cf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007cba:	7dfa      	ldrb	r2, [r7, #23]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	32ae      	adds	r2, #174	@ 0xae
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d014      	beq.n	8007cf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007cca:	7dfa      	ldrb	r2, [r7, #23]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cd2:	7dfa      	ldrb	r2, [r7, #23]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	32ae      	adds	r2, #174	@ 0xae
 8007cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	7afa      	ldrb	r2, [r7, #11]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007cea:	7dbb      	ldrb	r3, [r7, #22]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cf0:	7dbb      	ldrb	r3, [r7, #22]
 8007cf2:	e000      	b.n	8007cf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d014      	beq.n	8007d64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6852      	ldr	r2, [r2, #4]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	4611      	mov	r1, r2
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d64:	2340      	movs	r3, #64	@ 0x40
 8007d66:	2200      	movs	r2, #0
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fbdf 	bl	800952e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2240      	movs	r2, #64	@ 0x40
 8007d7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d80:	2340      	movs	r3, #64	@ 0x40
 8007d82:	2200      	movs	r2, #0
 8007d84:	2180      	movs	r1, #128	@ 0x80
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fbd1 	bl	800952e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2240      	movs	r2, #64	@ 0x40
 8007d96:	621a      	str	r2, [r3, #32]

  return ret;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d006      	beq.n	8007de4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2204      	movs	r2, #4
 8007de8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d106      	bne.n	8007e1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d110      	bne.n	8007e60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	32ae      	adds	r2, #174	@ 0xae
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e01c      	b.n	8007ec6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d115      	bne.n	8007ec4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	32ae      	adds	r2, #174	@ 0xae
 8007ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32ae      	adds	r2, #174	@ 0xae
 8007eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	32ae      	adds	r2, #174	@ 0xae
 8007ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e01c      	b.n	8007f2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d115      	bne.n	8007f28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	32ae      	adds	r2, #174	@ 0xae
 8007f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32ae      	adds	r2, #174	@ 0xae
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	4611      	mov	r1, r2
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6852      	ldr	r2, [r2, #4]
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	4611      	mov	r1, r2
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f80:	2303      	movs	r3, #3
 8007f82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b086      	sub	sp, #24
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	885b      	ldrh	r3, [r3, #2]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d91f      	bls.n	8008028 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fee:	e013      	b.n	8008018 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ff0:	f107 030a 	add.w	r3, r7, #10
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6978      	ldr	r0, [r7, #20]
 8007ff8:	f000 f81b 	bl	8008032 <USBD_GetNextDesc>
 8007ffc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b05      	cmp	r3, #5
 8008004:	d108      	bne.n	8008018 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	789b      	ldrb	r3, [r3, #2]
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	429a      	cmp	r2, r3
 8008012:	d008      	beq.n	8008026 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	885b      	ldrh	r3, [r3, #2]
 800801c:	b29a      	uxth	r2, r3
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	429a      	cmp	r2, r3
 8008022:	d8e5      	bhi.n	8007ff0 <USBD_GetEpDesc+0x2e>
 8008024:	e000      	b.n	8008028 <USBD_GetEpDesc+0x66>
          break;
 8008026:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008028:	693b      	ldr	r3, [r7, #16]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	4413      	add	r3, r2
 800804a:	b29a      	uxth	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800805c:	68fb      	ldr	r3, [r7, #12]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800806a:	b480      	push	{r7}
 800806c:	b087      	sub	sp, #28
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	3301      	adds	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008088:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	b21a      	sxth	r2, r3
 8008090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008094:	4313      	orrs	r3, r2
 8008096:	b21b      	sxth	r3, r3
 8008098:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800809a:	89fb      	ldrh	r3, [r7, #14]
}
 800809c:	4618      	mov	r0, r3
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d005      	beq.n	80080ce <USBD_StdDevReq+0x26>
 80080c2:	2b40      	cmp	r3, #64	@ 0x40
 80080c4:	d857      	bhi.n	8008176 <USBD_StdDevReq+0xce>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00f      	beq.n	80080ea <USBD_StdDevReq+0x42>
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d153      	bne.n	8008176 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	32ae      	adds	r2, #174	@ 0xae
 80080d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	e04a      	b.n	8008180 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d83b      	bhi.n	800816a <USBD_StdDevReq+0xc2>
 80080f2:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <USBD_StdDevReq+0x50>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	0800814d 	.word	0x0800814d
 80080fc:	08008161 	.word	0x08008161
 8008100:	0800816b 	.word	0x0800816b
 8008104:	08008157 	.word	0x08008157
 8008108:	0800816b 	.word	0x0800816b
 800810c:	0800812b 	.word	0x0800812b
 8008110:	08008121 	.word	0x08008121
 8008114:	0800816b 	.word	0x0800816b
 8008118:	08008143 	.word	0x08008143
 800811c:	08008135 	.word	0x08008135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa3c 	bl	80085a0 <USBD_GetDescriptor>
          break;
 8008128:	e024      	b.n	8008174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fba1 	bl	8008874 <USBD_SetAddress>
          break;
 8008132:	e01f      	b.n	8008174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fbe0 	bl	80088fc <USBD_SetConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
          break;
 8008140:	e018      	b.n	8008174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc83 	bl	8008a50 <USBD_GetConfig>
          break;
 800814a:	e013      	b.n	8008174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fcb4 	bl	8008abc <USBD_GetStatus>
          break;
 8008154:	e00e      	b.n	8008174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fce3 	bl	8008b24 <USBD_SetFeature>
          break;
 800815e:	e009      	b.n	8008174 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fd07 	bl	8008b76 <USBD_ClrFeature>
          break;
 8008168:	e004      	b.n	8008174 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fd5e 	bl	8008c2e <USBD_CtlError>
          break;
 8008172:	bf00      	nop
      }
      break;
 8008174:	e004      	b.n	8008180 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fd58 	bl	8008c2e <USBD_CtlError>
      break;
 800817e:	bf00      	nop
  }

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop

0800818c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081a2:	2b40      	cmp	r3, #64	@ 0x40
 80081a4:	d005      	beq.n	80081b2 <USBD_StdItfReq+0x26>
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d852      	bhi.n	8008250 <USBD_StdItfReq+0xc4>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <USBD_StdItfReq+0x26>
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d14e      	bne.n	8008250 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d840      	bhi.n	8008242 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	889b      	ldrh	r3, [r3, #4]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d836      	bhi.n	8008238 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	889b      	ldrh	r3, [r3, #4]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fedb 	bl	8007f8e <USBD_CoreFindIF>
 80081d8:	4603      	mov	r3, r0
 80081da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2bff      	cmp	r3, #255	@ 0xff
 80081e0:	d01d      	beq.n	800821e <USBD_StdItfReq+0x92>
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d11a      	bne.n	800821e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081e8:	7bba      	ldrb	r2, [r7, #14]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	32ae      	adds	r2, #174	@ 0xae
 80081ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00f      	beq.n	8008218 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081f8:	7bba      	ldrb	r2, [r7, #14]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008200:	7bba      	ldrb	r2, [r7, #14]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32ae      	adds	r2, #174	@ 0xae
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008216:	e004      	b.n	8008222 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800821c:	e001      	b.n	8008222 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	88db      	ldrh	r3, [r3, #6]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d110      	bne.n	800824c <USBD_StdItfReq+0xc0>
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10d      	bne.n	800824c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fdd3 	bl	8008ddc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008236:	e009      	b.n	800824c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fcf7 	bl	8008c2e <USBD_CtlError>
          break;
 8008240:	e004      	b.n	800824c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fcf2 	bl	8008c2e <USBD_CtlError>
          break;
 800824a:	e000      	b.n	800824e <USBD_StdItfReq+0xc2>
          break;
 800824c:	bf00      	nop
      }
      break;
 800824e:	e004      	b.n	800825a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fceb 	bl	8008c2e <USBD_CtlError>
      break;
 8008258:	bf00      	nop
  }

  return ret;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	889b      	ldrh	r3, [r3, #4]
 8008276:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008280:	2b40      	cmp	r3, #64	@ 0x40
 8008282:	d007      	beq.n	8008294 <USBD_StdEPReq+0x30>
 8008284:	2b40      	cmp	r3, #64	@ 0x40
 8008286:	f200 817f 	bhi.w	8008588 <USBD_StdEPReq+0x324>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d02a      	beq.n	80082e4 <USBD_StdEPReq+0x80>
 800828e:	2b20      	cmp	r3, #32
 8008290:	f040 817a 	bne.w	8008588 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fe85 	bl	8007fa8 <USBD_CoreFindEP>
 800829e:	4603      	mov	r3, r0
 80082a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082a2:	7b7b      	ldrb	r3, [r7, #13]
 80082a4:	2bff      	cmp	r3, #255	@ 0xff
 80082a6:	f000 8174 	beq.w	8008592 <USBD_StdEPReq+0x32e>
 80082aa:	7b7b      	ldrb	r3, [r7, #13]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 8170 	bne.w	8008592 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80082b2:	7b7a      	ldrb	r2, [r7, #13]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082ba:	7b7a      	ldrb	r2, [r7, #13]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	32ae      	adds	r2, #174	@ 0xae
 80082c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8163 	beq.w	8008592 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082cc:	7b7a      	ldrb	r2, [r7, #13]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	32ae      	adds	r2, #174	@ 0xae
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082e2:	e156      	b.n	8008592 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d008      	beq.n	80082fe <USBD_StdEPReq+0x9a>
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	f300 8145 	bgt.w	800857c <USBD_StdEPReq+0x318>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 809b 	beq.w	800842e <USBD_StdEPReq+0x1ca>
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d03c      	beq.n	8008376 <USBD_StdEPReq+0x112>
 80082fc:	e13e      	b.n	800857c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d002      	beq.n	8008310 <USBD_StdEPReq+0xac>
 800830a:	2b03      	cmp	r3, #3
 800830c:	d016      	beq.n	800833c <USBD_StdEPReq+0xd8>
 800830e:	e02c      	b.n	800836a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <USBD_StdEPReq+0xce>
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b80      	cmp	r3, #128	@ 0x80
 800831a:	d00a      	beq.n	8008332 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f949 	bl	80095b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008326:	2180      	movs	r1, #128	@ 0x80
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 f945 	bl	80095b8 <USBD_LL_StallEP>
 800832e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008330:	e020      	b.n	8008374 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fc7a 	bl	8008c2e <USBD_CtlError>
              break;
 800833a:	e01b      	b.n	8008374 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	885b      	ldrh	r3, [r3, #2]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10e      	bne.n	8008362 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00b      	beq.n	8008362 <USBD_StdEPReq+0xfe>
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b80      	cmp	r3, #128	@ 0x80
 800834e:	d008      	beq.n	8008362 <USBD_StdEPReq+0xfe>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	88db      	ldrh	r3, [r3, #6]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f92b 	bl	80095b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fd3a 	bl	8008ddc <USBD_CtlSendStatus>

              break;
 8008368:	e004      	b.n	8008374 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc5e 	bl	8008c2e <USBD_CtlError>
              break;
 8008372:	bf00      	nop
          }
          break;
 8008374:	e107      	b.n	8008586 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d002      	beq.n	8008388 <USBD_StdEPReq+0x124>
 8008382:	2b03      	cmp	r3, #3
 8008384:	d016      	beq.n	80083b4 <USBD_StdEPReq+0x150>
 8008386:	e04b      	b.n	8008420 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00d      	beq.n	80083aa <USBD_StdEPReq+0x146>
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b80      	cmp	r3, #128	@ 0x80
 8008392:	d00a      	beq.n	80083aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f90d 	bl	80095b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800839e:	2180      	movs	r1, #128	@ 0x80
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 f909 	bl	80095b8 <USBD_LL_StallEP>
 80083a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a8:	e040      	b.n	800842c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc3e 	bl	8008c2e <USBD_CtlError>
              break;
 80083b2:	e03b      	b.n	800842c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	885b      	ldrh	r3, [r3, #2]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d136      	bne.n	800842a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 f913 	bl	80095f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fd03 	bl	8008ddc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff fde4 	bl	8007fa8 <USBD_CoreFindEP>
 80083e0:	4603      	mov	r3, r0
 80083e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083e4:	7b7b      	ldrb	r3, [r7, #13]
 80083e6:	2bff      	cmp	r3, #255	@ 0xff
 80083e8:	d01f      	beq.n	800842a <USBD_StdEPReq+0x1c6>
 80083ea:	7b7b      	ldrb	r3, [r7, #13]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d11c      	bne.n	800842a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083f0:	7b7a      	ldrb	r2, [r7, #13]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083f8:	7b7a      	ldrb	r2, [r7, #13]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	32ae      	adds	r2, #174	@ 0xae
 80083fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d010      	beq.n	800842a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008408:	7b7a      	ldrb	r2, [r7, #13]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	32ae      	adds	r2, #174	@ 0xae
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800841e:	e004      	b.n	800842a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc03 	bl	8008c2e <USBD_CtlError>
              break;
 8008428:	e000      	b.n	800842c <USBD_StdEPReq+0x1c8>
              break;
 800842a:	bf00      	nop
          }
          break;
 800842c:	e0ab      	b.n	8008586 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d002      	beq.n	8008440 <USBD_StdEPReq+0x1dc>
 800843a:	2b03      	cmp	r3, #3
 800843c:	d032      	beq.n	80084a4 <USBD_StdEPReq+0x240>
 800843e:	e097      	b.n	8008570 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <USBD_StdEPReq+0x1f2>
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b80      	cmp	r3, #128	@ 0x80
 800844a:	d004      	beq.n	8008456 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fbed 	bl	8008c2e <USBD_CtlError>
                break;
 8008454:	e091      	b.n	800857a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da0b      	bge.n	8008476 <USBD_StdEPReq+0x212>
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	3310      	adds	r3, #16
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	3304      	adds	r3, #4
 8008474:	e00b      	b.n	800848e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2202      	movs	r2, #2
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc43 	bl	8008d28 <USBD_CtlSendData>
              break;
 80084a2:	e06a      	b.n	800857a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da11      	bge.n	80084d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	f003 020f 	and.w	r2, r3, #15
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3324      	adds	r3, #36	@ 0x24
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d117      	bne.n	80084f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fbb0 	bl	8008c2e <USBD_CtlError>
                  break;
 80084ce:	e054      	b.n	800857a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb9d 	bl	8008c2e <USBD_CtlError>
                  break;
 80084f4:	e041      	b.n	800857a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	da0b      	bge.n	8008516 <USBD_StdEPReq+0x2b2>
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	3310      	adds	r3, #16
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	3304      	adds	r3, #4
 8008514:	e00b      	b.n	800852e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	4413      	add	r3, r2
 800852c:	3304      	adds	r3, #4
 800852e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <USBD_StdEPReq+0x2d8>
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	2b80      	cmp	r3, #128	@ 0x80
 800853a:	d103      	bne.n	8008544 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	e00e      	b.n	8008562 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f873 	bl	8009634 <USBD_LL_IsStallEP>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2201      	movs	r2, #1
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	e002      	b.n	8008562 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2202      	movs	r2, #2
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fbdd 	bl	8008d28 <USBD_CtlSendData>
              break;
 800856e:	e004      	b.n	800857a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fb5b 	bl	8008c2e <USBD_CtlError>
              break;
 8008578:	bf00      	nop
          }
          break;
 800857a:	e004      	b.n	8008586 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fb55 	bl	8008c2e <USBD_CtlError>
          break;
 8008584:	bf00      	nop
      }
      break;
 8008586:	e005      	b.n	8008594 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fb4f 	bl	8008c2e <USBD_CtlError>
      break;
 8008590:	e000      	b.n	8008594 <USBD_StdEPReq+0x330>
      break;
 8008592:	bf00      	nop
  }

  return ret;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	885b      	ldrh	r3, [r3, #2]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	2b06      	cmp	r3, #6
 80085c2:	f200 8128 	bhi.w	8008816 <USBD_GetDescriptor+0x276>
 80085c6:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <USBD_GetDescriptor+0x2c>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	08008601 	.word	0x08008601
 80085d4:	08008641 	.word	0x08008641
 80085d8:	08008817 	.word	0x08008817
 80085dc:	08008817 	.word	0x08008817
 80085e0:	080087b7 	.word	0x080087b7
 80085e4:	080087e3 	.word	0x080087e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
      break;
 80085fe:	e112      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	7c1b      	ldrb	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10d      	bne.n	8008624 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	f107 0208 	add.w	r2, r7, #8
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3
 8008618:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	2202      	movs	r2, #2
 8008620:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008622:	e100      	b.n	8008826 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	f107 0208 	add.w	r2, r7, #8
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	2202      	movs	r2, #2
 800863c:	701a      	strb	r2, [r3, #0]
      break;
 800863e:	e0f2      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	885b      	ldrh	r3, [r3, #2]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b05      	cmp	r3, #5
 8008648:	f200 80ac 	bhi.w	80087a4 <USBD_GetDescriptor+0x204>
 800864c:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <USBD_GetDescriptor+0xb4>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	0800866d 	.word	0x0800866d
 8008658:	080086a1 	.word	0x080086a1
 800865c:	080086d5 	.word	0x080086d5
 8008660:	08008709 	.word	0x08008709
 8008664:	0800873d 	.word	0x0800873d
 8008668:	08008771 	.word	0x08008771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	7c12      	ldrb	r2, [r2, #16]
 8008684:	f107 0108 	add.w	r1, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868e:	e091      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 facb 	bl	8008c2e <USBD_CtlError>
            err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
          break;
 800869e:	e089      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7c12      	ldrb	r2, [r2, #16]
 80086b8:	f107 0108 	add.w	r1, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c2:	e077      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fab1 	bl	8008c2e <USBD_CtlError>
            err++;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	3301      	adds	r3, #1
 80086d0:	72fb      	strb	r3, [r7, #11]
          break;
 80086d2:	e06f      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f6:	e05d      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa97 	bl	8008c2e <USBD_CtlError>
            err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
          break;
 8008706:	e055      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872a:	e043      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa7d 	bl	8008c2e <USBD_CtlError>
            err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
          break;
 800873a:	e03b      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	7c12      	ldrb	r2, [r2, #16]
 8008754:	f107 0108 	add.w	r1, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800875e:	e029      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa63 	bl	8008c2e <USBD_CtlError>
            err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
          break;
 800876e:	e021      	b.n	80087b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	f107 0108 	add.w	r1, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008792:	e00f      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa49 	bl	8008c2e <USBD_CtlError>
            err++;
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	3301      	adds	r3, #1
 80087a0:	72fb      	strb	r3, [r7, #11]
          break;
 80087a2:	e007      	b.n	80087b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa41 	bl	8008c2e <USBD_CtlError>
          err++;
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	3301      	adds	r3, #1
 80087b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087b2:	bf00      	nop
      }
      break;
 80087b4:	e037      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7c1b      	ldrb	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c6:	f107 0208 	add.w	r2, r7, #8
 80087ca:	4610      	mov	r0, r2
 80087cc:	4798      	blx	r3
 80087ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087d0:	e029      	b.n	8008826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa2a 	bl	8008c2e <USBD_CtlError>
        err++;
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	3301      	adds	r3, #1
 80087de:	72fb      	strb	r3, [r7, #11]
      break;
 80087e0:	e021      	b.n	8008826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7c1b      	ldrb	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10d      	bne.n	8008806 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f2:	f107 0208 	add.w	r2, r7, #8
 80087f6:	4610      	mov	r0, r2
 80087f8:	4798      	blx	r3
 80087fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	2207      	movs	r2, #7
 8008802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008804:	e00f      	b.n	8008826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa10 	bl	8008c2e <USBD_CtlError>
        err++;
 800880e:	7afb      	ldrb	r3, [r7, #11]
 8008810:	3301      	adds	r3, #1
 8008812:	72fb      	strb	r3, [r7, #11]
      break;
 8008814:	e007      	b.n	8008826 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fa08 	bl	8008c2e <USBD_CtlError>
      err++;
 800881e:	7afb      	ldrb	r3, [r7, #11]
 8008820:	3301      	adds	r3, #1
 8008822:	72fb      	strb	r3, [r7, #11]
      break;
 8008824:	bf00      	nop
  }

  if (err != 0U)
 8008826:	7afb      	ldrb	r3, [r7, #11]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11e      	bne.n	800886a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	88db      	ldrh	r3, [r3, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d016      	beq.n	8008862 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008834:	893b      	ldrh	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00e      	beq.n	8008858 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	88da      	ldrh	r2, [r3, #6]
 800883e:	893b      	ldrh	r3, [r7, #8]
 8008840:	4293      	cmp	r3, r2
 8008842:	bf28      	it	cs
 8008844:	4613      	movcs	r3, r2
 8008846:	b29b      	uxth	r3, r3
 8008848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800884a:	893b      	ldrh	r3, [r7, #8]
 800884c:	461a      	mov	r2, r3
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fa69 	bl	8008d28 <USBD_CtlSendData>
 8008856:	e009      	b.n	800886c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f9e7 	bl	8008c2e <USBD_CtlError>
 8008860:	e004      	b.n	800886c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 faba 	bl	8008ddc <USBD_CtlSendStatus>
 8008868:	e000      	b.n	800886c <USBD_GetDescriptor+0x2cc>
    return;
 800886a:	bf00      	nop
  }
}
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop

08008874 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	889b      	ldrh	r3, [r3, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d131      	bne.n	80088ea <USBD_SetAddress+0x76>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	88db      	ldrh	r3, [r3, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d12d      	bne.n	80088ea <USBD_SetAddress+0x76>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	2b7f      	cmp	r3, #127	@ 0x7f
 8008894:	d829      	bhi.n	80088ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	885b      	ldrh	r3, [r3, #2]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d104      	bne.n	80088b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f9bc 	bl	8008c2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b6:	e01d      	b.n	80088f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7bfa      	ldrb	r2, [r7, #15]
 80088bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fee1 	bl	800968c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa86 	bl	8008ddc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088de:	e009      	b.n	80088f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e8:	e004      	b.n	80088f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f99e 	bl	8008c2e <USBD_CtlError>
  }
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	885b      	ldrh	r3, [r3, #2]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	4b4e      	ldr	r3, [pc, #312]	@ (8008a4c <USBD_SetConfig+0x150>)
 8008912:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008914:	4b4d      	ldr	r3, [pc, #308]	@ (8008a4c <USBD_SetConfig+0x150>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d905      	bls.n	8008928 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f985 	bl	8008c2e <USBD_CtlError>
    return USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	e08c      	b.n	8008a42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d002      	beq.n	800893a <USBD_SetConfig+0x3e>
 8008934:	2b03      	cmp	r3, #3
 8008936:	d029      	beq.n	800898c <USBD_SetConfig+0x90>
 8008938:	e075      	b.n	8008a26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800893a:	4b44      	ldr	r3, [pc, #272]	@ (8008a4c <USBD_SetConfig+0x150>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d020      	beq.n	8008984 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008942:	4b42      	ldr	r3, [pc, #264]	@ (8008a4c <USBD_SetConfig+0x150>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800894c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a4c <USBD_SetConfig+0x150>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fe ffe3 	bl	800791e <USBD_SetClassConfig>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d008      	beq.n	8008974 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f962 	bl	8008c2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2202      	movs	r2, #2
 800896e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008972:	e065      	b.n	8008a40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa31 	bl	8008ddc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2203      	movs	r2, #3
 800897e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008982:	e05d      	b.n	8008a40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fa29 	bl	8008ddc <USBD_CtlSendStatus>
      break;
 800898a:	e059      	b.n	8008a40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800898c:	4b2f      	ldr	r3, [pc, #188]	@ (8008a4c <USBD_SetConfig+0x150>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d112      	bne.n	80089ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800899c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a4c <USBD_SetConfig+0x150>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089a6:	4b29      	ldr	r3, [pc, #164]	@ (8008a4c <USBD_SetConfig+0x150>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7fe ffd2 	bl	8007956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa12 	bl	8008ddc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089b8:	e042      	b.n	8008a40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089ba:	4b24      	ldr	r3, [pc, #144]	@ (8008a4c <USBD_SetConfig+0x150>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d02a      	beq.n	8008a1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fe ffc0 	bl	8007956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089d6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a4c <USBD_SetConfig+0x150>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089e0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <USBD_SetConfig+0x150>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7fe ff99 	bl	800791e <USBD_SetClassConfig>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00f      	beq.n	8008a16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f918 	bl	8008c2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fe ffa5 	bl	8007956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a14:	e014      	b.n	8008a40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9e0 	bl	8008ddc <USBD_CtlSendStatus>
      break;
 8008a1c:	e010      	b.n	8008a40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f9dc 	bl	8008ddc <USBD_CtlSendStatus>
      break;
 8008a24:	e00c      	b.n	8008a40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f900 	bl	8008c2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a2e:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <USBD_SetConfig+0x150>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7fe ff8e 	bl	8007956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3e:	bf00      	nop
  }

  return ret;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000354 	.word	0x20000354

08008a50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	88db      	ldrh	r3, [r3, #6]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d004      	beq.n	8008a6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8e2 	bl	8008c2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a6a:	e023      	b.n	8008ab4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	dc02      	bgt.n	8008a7e <USBD_GetConfig+0x2e>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dc03      	bgt.n	8008a84 <USBD_GetConfig+0x34>
 8008a7c:	e015      	b.n	8008aaa <USBD_GetConfig+0x5a>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d00b      	beq.n	8008a9a <USBD_GetConfig+0x4a>
 8008a82:	e012      	b.n	8008aaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f948 	bl	8008d28 <USBD_CtlSendData>
        break;
 8008a98:	e00c      	b.n	8008ab4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f940 	bl	8008d28 <USBD_CtlSendData>
        break;
 8008aa8:	e004      	b.n	8008ab4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f8be 	bl	8008c2e <USBD_CtlError>
        break;
 8008ab2:	bf00      	nop
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d81e      	bhi.n	8008b12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	88db      	ldrh	r3, [r3, #6]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d004      	beq.n	8008ae6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f8a5 	bl	8008c2e <USBD_CtlError>
        break;
 8008ae4:	e01a      	b.n	8008b1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f043 0202 	orr.w	r2, r3, #2
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	330c      	adds	r3, #12
 8008b06:	2202      	movs	r2, #2
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f90c 	bl	8008d28 <USBD_CtlSendData>
      break;
 8008b10:	e004      	b.n	8008b1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f88a 	bl	8008c2e <USBD_CtlError>
      break;
 8008b1a:	bf00      	nop
  }
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d107      	bne.n	8008b46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f94c 	bl	8008ddc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b44:	e013      	b.n	8008b6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d10b      	bne.n	8008b66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	889b      	ldrh	r3, [r3, #4]
 8008b52:	0a1b      	lsrs	r3, r3, #8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f93c 	bl	8008ddc <USBD_CtlSendStatus>
}
 8008b64:	e003      	b.n	8008b6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f860 	bl	8008c2e <USBD_CtlError>
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d80b      	bhi.n	8008ba6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d10c      	bne.n	8008bb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f91c 	bl	8008ddc <USBD_CtlSendStatus>
      }
      break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f840 	bl	8008c2e <USBD_CtlError>
      break;
 8008bae:	e000      	b.n	8008bb2 <USBD_ClrFeature+0x3c>
      break;
 8008bb0:	bf00      	nop
  }
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fa40 	bl	800806a <SWAPBYTE>
 8008bea:	4603      	mov	r3, r0
 8008bec:	461a      	mov	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fa33 	bl	800806a <SWAPBYTE>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff fa26 	bl	800806a <SWAPBYTE>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	80da      	strh	r2, [r3, #6]
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c38:	2180      	movs	r1, #128	@ 0x80
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fcbc 	bl	80095b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c40:	2100      	movs	r1, #0
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fcb8 	bl	80095b8 <USBD_LL_StallEP>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d042      	beq.n	8008cec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008c6a:	6938      	ldr	r0, [r7, #16]
 8008c6c:	f000 f842 	bl	8008cf4 <USBD_GetLen>
 8008c70:	4603      	mov	r3, r0
 8008c72:	3301      	adds	r3, #1
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c7a:	d808      	bhi.n	8008c8e <USBD_GetString+0x3e>
 8008c7c:	6938      	ldr	r0, [r7, #16]
 8008c7e:	f000 f839 	bl	8008cf4 <USBD_GetLen>
 8008c82:	4603      	mov	r3, r0
 8008c84:	3301      	adds	r3, #1
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	e001      	b.n	8008c92 <USBD_GetString+0x42>
 8008c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	2203      	movs	r2, #3
 8008cb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cb8:	e013      	b.n	8008ce2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	7812      	ldrb	r2, [r2, #0]
 8008cc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	613b      	str	r3, [r7, #16]
    idx++;
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e7      	bne.n	8008cba <USBD_GetString+0x6a>
 8008cea:	e000      	b.n	8008cee <USBD_GetString+0x9e>
    return;
 8008cec:	bf00      	nop
  }
}
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d04:	e005      	b.n	8008d12 <USBD_GetLen+0x1e>
  {
    len++;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f5      	bne.n	8008d06 <USBD_GetLen+0x12>
  }

  return len;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fcbb 	bl	80096ca <USBD_LL_Transmit>

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fcaa 	bl	80096ca <USBD_LL_Transmit>

  return USBD_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2203      	movs	r2, #3
 8008d90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	2100      	movs	r1, #0
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fcae 	bl	800970c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fc9d 	bl	800970c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2204      	movs	r2, #4
 8008de8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dec:	2300      	movs	r3, #0
 8008dee:	2200      	movs	r2, #0
 8008df0:	2100      	movs	r1, #0
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fc69 	bl	80096ca <USBD_LL_Transmit>

  return USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2205      	movs	r2, #5
 8008e0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e12:	2300      	movs	r3, #0
 8008e14:	2200      	movs	r2, #0
 8008e16:	2100      	movs	r1, #0
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fc77 	bl	800970c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4912      	ldr	r1, [pc, #72]	@ (8008e78 <MX_USB_DEVICE_Init+0x50>)
 8008e30:	4812      	ldr	r0, [pc, #72]	@ (8008e7c <MX_USB_DEVICE_Init+0x54>)
 8008e32:	f7fe fcf7 	bl	8007824 <USBD_Init>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e3c:	f7f7 fed2 	bl	8000be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e40:	490f      	ldr	r1, [pc, #60]	@ (8008e80 <MX_USB_DEVICE_Init+0x58>)
 8008e42:	480e      	ldr	r0, [pc, #56]	@ (8008e7c <MX_USB_DEVICE_Init+0x54>)
 8008e44:	f7fe fd1e 	bl	8007884 <USBD_RegisterClass>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e4e:	f7f7 fec9 	bl	8000be4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e52:	490c      	ldr	r1, [pc, #48]	@ (8008e84 <MX_USB_DEVICE_Init+0x5c>)
 8008e54:	4809      	ldr	r0, [pc, #36]	@ (8008e7c <MX_USB_DEVICE_Init+0x54>)
 8008e56:	f7fe fc55 	bl	8007704 <USBD_CDC_RegisterInterface>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e60:	f7f7 fec0 	bl	8000be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e64:	4805      	ldr	r0, [pc, #20]	@ (8008e7c <MX_USB_DEVICE_Init+0x54>)
 8008e66:	f7fe fd43 	bl	80078f0 <USBD_Start>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e70:	f7f7 feb8 	bl	8000be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e74:	bf00      	nop
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	200000ac 	.word	0x200000ac
 8008e7c:	20000358 	.word	0x20000358
 8008e80:	20000018 	.word	0x20000018
 8008e84:	20000098 	.word	0x20000098

08008e88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4905      	ldr	r1, [pc, #20]	@ (8008ea4 <CDC_Init_FS+0x1c>)
 8008e90:	4805      	ldr	r0, [pc, #20]	@ (8008ea8 <CDC_Init_FS+0x20>)
 8008e92:	f7fe fc51 	bl	8007738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e96:	4905      	ldr	r1, [pc, #20]	@ (8008eac <CDC_Init_FS+0x24>)
 8008e98:	4803      	ldr	r0, [pc, #12]	@ (8008ea8 <CDC_Init_FS+0x20>)
 8008e9a:	f7fe fc6f 	bl	800777c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000e34 	.word	0x20000e34
 8008ea8:	20000358 	.word	0x20000358
 8008eac:	20000634 	.word	0x20000634

08008eb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008eb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	71fb      	strb	r3, [r7, #7]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b23      	cmp	r3, #35	@ 0x23
 8008ed4:	d84a      	bhi.n	8008f6c <CDC_Control_FS+0xac>
 8008ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <CDC_Control_FS+0x1c>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f6d 	.word	0x08008f6d
 8008ee0:	08008f6d 	.word	0x08008f6d
 8008ee4:	08008f6d 	.word	0x08008f6d
 8008ee8:	08008f6d 	.word	0x08008f6d
 8008eec:	08008f6d 	.word	0x08008f6d
 8008ef0:	08008f6d 	.word	0x08008f6d
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f6d 	.word	0x08008f6d
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f6d 	.word	0x08008f6d
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f6d 	.word	0x08008f6d
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f6d 	.word	0x08008f6d
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008f6d 	.word	0x08008f6d
 8008f2c:	08008f6d 	.word	0x08008f6d
 8008f30:	08008f6d 	.word	0x08008f6d
 8008f34:	08008f6d 	.word	0x08008f6d
 8008f38:	08008f6d 	.word	0x08008f6d
 8008f3c:	08008f6d 	.word	0x08008f6d
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f6d 	.word	0x08008f6d
 8008f4c:	08008f6d 	.word	0x08008f6d
 8008f50:	08008f6d 	.word	0x08008f6d
 8008f54:	08008f6d 	.word	0x08008f6d
 8008f58:	08008f6d 	.word	0x08008f6d
 8008f5c:	08008f6d 	.word	0x08008f6d
 8008f60:	08008f6d 	.word	0x08008f6d
 8008f64:	08008f6d 	.word	0x08008f6d
 8008f68:	08008f6d 	.word	0x08008f6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f6c:	bf00      	nop
  }

  return (USBD_OK);
 8008f6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4805      	ldr	r0, [pc, #20]	@ (8008fa0 <CDC_Receive_FS+0x24>)
 8008f8a:	f7fe fbf7 	bl	800777c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f8e:	4804      	ldr	r0, [pc, #16]	@ (8008fa0 <CDC_Receive_FS+0x24>)
 8008f90:	f7fe fc12 	bl	80077b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000358 	.word	0x20000358

08008fa4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2212      	movs	r2, #18
 8008fd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fda:	4b03      	ldr	r3, [pc, #12]	@ (8008fe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	200000c8 	.word	0x200000c8

08008fec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2204      	movs	r2, #4
 8008ffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ffe:	4b03      	ldr	r3, [pc, #12]	@ (800900c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	200000dc 	.word	0x200000dc

08009010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d105      	bne.n	800902e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4907      	ldr	r1, [pc, #28]	@ (8009044 <USBD_FS_ProductStrDescriptor+0x34>)
 8009026:	4808      	ldr	r0, [pc, #32]	@ (8009048 <USBD_FS_ProductStrDescriptor+0x38>)
 8009028:	f7ff fe12 	bl	8008c50 <USBD_GetString>
 800902c:	e004      	b.n	8009038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4904      	ldr	r1, [pc, #16]	@ (8009044 <USBD_FS_ProductStrDescriptor+0x34>)
 8009032:	4805      	ldr	r0, [pc, #20]	@ (8009048 <USBD_FS_ProductStrDescriptor+0x38>)
 8009034:	f7ff fe0c 	bl	8008c50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009038:	4b02      	ldr	r3, [pc, #8]	@ (8009044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20001634 	.word	0x20001634
 8009048:	08009894 	.word	0x08009894

0800904c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	4904      	ldr	r1, [pc, #16]	@ (800906c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800905c:	4804      	ldr	r0, [pc, #16]	@ (8009070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800905e:	f7ff fdf7 	bl	8008c50 <USBD_GetString>
  return USBD_StrDesc;
 8009062:	4b02      	ldr	r3, [pc, #8]	@ (800906c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20001634 	.word	0x20001634
 8009070:	080098ac 	.word	0x080098ac

08009074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	221a      	movs	r2, #26
 8009084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009086:	f000 f843 	bl	8009110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800908a:	4b02      	ldr	r3, [pc, #8]	@ (8009094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	200000e0 	.word	0x200000e0

08009098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4907      	ldr	r1, [pc, #28]	@ (80090cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ae:	4808      	ldr	r0, [pc, #32]	@ (80090d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b0:	f7ff fdce 	bl	8008c50 <USBD_GetString>
 80090b4:	e004      	b.n	80090c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4904      	ldr	r1, [pc, #16]	@ (80090cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ba:	4805      	ldr	r0, [pc, #20]	@ (80090d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090bc:	f7ff fdc8 	bl	8008c50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090c0:	4b02      	ldr	r3, [pc, #8]	@ (80090cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20001634 	.word	0x20001634
 80090d0:	080098c0 	.word	0x080098c0

080090d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	4907      	ldr	r1, [pc, #28]	@ (8009108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ea:	4808      	ldr	r0, [pc, #32]	@ (800910c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090ec:	f7ff fdb0 	bl	8008c50 <USBD_GetString>
 80090f0:	e004      	b.n	80090fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	4904      	ldr	r1, [pc, #16]	@ (8009108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090f6:	4805      	ldr	r0, [pc, #20]	@ (800910c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f8:	f7ff fdaa 	bl	8008c50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090fc:	4b02      	ldr	r3, [pc, #8]	@ (8009108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20001634 	.word	0x20001634
 800910c:	080098cc 	.word	0x080098cc

08009110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <Get_SerialNum+0x44>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800911c:	4b0e      	ldr	r3, [pc, #56]	@ (8009158 <Get_SerialNum+0x48>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009122:	4b0e      	ldr	r3, [pc, #56]	@ (800915c <Get_SerialNum+0x4c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009136:	2208      	movs	r2, #8
 8009138:	4909      	ldr	r1, [pc, #36]	@ (8009160 <Get_SerialNum+0x50>)
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f814 	bl	8009168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009140:	2204      	movs	r2, #4
 8009142:	4908      	ldr	r1, [pc, #32]	@ (8009164 <Get_SerialNum+0x54>)
 8009144:	68b8      	ldr	r0, [r7, #8]
 8009146:	f000 f80f 	bl	8009168 <IntToUnicode>
  }
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	1fff7a10 	.word	0x1fff7a10
 8009158:	1fff7a14 	.word	0x1fff7a14
 800915c:	1fff7a18 	.word	0x1fff7a18
 8009160:	200000e2 	.word	0x200000e2
 8009164:	200000f2 	.word	0x200000f2

08009168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]
 800917e:	e027      	b.n	80091d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	0f1b      	lsrs	r3, r3, #28
 8009184:	2b09      	cmp	r3, #9
 8009186:	d80b      	bhi.n	80091a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	0f1b      	lsrs	r3, r3, #28
 800918c:	b2da      	uxtb	r2, r3
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4619      	mov	r1, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	440b      	add	r3, r1
 8009198:	3230      	adds	r2, #48	@ 0x30
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	e00a      	b.n	80091b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	0f1b      	lsrs	r3, r3, #28
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4619      	mov	r1, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	440b      	add	r3, r1
 80091b0:	3237      	adds	r2, #55	@ 0x37
 80091b2:	b2d2      	uxtb	r2, r2
 80091b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	3301      	adds	r3, #1
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	4413      	add	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	3301      	adds	r3, #1
 80091ce:	75fb      	strb	r3, [r7, #23]
 80091d0:	7dfa      	ldrb	r2, [r7, #23]
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d3d3      	bcc.n	8009180 <IntToUnicode+0x18>
  }
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
	...

080091e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	@ 0x28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	609a      	str	r2, [r3, #8]
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009208:	d13a      	bne.n	8009280 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800920a:	2300      	movs	r3, #0
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	4b1e      	ldr	r3, [pc, #120]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 8009210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009212:	4a1d      	ldr	r2, [pc, #116]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	6313      	str	r3, [r2, #48]	@ 0x30
 800921a:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 800921c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009226:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800922a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800922c:	2302      	movs	r3, #2
 800922e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009234:	2303      	movs	r3, #3
 8009236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009238:	230a      	movs	r3, #10
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	4619      	mov	r1, r3
 8009242:	4812      	ldr	r0, [pc, #72]	@ (800928c <HAL_PCD_MspInit+0xa4>)
 8009244:	f7f9 fa44 	bl	80026d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009248:	4b0f      	ldr	r3, [pc, #60]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 800924a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800924c:	4a0e      	ldr	r2, [pc, #56]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 800924e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009252:	6353      	str	r3, [r2, #52]	@ 0x34
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 800925a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800925c:	4a0a      	ldr	r2, [pc, #40]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 800925e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009262:	6453      	str	r3, [r2, #68]	@ 0x44
 8009264:	4b08      	ldr	r3, [pc, #32]	@ (8009288 <HAL_PCD_MspInit+0xa0>)
 8009266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009270:	2200      	movs	r2, #0
 8009272:	2100      	movs	r1, #0
 8009274:	2043      	movs	r0, #67	@ 0x43
 8009276:	f7f9 f9f4 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800927a:	2043      	movs	r0, #67	@ 0x43
 800927c:	f7f9 fa0d 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009280:	bf00      	nop
 8009282:	3728      	adds	r7, #40	@ 0x28
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	40023800 	.word	0x40023800
 800928c:	40020000 	.word	0x40020000

08009290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7fe fb6f 	bl	800798a <USBD_LL_SetupStage>
}
 80092ac:	bf00      	nop
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	4619      	mov	r1, r3
 80092de:	f7fe fba9 	bl	8007a34 <USBD_LL_DataOutStage>
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	460b      	mov	r3, r1
 80092f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	3320      	adds	r3, #32
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	4619      	mov	r1, r3
 8009312:	f7fe fc42 	bl	8007b9a <USBD_LL_DataInStage>
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe fd7c 	bl	8007e2a <USBD_LL_SOF>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009342:	2301      	movs	r3, #1
 8009344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	79db      	ldrb	r3, [r3, #7]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d001      	beq.n	8009352 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800934e:	f7f7 fc49 	bl	8000be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009358:	7bfa      	ldrb	r2, [r7, #15]
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fd20 	bl	8007da2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe fcc8 	bl	8007cfe <USBD_LL_Reset>
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe fd1b 	bl	8007dc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800939e:	f043 0301 	orr.w	r3, r3, #1
 80093a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7adb      	ldrb	r3, [r3, #11]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093ac:	4b04      	ldr	r3, [pc, #16]	@ (80093c0 <HAL_PCD_SuspendCallback+0x48>)
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	4a03      	ldr	r2, [pc, #12]	@ (80093c0 <HAL_PCD_SuspendCallback+0x48>)
 80093b2:	f043 0306 	orr.w	r3, r3, #6
 80093b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	e000ed00 	.word	0xe000ed00

080093c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe fd11 	bl	8007dfa <USBD_LL_Resume>
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fd69 	bl	8007ece <USBD_LL_IsoOUTIncomplete>
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe fd25 	bl	8007e6a <USBD_LL_IsoINIncomplete>
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fd7b 	bl	8007f32 <USBD_LL_DevConnected>
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fd78 	bl	8007f48 <USBD_LL_DevDisconnected>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d13c      	bne.n	80094ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009470:	4a20      	ldr	r2, [pc, #128]	@ (80094f4 <USBD_LL_Init+0x94>)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a1e      	ldr	r2, [pc, #120]	@ (80094f4 <USBD_LL_Init+0x94>)
 800947c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009480:	4b1c      	ldr	r3, [pc, #112]	@ (80094f4 <USBD_LL_Init+0x94>)
 8009482:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009488:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <USBD_LL_Init+0x94>)
 800948a:	2204      	movs	r2, #4
 800948c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800948e:	4b19      	ldr	r3, [pc, #100]	@ (80094f4 <USBD_LL_Init+0x94>)
 8009490:	2202      	movs	r2, #2
 8009492:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009494:	4b17      	ldr	r3, [pc, #92]	@ (80094f4 <USBD_LL_Init+0x94>)
 8009496:	2200      	movs	r2, #0
 8009498:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800949a:	4b16      	ldr	r3, [pc, #88]	@ (80094f4 <USBD_LL_Init+0x94>)
 800949c:	2202      	movs	r2, #2
 800949e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094a0:	4b14      	ldr	r3, [pc, #80]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094a6:	4b13      	ldr	r3, [pc, #76]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094ac:	4b11      	ldr	r3, [pc, #68]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094b2:	4b10      	ldr	r3, [pc, #64]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094b8:	4b0e      	ldr	r3, [pc, #56]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094be:	480d      	ldr	r0, [pc, #52]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094c0:	f7f9 fad5 	bl	8002a6e <HAL_PCD_Init>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094ca:	f7f7 fb8b 	bl	8000be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094ce:	2180      	movs	r1, #128	@ 0x80
 80094d0:	4808      	ldr	r0, [pc, #32]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094d2:	f7fa fd02 	bl	8003eda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094d6:	2240      	movs	r2, #64	@ 0x40
 80094d8:	2100      	movs	r1, #0
 80094da:	4806      	ldr	r0, [pc, #24]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094dc:	f7fa fcb6 	bl	8003e4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094e0:	2280      	movs	r2, #128	@ 0x80
 80094e2:	2101      	movs	r1, #1
 80094e4:	4803      	ldr	r0, [pc, #12]	@ (80094f4 <USBD_LL_Init+0x94>)
 80094e6:	f7fa fcb1 	bl	8003e4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20001834 	.word	0x20001834

080094f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800950e:	4618      	mov	r0, r3
 8009510:	f7f9 fbbc 	bl	8002c8c <HAL_PCD_Start>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 f942 	bl	80097a4 <USBD_Get_USB_Status>
 8009520:	4603      	mov	r3, r0
 8009522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009524:	7bbb      	ldrb	r3, [r7, #14]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	4608      	mov	r0, r1
 8009538:	4611      	mov	r1, r2
 800953a:	461a      	mov	r2, r3
 800953c:	4603      	mov	r3, r0
 800953e:	70fb      	strb	r3, [r7, #3]
 8009540:	460b      	mov	r3, r1
 8009542:	70bb      	strb	r3, [r7, #2]
 8009544:	4613      	mov	r3, r2
 8009546:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009556:	78bb      	ldrb	r3, [r7, #2]
 8009558:	883a      	ldrh	r2, [r7, #0]
 800955a:	78f9      	ldrb	r1, [r7, #3]
 800955c:	f7fa f890 	bl	8003680 <HAL_PCD_EP_Open>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f91c 	bl	80097a4 <USBD_Get_USB_Status>
 800956c:	4603      	mov	r3, r0
 800956e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009570:	7bbb      	ldrb	r3, [r7, #14]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009594:	78fa      	ldrb	r2, [r7, #3]
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f7fa f8db 	bl	8003754 <HAL_PCD_EP_Close>
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 f8fd 	bl	80097a4 <USBD_Get_USB_Status>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fa f993 	bl	8003902 <HAL_PCD_EP_SetStall>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f8de 	bl	80097a4 <USBD_Get_USB_Status>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fa f9d7 	bl	80039c8 <HAL_PCD_EP_ClrStall>
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f8bf 	bl	80097a4 <USBD_Get_USB_Status>
 8009626:	4603      	mov	r3, r0
 8009628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962a:	7bbb      	ldrb	r3, [r7, #14]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009646:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800964c:	2b00      	cmp	r3, #0
 800964e:	da0b      	bge.n	8009668 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	4613      	mov	r3, r2
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3316      	adds	r3, #22
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	e00b      	b.n	8009680 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800966e:	68f9      	ldr	r1, [r7, #12]
 8009670:	4613      	mov	r3, r2
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800967e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096a6:	78fa      	ldrb	r2, [r7, #3]
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7f9 ffc4 	bl	8003638 <HAL_PCD_SetAddress>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f874 	bl	80097a4 <USBD_Get_USB_Status>
 80096bc:	4603      	mov	r3, r0
 80096be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b086      	sub	sp, #24
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
 80096d6:	460b      	mov	r3, r1
 80096d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096e8:	7af9      	ldrb	r1, [r7, #11]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	f7fa f8ce 	bl	800388e <HAL_PCD_EP_Transmit>
 80096f2:	4603      	mov	r3, r0
 80096f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 f853 	bl	80097a4 <USBD_Get_USB_Status>
 80096fe:	4603      	mov	r3, r0
 8009700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009702:	7dbb      	ldrb	r3, [r7, #22]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	607a      	str	r2, [r7, #4]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	460b      	mov	r3, r1
 800971a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800972a:	7af9      	ldrb	r1, [r7, #11]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	f7fa f85a 	bl	80037e8 <HAL_PCD_EP_Receive>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f832 	bl	80097a4 <USBD_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009744:	7dbb      	ldrb	r3, [r7, #22]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	4611      	mov	r1, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f7fa f87a 	bl	800385e <HAL_PCD_EP_GetRxCount>
 800976a:	4603      	mov	r3, r0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800977c:	4b03      	ldr	r3, [pc, #12]	@ (800978c <USBD_static_malloc+0x18>)
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20001d18 	.word	0x20001d18

08009790 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]

}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d817      	bhi.n	80097e8 <USBD_Get_USB_Status+0x44>
 80097b8:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <USBD_Get_USB_Status+0x1c>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	080097d7 	.word	0x080097d7
 80097c8:	080097dd 	.word	0x080097dd
 80097cc:	080097e3 	.word	0x080097e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
    break;
 80097d4:	e00b      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097d6:	2303      	movs	r3, #3
 80097d8:	73fb      	strb	r3, [r7, #15]
    break;
 80097da:	e008      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097dc:	2301      	movs	r3, #1
 80097de:	73fb      	strb	r3, [r7, #15]
    break;
 80097e0:	e005      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	73fb      	strb	r3, [r7, #15]
    break;
 80097e6:	e002      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	73fb      	strb	r3, [r7, #15]
    break;
 80097ec:	bf00      	nop
  }
  return usb_status;
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <memset>:
 80097fc:	4402      	add	r2, r0
 80097fe:	4603      	mov	r3, r0
 8009800:	4293      	cmp	r3, r2
 8009802:	d100      	bne.n	8009806 <memset+0xa>
 8009804:	4770      	bx	lr
 8009806:	f803 1b01 	strb.w	r1, [r3], #1
 800980a:	e7f9      	b.n	8009800 <memset+0x4>

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4d0d      	ldr	r5, [pc, #52]	@ (8009844 <__libc_init_array+0x38>)
 8009810:	4c0d      	ldr	r4, [pc, #52]	@ (8009848 <__libc_init_array+0x3c>)
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	2600      	movs	r6, #0
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	4d0b      	ldr	r5, [pc, #44]	@ (800984c <__libc_init_array+0x40>)
 800981e:	4c0c      	ldr	r4, [pc, #48]	@ (8009850 <__libc_init_array+0x44>)
 8009820:	f000 f818 	bl	8009854 <_init>
 8009824:	1b64      	subs	r4, r4, r5
 8009826:	10a4      	asrs	r4, r4, #2
 8009828:	2600      	movs	r6, #0
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	0800990c 	.word	0x0800990c
 8009848:	0800990c 	.word	0x0800990c
 800984c:	0800990c 	.word	0x0800990c
 8009850:	08009910 	.word	0x08009910

08009854 <_init>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr

08009860 <_fini>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	bf00      	nop
 8009864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009866:	bc08      	pop	{r3}
 8009868:	469e      	mov	lr, r3
 800986a:	4770      	bx	lr
